#!/usr/pkg/bin/perl
use strict;
our(@ARGV);
use Getopt::Std;

my($VERSION);
$VERSION = "2015-01-20 01:32" ; # write by emacs time-stamp
$VERSION .= ' UTC';

sub usage() {
    print <<HELP;
Merge the output of check-update;
Synopsis:
   merge-check-update [-h] archivers.html audio.html ... x11.html
Where:

Example:
   (cd output_directory; merge-check-update *.9.html)
HELP
}

sub ExecutionTime($$){
    my ($started) = shift;
    my ($ended)   = shift;
    my ($took)    = $ended - $started;

    my ($hour) =  int($took/3600);
    my ($min)  =  int( ($took - ($hour * 3600) )  /60);    
    my ($sec) =   $took - $hour * 3600 - $min * 60;
    return  sprintf("%02d:%02d:%02d", $hour, $min, $sec);
}
#  Generating three string for the date, for example:
#    $upper_directoy/20150120     ($output_directory)
#   $upper_directoy/.20150120     ($output_directory_tmp)
#                    20150120     ($leaf)

sub DirectoryName($){
    my ($upper_directory) = shift;
    my ($output_directory,
	$output_directory_tmp,
	$leaf)	;
	my($sec, $min, $hour, $date, $mon, $year, $dofweek, $dayofyear, $summertime) 
	    = gmtime();
	$leaf
	    = sprintf("%04d%02d%02d", $year + 1900, $mon + 1, $date); 
    if ($upper_directory) {
	$output_directory     = $upper_directory .      $leaf .'/';
	$output_directory_tmp = $upper_directory . '.'. $leaf .'/'; }
    if (! -d $output_directory_tmp ) { mkdir  $output_directory_tmp ;}
    return ($output_directory, $output_directory_tmp, $leaf);
};

sub main() {
my ($summary, $summary_leaf, $summary_tmp, $upper_directory);    
my ($script);
my ($Started) = time();
#print STDERR sprintf("%4d ", __LINE__), 'Started: ', $Started, "\n";
#print scalar(gmtime($Started)), "\n";
my ($Ended);
    $upper_directory = $ENV{'HOME'}.'/public_html/pkgsrc/check-update/';
my ($output_directory, $output_directory_tmp, $leaf ) = DirectoryName($upper_directory);
my ($whole_tmp) = $output_directory_tmp. '00_whole.html';
my ($stats_tmp) = $output_directory_tmp. '00_Stats.html';
#print STDERR sprintf("%4d ", __LINE__), ':', $whole, ': >', $whole_tmp,"<\n";
my ($string);
my (@headers);

    my(	  $Found  ,
	  $TODO_LIST ,
	  $OK  ,
	  
	  $NotAvailable ,
	  $NoMasterSites ,
	  $Forbidden ,
	  $SkippedEndingDigit ,

	  $SkipTooOld ,
	  $MetaPackage ,
	  $Reverse ,
	  $NotListed ,
	  $StatsMasterSite404 ,
	$Sum,
	$TotalChecked, $started, $time);

my (%opts);
getopts('h', \%opts);
if ($opts{'h'} ) { usage(); exit;}
my ($statsline);
my (@sums);
my ($StatsNotRead)  = 1;	# 1 stats is not read, 0 alread read.
my ($headerNotRead) = 1;	# See the bottom (below  __END__)

my ($Header, $Body, $TableHeader, $Stats) = (0, 1, 2, 3); #  Define constant

open(WHOLE, "> $whole_tmp") || print STDERR sprintf("%4d ", __LINE__), "Problem open file $whole_tmp: $!\n";
open(STATS, "> $stats_tmp") || print STDERR sprintf("%4d ", __LINE__), "Problem open file $stats_tmp: $!\n";
#
#   Read by-category output files
#
foreach my $file (@ARGV) {
    $file = $upper_directory . $file;
    my ($state)		= $Header;    # constant: (0) Header (1) Body (2) TableHeader (3) Stats

    open(FILE, $file) || print STDERR sprintf("%4d ", __LINE__), "Problem opening to read: $file $!\n";
    while (<FILE>) {
        if (/^<html>/ )			{ $state	= $Header; }	# Header starts by this line
	if (/^<pre>/)			{ $state = $Stats; }	# Stats starts
	if (/<table cellspacing=/ )	{ $state	= $TableHeader; }

	if      ( $state == $Header )	{if ( $headerNotRead )	{ print WHOLE $_ ; print STATS $_ ;}
	} elsif ( $state == $Body )				{ print WHOLE $_ ;
	} elsif ( $state == $TableHeader ){if ( $headerNotRead )	{ print WHOLE $_ ; }
	} else { # type == $Stats
	    if ($StatsNotRead) {
		if    (/^(\S.*:)\s+\d+\s+(\S.*)/)	{ push(@headers, [$1, $2]);}
		elsif (/^(\S.*:)\s+\d+/) 		{ push(@headers, [$1, '']);}
	    }
	    if (/^ForMergeCount:([0-9, ]+)/) {
		$statsline = $1;
		$StatsNotRead = 0;
	    }
	}

	if (/<th>Update-To</ )		{ $state	= $Body        ; $headerNotRead = 0;} # Body starts on next line
    }
    close(FILE);

    my(@statsline) =  split(',', $statsline);
#
#   C A L C U L A T I O N
#
    foreach my $i (0 .. $#statsline -2 ) {
	$sums[$i] += $statsline[$i];
    }
#
#   E X E C U T I O N   T I M E
#
    if ($statsline[14] > 1421500000) { # set lower limit in case blank etc
	if ($Started > $statsline[14] ) { $Started = $statsline[14]; }}   # find minimum time
    if     ($Ended   < $statsline[15] ) { $Ended   = $statsline[15]; }	  # find maximum time
}


my(@STATS);	# to print two destination, STATS and WHOLE, making buffer

push(@STATS, "<pre>\n");
push(@STATS, '<a href="./?C=M;O=D"> This directory</a> | <a href="../?C=M;O=D"> Upper directory</a>'."\n");

#
#
#
foreach my $el ( 0.. $#sums) {

    if  ( $headers[$el] ->[0] =~ /<span/ )	{ 
	   push(@STATS, sprintf("%-40s %6d %s\n",	$headers[$el]->[0], $sums[$el], $headers[$el]->[1] )); } 
    else { push(@STATS, sprintf("%-20s %6d %s\n",	$headers[$el]->[0], $sums[$el], $headers[$el]->[1] )); } 
}
#
#  T I M E   I N F O R M A T I O N
#
push(@STATS, sprintf( "Started:\t %s UTC\n", scalar(gmtime($Started))) );
push(@STATS, sprintf( "Ended:  \t %s UTC\n", scalar(gmtime($Ended)))   );
push(@STATS, sprintf( "Elapsed:\t            %s\n", ExecutionTime($Started, $Ended)) );

my ($url)	= sprintf ("http://www.ki.nu/~makoto/pkgsrc/check-update/%s/00_whole.html", $leaf);
my ($url_stat)	= sprintf ("http://www.ki.nu/~makoto/pkgsrc/check-update/%s/00_Stats",   $leaf);

push(@STATS, sprintf( "Whole listing: <a href=\"%s\">%s</a>\n", $url,	   $url     ) );
push(@STATS, sprintf( "        Stats: <a href=\"%s\">%s</a>\n", $url_stat, $url_stat) );
push(@STATS, sprintf( "</pre>\n") );

     print WHOLE @STATS;
     print STATS @STATS;
close(STATS);
close(WHOLE);
}

main();
__END__


output following part onlye once:

(FILE1)
---------------
H| <html>
H| <style>
H|     body    { font-size: small;}
H|     table   { font-size: small;}
H|     tr.user      { background-color: #e8e8f0; }
H|    ......
H|     td.update { background: #d0c8c8;}
H|     td.grey   { background: #c0c0c0;}
H| </style>
H| 
H| <body>
H| <table cellspacing=0 cellpadding=3 border=0>

T| <table cellspacing=0 cellpadding=3 border=0>
T| <tr><th>directory</th><th>Package</th><th>Now</th><th></th>
T| <th>Update-To</th><th>TODO</th><th>MAINTAINER</th><th>MASTER_SITES (only the first one checked) </th></tr>

B|
B|  (TABLE), body
B|
B|

S|<pre>
S|.. (STATS)
S|</pre>

(FILE2)
---------------
H| <html>
H| <style>
H|     body    { font-size: small;}
H|     table   { font-size: small;}
H|     tr.user      { background-color: #e8e8f0; }
H|    ......
H|     td.update { background: #d0c8c8;}
H|     td.grey   { background: #c0c0c0;}
H| </style>
H| <body>

T| <table cellspacing=0 cellpadding=3 border=0>
T| <tr><th>directory</th><th>Package</th><th>Now</th><th></th>
T| <th>Update-To</th><th>TODO</th><th>MAINTAINER</th><th>MASTER_SITES (only the first one checked) </th></tr>

B|      (TABLE)

S| <pre>
S| ..(STATS)
S| </pre>


security/sign is strange:
misc/parchive is strange:
