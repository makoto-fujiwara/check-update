#!/usr/pkg/bin/perl
use strict;
#use warning;
use Net::DNS;	# net/p5-Net-DNS
use Getopt::Std;
use v5.16;

# For emacs setup, see the bottom of this file (or evaluate them)
my($VERSION);
$VERSION = "2016-05-13 14:08" ; # written by emacs time-stamp
$VERSION .= ' UTC';
my ($MAXSTRINGLEN) = 30;	# Max length of string to pick version
			        # avoid problem on devel/py-ipython-10
my ($MIN_LINES) = 5;		# retry threshold less than this lines
my ($SF_SITE) = 'http://sourceforge.net/';
our(@ARGV);
#   requirement:
#       net/curl
#       misc/rubygems.
#       security/mozilla-rootcert installed and following executed.
#        #  mozilla-rootcerts install
#use pkgsrc::Dewey;
#       dewey_cmp(lhs, op, rhs);
#       dewey_match(pattern, package);

my($my_name) = $0;
   $my_name =~ s#(.*)/##;

my ($pkgsrc) = '/usr/pkgsrc';	#
my ($summary);			# output file name
my (%TODO);			# found info in doc/TODO, $TODO{$package} = $version
my ($MaturedList) = 'MaturedList';# File name for the list of matured list category/package name format

my ($line); # SpecialPattern
# output to tmp name and rename it at the end of execution
my ($summary_tmp);
my ($summary_leaf);	# only for stats output

my ($DEBUG_ALTERNATIVE);
my ($DEBUG_CACHE);
my ($DEBUG_CANDIDATE);
my ($DEBUG_COUNT);
my ($DEBUG_CURL);
my ($DEBUG_CURL_CACHE);
my ($DEBUG_CURL_LISTING);
my ($DEBUG_DIGIT);
my ($DEBUG_DISTBASE);
my ($DEBUG_DIVIDE_DEVEL) = 0;
my ($DEBUG_EVAL_PATTERN);
my ($DEBUG_EDITVersion);
my ($DEBUG_FAMILY) = 0;
my ($DEBUG_FALLBACK_SIMPLE) = 0;
my ($DEBUG_GITHUB);
my ($DEBUG_GNOME);
my ($DEBUG_HTTP_HEADER);
my ($DEBUG_MASTER_SITES_LISTING);
my ($DEBUG_REDIRECT);
my ($DEBUG_RUBYGEM);
my ($DEBUG_SF);
my ($DEBUG_SPECIAL_PATTERN);
my ($DEBUG_STATS);
my ($DEBUG_URL);
my ($DEBUG_VER_PATTERN) = 0;
my ($DEBUG_VERSION_DIR);

my ($SINGLE_PACKAGE) = 0;

my(%LongName)  = (
   'A',  'Alternative master site',
   'a',  'enable_All',
   'c',  'Cache',
   'C',  'Curl Command',
   'd',  'Distbase Pattern',
   'D',  'Master site ends with digit directory',
   'e',  'Eval Special Pattern',
   'E',  'Edit Version',
   'f',  'Classify (find family)',
   'F',  'FallBack Simple Pattern',
   'g',  'Github',
   'G',  'Gnome',
   'h',  'HTTP Header',
   'l',  'Curl Listing',
   'm',	 'MASTER_SITES_LISTING',
   'n',  'CountNumber (not implemented yet)',
   'p',  'Special Pattern',
   'r',  'RubyGems',
   'R',  'Redirect',
   's',  'SourceForge',
   'S',  'Stats number',
   'u',  'URL',
   'V',  'Versioned Sub Directory',
   'x',  'Curl Cache',
   'X',	 'Explode candidate',
);
#foreach my $l (keys %LongName) {
#    print $l, " -> ", $LongName{$l},"\n";
#}
#exit;
my ($curl_head)		= 'curl -k -I --location --insecure';
my ($curl_head_secure)	= 'curl -k -I --location --insecure -s';
my ($curl_list)		= 'curl -k -l --location --insecure --user-agent FireFox';
my ($curl_list_secure)	= 'curl -k -l --location --insecure --user-agent FireFox -s';

#    $curl_head		= 'w3m -dump_head';
#    $curl_head_secure	= 'w3m -dump_head';
#    $curl_list		= 'w3m -dump_source';
#    $curl_list_secure	= 'w3m -dump_source';

# w3m has a problem on archiver/unalz
## modena@makoto 22:35:59/150120(~)% w3m -dump_head http://www.kipple.pe.kr/win/unalz/
## unable to get local issuer certificate: accept? (y/n)

# stats:
my ($Found)	= 0;
my ($OK)	= 0;
my ($NotFound)	= 0;
my ($Forbidden)	= 0;
my ($Moved)	= 0;
my ($NotListed) = 0;
my ($TODO_LIST) = 0;
my ($DNSProblem) = 0;
my ($Reverse)   = 0;	# for stats
my ($MetaPackage)  = 0;	
my ($TotalChecked)	= 0;
my ($NotAvailable)	= 0;
my ($NoMasterSites)	= 0;
my ($NoMasterSitesStats)= 0;
my ($NoHost)	= 0;	# DNS query failed
my ($SkipTooOld) = 0;  # count
my ($StatTEXLIVE) = 0;

#my ($MasterSite404);		# by package status
my ($SkippedEndingDigit) = 0;	# (Stats): Skip flag: Packagename ending with digit;
my ($SkippedEndingDigitStats) = 0;	# (Stats): Skip count: Packagename ending with digit;
my ($StatsMasterSite404) = 0;	# for count
my ($PackageStatus) = 0;	# (http_code) Each package has only one status, and the collect for stats. 

my ($MasterSiteStat);		# by package status
my ($HomePageStat);		# by package status
my ($StatsHomePageStat) = 0;	# for count

#my ($PKGNAME, $PKGVERSION, $MASTER_SITES);
my ($CVSweb)	= 'http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/';
my (@SUFIX)	= qw(.tar.gz tar.bz2 tar.xz .zip);

# opts, option related variables
my ($option_batch) = 0;
my ($category);			# (c) ... global variable
my ($verbose) = 0;
my ($selected) = '';		# (P) Check this package only
my ($DISTNAME);
my ($skip_until_match) = 0;	# (s)
my ($starting)	= 0;
my ($partial)	= 0;		# not whole execution, don't write to normal summary file
my ($include_wip) = 0;		# whether includes wip(1) or not(0)
my ($update_wip) = 0;		# cvs update before execution
my ($include_reverse) = 0;	# (r) whether includes confusing entry (default no)
my ($skip_rubygems_check) = 0;  # (R) skip time consuming check (default -> always check)

my ($output_leaf)	= 'pkgsrc/check-update';
my ($output_URL)	= 'http://www.ki.nu/~makoto/';
my ($output_directory)	= $ENV{'HOME'}.'/public_html/'. $output_leaf;

my ($update_pkgsrc) = 0;	# (u) cvs update prior to execution
my ($full_list) = 0;		# (f)
my ($disable_digit_ending_package) = 0;	# Change logic and name
my ($MeasureTime) = 0;
my ($FindDepends) = 0;
my (@TimeTopTen);
my ($LimitedList);
my ($merge_mode) = 0;
my ($maintainer) = 0;		# output for the maintainer
my ($divide_devel) = '';	# execute divided manner on devel category

my (@CurlCache);		# keep the last time listing resuls;
my (@LOCAL_PORTS);
my ($local_ports_string) = 	'netbsd.org/pub/NetBSD/packages/distfiles/LOCAL_PORTS/';
my ($LastCurl);			# The curl command when above cache stored

my ($start_time) = time();
our(%opts);
# ----------------------------------------
#      N O   D E V E L O P M E N T 
# ----------------------------------------
my (@SkipTooOld) 
    = qw(xview-lib estic zenicb tex2rtf gkermit kermit gturing bridge-hands ccxstream weewm Cg-compiler p5-File-FlockDir autoconf213);

# Simple means $distbase-([0-9.]+)-(extran string not necessary)..
my (@SimplePattern)  = qw(gmpc 
renpy crimson crack-attack hands flags autotrace simulavr hal 
sign parchive cabextract celt auctex ntp mercury-srcdist Net-Libdnet
IO-Socket-Multicast
Net-IPv4Addr Net-IPv6Addr Net-XMPP lzo pen iperf lftp Text-Diff inform
ocaml
audacious audacious-plugins WWW-Shorten proj
hfsutils gamin Coin klayout ffmpeg macholib modulegraph py2app db
SOPE cmph zlib
);

# Net-Libdnet is listed to avoid not to pick Net-Libdnet6-0.27 -as 6-0.27
#my (@Debian) = qw(signing-party);

my ($SpecialPatternY);	# variable to hold by-package pattern
# key is DISTBASE (but please note DISTBASE itself is extracted by this script)    
my (%SpecialPattern) = (
    'cairo',		'$line =~ s/.*$distbase(-5c){0,}-([0-9.]+[0-9]).*/$2/ ;',  # games/crimsonfields
    'potrace',		'$line =~ m|.*$distbase[_-]([0-9.]+)[.-].[a-z].*|; my($rrr) = $1 ;',

#   Next line is SimplePattern equivalent
#   'crack-attack',	'$line =~ s/.*$distbase-([0-9.]+).*/$1/ ;',
    'amavisd',		'$line =~ s/.*$distbase-([0-9.]+\.[0-9]+\.[0-9]+)/$1/ ;',
    
#                                    '$distbase' here doesn't make it
#                                     v
    'signing-party',	'$line =~ s/.*signing-party_([0-9.]+)-.*/$1/ ;',
    'Cython',		'{$line =~ m|.*$distbase-([0-9]\.[0-9]+\.[0-9])|; $line = $1 ;}',
#    'NovaWM', 	        '$line =~ s/.*$distbase-([0-9.]+).*/$1/ ;', #   -0.8.1_alpha.tar.bz2 (716.3 kB)
#    'sign',		'$line =~ s/The latest version is ([0-9.]+),/$1/ ;', #  security/sign  1-bit ui</a><br --> 
    'lzop',		'$line =~ s/.*lzop-([0-9.]+)\..*/$1/;',
    'synce',		'$line =~ s/.*synce-gvfs-([0-9.]+)\..*/$1/;',
    'iozone',		'$line =~ s/.*iozone([0-9_.]+)\.tar.*/$1/;',
    'CPAN',		'$line =~ s/.*CPAN-([0-9_.]+)\.tar.*/$1/;',
    'pyproj',		'$line =~ s/.*v([0-9_.]+)rel/$1/;',
    'picprg',		'$line =~ s/.*picprg([0-9.]+)\.tgz/$1/;',
    'IPC-Run',		'$line =~ s/.*IPC-Run-([0-9.]+)\.tar.gz/$1/;',
    'Term-ReadLine-Perl','$line =~ s/.*Term-ReadLine-Perl5-([0-9.]+)\.tar.gz/$1/;',#
    'acmesrc',		'$line =~ s/.*acme([0-9.]+)src\.tar\.gz.*/$1/;',
    'openscad',		'$line =~ s/.*openscad-([0-9.]+)\.src\.tar\.gz.*/$1/;',
    'gr-fcdproplus',	'$line =~ s/.*gr-fcdproplus_([0-9.]+)\.orig\.tar.*/$1/;',
    'apache-ivy-bin',	'$line =~ s|.*/([0-9.]+)/.*|$1|;',
    'pl',		'$line =~ s/.*pl-([0-9.]+)\.tar\..*/$1/;',
    'Par',		'$line =~ s|.*Par([0-9]+)\.tar.*|$1|;',
    'umefont_',		'$line =~ s|.*umefont_([0-9]+)\.tar.*|$1|;',
    'makeself',		'$line =~ s|.*makeself-([0-9.]+)\.run.*|$1|;',
    'rar',		'$line =~ s|.*rarbsd-([0-9.]+)\.tar.*|$1|;',
    'archive',		'$line =~ s|.*archive-([0-9.]+)\.tar.*|$1|;',
    'SOGo',		'$line =~ s|.*SOGo-([0-9]\.[0-9.]+)\.tar.*|$1|;', # not to pick 2007.. version
    'electric',		'$line =~ s|.*electric-([0-9.]+)\.jar.*|$1|;',
    'apache-apollo-unix-distro', '$line =~ s|.*apache-apollo-([0-9.]+)-unix-distro.tar.*|$1|;',
    'hping',		'$line =~ s|.*hping([0-9.]+)-rc([0-9])\.tar.*|$1.$2|;',
    'flodo-v',		'$line =~ s|.*flodo-v([0-9.]+)\.tar.*|$1.0|;',
    'CRF++',		'$line =~ s|.*CRF.2B.2B-([0-9.]+)\.tar.*|$1|;', # .%2B.%2B
    'FlightCrew-Code',	'$line =~ s|.*FlightCrew-([0-9.]+)-Code\..*|$1|;',
    'icu4c',		'$line =~ s|.*icu4c-src-([0-9._]+).*|$1|;',
#    'Text-Diff',	'$line =~ s|.*Text-Diff-([0-9._]+).*|$1|;',
    'krb5',		'$line =~ s|.*krb5-([0-9.]+[0-9])-(signed)\..*|$1|;',
    'perl',		'$line =~ s|.*perl-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'dbus',		'$line =~ s|.*dbus-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'cairo',		'$line =~ s|.*cairo-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'gst-plugins-ugly', '$line =~ s|.*gst-plugins-ugly-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'gst-plugins-base', '$line =~ s|.*gst-plugins-base-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'gst-plugins-bad',  '$line =~ s|.*gst-plugins-bad-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'gst-plugins-good', '$line =~ s|.*gst-plugins-good-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
# following line doesn't work yet, github ignores this line ?
    'liferea',		'$line =~          s|.*liferea-([0-9]+\.[0-9]*[02468]\.[0-9]+)\.tar.*|$1|;',
    'gnu-crypto-bin',	'$line =~ s|.*gnu-crypto-([0-9.]+)-bin\.tar.*|$1|;',
    'apache-ant-bin',	'$line =~ s|.*apache-ant-([0-9.]+)-bin.*|$1|;',
    'shinonome-src',	'$line =~ s|.*shinonome-([0-9.]+)-src.*|$1|;',
    'IPAfont',		'$line =~ s|.*IPAfont([0-9.]+)\.zip.*|$1|;',
    'SGMLspm',		'$line =~ s|.*SGMLspm-([0-9.iv]+)\..*|$1|;',
    'easigit',		'$line =~ s|.*([0-9.]+)/eg.*|$1|;',
    'Text-Tabs+Wrap',	'$line =~ s|.*Text-Tabs.*-([0-9.]+).*|$1|;',
    'CRF++',		'$line =~ s|.*CRF\+\+-([0-9.]+[0-9]).*|$1|;',
    'eagle-lin32',	'$line =~ s|.*eagle-lin32-([0-9.]+)\.run.*|$1|;',
    'bonnie.+',		'$line =~ s|.*bonnie\+\+-([0-9.a-z]+)\.tgz.*|$1|;',
				     #bonnie++-1.03e.tgz
    'iozone_430',	'$line =~ s|.*iozone([0-9])_([0-9]+).*|$1.$2|;',
    'cherokee',		'$line =~ s|.*Download Cherokee ([0-9.]+).*|$1|;',
    'gsasl',		'$line =~ s|.*\bgsasl-([0-9.]+)\.tar.*|$1|;',
    'Apache-Gallery',	'$line =~ s|.*Apache-Gallery-([0-9.]+)-.*|$1|;',
    'bind',		'$line =~ s|.*bind-([0-9.Ppl]+).*|$1|;',
    'wmii',		'$line =~ s|.*wmii-([0-9]\.[0-9]+)\.tar.*|$1|;',  # force having period in pattern
    'multitail',	'$line =~ s|.* stable version .*>([0-9.]+)</A.*|$1|;', 
    'xcdroast',		'$line =~ s|.*xcdroast/([0-9.a]+)lpha([0-9]+).*|$1$2|;', 
    'nut',		'$line =~ s|.*NUT ([0-9.]+) released.*|$1|;',
    'fldigi',		'$line =~ s|.*fldigi-([0-9]+\.[0-9]+\.[0-9]+)\.tar.*|$1|;',
    'biblook',		'$line =~ s|.*Version ([0-9.]+),.*|$1|;',
    # 0.043_01 -> 0.043.01
    'Exporter-Tiny',	'$line =~ s|.*Exporter-Tiny-([0-9.]+)([_.]*[0-9]*).*|$1$2|;',
    'appdata_tools',	'$line =~ s|.*appdata_tools_([0-9_]+).*|$1|;',
    'fann',		'$line =~ s|.*FANN-([0-9.]*)-Source.zip.*|$1|;',
#   'hackrf',		'$line =~ s|^([0-9.]*)-.*|$1|;',
#   'mame',		'$line =~ s|.*mame([0-9.]*).*|$1|;',
#   'pyobjc-framework-WebKit', '$line =~ s|.*Version ([0-9]\.[0-9.]+).*|$1|;',
    'Mako',		'$line =~ s|.*<p>Current version is <b>([0-9.]+)</b>|$1|;',
    'tnt',		'$line =~ s|.*tnt-[0-9]\.[0-9]+)\.tar*|$1|;',
    'visualvm_',	'$line =~ s|.*visualvm_([0-9]+)-src\..*|$1|;',
    );

my(%SourceForgeAlternative) = qw (
    burn	http://sourceforge.net/projects/gsburn/files/burn/burn-0.4.1/ 
    acidrip	http://sourceforge.net/projects/acidrip/files/acidrip/0.14%20-%20Your%20two-wheeled%20knife/
    dirac	http://sourceforge.net/projects/dirac/files/dirac-codec/Dirac-1.0.2/
    gxine	http://sourceforge.net/projects/xine/files/gxine/0.5.908/
    libassetml	http://sourceforge.net/projects/ofset/files/libassetml/1.2.1/
    xmltv	http://sourceforge.net/projects/xmltv/files/xmltv/0.5.66/
    OroboROX	http://sourceforge.net/projects/rox/files/OroboROX/0.9.8/
    pcmanfm	http://sourceforge.net/projects/pcmanfm/files/PCManFM%20%2B%20Libfm%20%28tarball%20release%29/PCManFM/
    gtkglarea	http://sourceforge.net/projects/openev/files/gtkglarea/gtkglarea-1.2.3/
    Glib-Object-Introspection	http://sourceforge.net/projects/gtk2-perl/files/Glib_Object_Introspection/
    Gnome2	http://sourceforge.net/projects/gtk2-perl/files/Gnome2/1.045/
    Gtk2-GladeXML	http://sourceforge.net/projects/gtk2-perl/files/Gtk2_GladeXML/1.007/
    Gnome2-GConf	http://sourceforge.net/projects/gtk2-perl/files/Gnome2_GConf/1.044/
    Cairo	http://sourceforge.net/projects/gtk2-perl/files/Cairo/1.105/
    Cairo-GObject http://sourceforge.net/projects/gtk2-perl/files/Cairo_GObject/
    Gnome2-Canvas http://sourceforge.net/projects/gtk2-perl/files/Gnome2_Canvas/1.002/
    Glib	http://sourceforge.net/projects/gtk2-perl/files/Glib/1.307/
    FreeImage	http://sourceforge.net/projects/freeimage/files/Source%20Distribution/3.16.0/
    gsoap	http://sourceforge.net/projects/gsoap2/files/gSOAP/
    OdfConverter http://sourceforge.net/projects/odf-converter/files/ODF%20Add-in%20for%20Office/Release%204.0/
    libhtmlobject-perl http://sourceforge.net/projects/htmlobject/files/htmlobject/
); #'

# PKGBASE to $DISTBASE association Special (ending digit is main customer)
my(%DISTBASE) = qw (
    basic256	basic256
    nhc98	nhc98src
    ntfsprogs	ntfs-3g_ntfsprogs
    primer3	primer3-src
    appdata-tools appdata_tools
    p5-OLE-Storage_Lite	OLE-Storage_Lite
    p5-IPC-Run	IPC-Run
    p5-App-Prove-Plugin-ProgressBar App-Prove-Plugin-ProgressBar
    p5-Term-ReadLine-Perl Term-ReadLine-Perl
    fixesproto4 fixesproto4
    gr-fcdproplus gr-fcdproplus
    swi-prolog	pl
    static-ast-ksh	ast-ksh
    ast-ksh	ast-ksh
    p5-Net-IPv4Addr Net-IPv4Addr
    p5-Net-IPv6Addr Net-IPv6Addr
    p5-Mojo-IOLoop-ForkCall Mojo-IOLoop-ForkCall
    nulib2	nulib
    rar		rar
    rox-archive	archive
    Geomyidae	geomyidae
    hping	hping
    hping3	hping3
    flodo	flodo-v
    xdg-utils	xdg-utils
    icu		icu4c
    p5-mecab	mecab
    mit-krb5	krb5
    eagle	eagle-lin32
    bind	bind
    );
   
my(%DownLoadAlternative) = qw (
    openbox	http://openbox.org/wiki/Openbox:Download
    oroborus	http://ftp.debian.org/debian/pool/main/o/oroborus/
    3proxy	http://3proxy.ru/download/
    arp-scan	http://www.nta-monitor.com/tools-resources/security-tools/arp-scan
    skampi	http://liinwww.ira.uka.de/~skampi/download.html
    abcMIDI	http://ifdo.pugmarks.com/~seymour/runabc/top.html
    xmms-crossfade	http://www.eisenlohr.org/xmms-crossfade/download.html
    ast-ksh	http://www2.research.att.com/sw/download/
    Event-ExecFlow	http://www.exit1.org/download/event-execflow
    Event-RPC	http://www.exit1.org/download/event-rpc
    pyproj	https://github.com/jswhit/pyproj/releases/
    mercury-srcdist	http://dl.mercurylang.org/index.html
    LuaJit	http://luajit.org/download.html
    LuaJit2	http://luajit.org/download.html
    basic256	http://sourceforge.net/projects/kidbasic/
    nhc98src	https://www.haskell.org/nhc98/download.html
    connect	https://bitbucket.org/gotoh/connect/downloads
    pcre++	http://www.daemon.de/PcreDownload
    boolean	http://boolean.klaasholwerda.nl/download/download.html
    dinotrace	http://www.veripool.org/projects/dinotrace/wiki/Installing
    openscad	http://files.openscad.org/
    qcad	http://www.qcad.org/archives/qcad/
    frozen-bubble	http://www.frozen-bubble.org/downloads/
    gmfsk	http://gmfsk.connect.fi/download.html
    dpbox	http://home.snafu.de/wahlm/dl8hbs/download.html
    lzma	http://www.7-zip.org/sdk.html
    makeself	http://www.megastep.org/makeself/
    nulib2	http://nulib.com/downloads/index.htm
    rar		http://www.rarlabs.com/download.htm
    archive	http://rox.sourceforge.net/2005/interfaces/Archive
    CGI-SpeedyCGI	http://daemoninc.com/SpeedyCGI/download.html
    djbdns	http://cr.yp.to/djbdns/install.html
    geomyidae	http://git.r-36.net/geomyidae/
    apache-apollo-unix-distro
    		http://activemq.apache.org/apollo/download.html
    BitTornado	http://www.bittornado.com/download.html
    hping	http://www.hping.org/download.html
    iana-etc	http://sethwklein.net/iana-etc
    lftp	http://lftp.yar.ru/get.html
    libdmapsharing https://git.gnome.org/browse/libdmapsharing
    libdnet	http://code.google.com/p/libdnet/downloads/list
    CRF++	http://code.google.com/p/crfpp/downloads/list
    FlightCrew	http://code.google.com/p/flightcrew/downloads/list
    highlight	http://www.andre-simon.de/zip/download.php
    krb5	http://web.mit.edu/kerberos/dist
    IPAfont	http://ipafont.ipa.go.jp/ipafont/download.html
    xscreensaver	http://www.jwz.org/xscreensaver/download.html
    ETL		http://sourceforge.net/projects/synfig/files/ETL/0.04.13/
    distcc	http://code.google.com/p/distcc/downloads/list
    cabocha	https://drive.google.com/folderview?id=0B4y35FiV1wh7cGRCUUJHVTNJRnM&usp=sharing#list
    CRF++	https://drive.google.com/folderview?id=0B4y35FiV1wh7fngteFhHQUN2Y1B5eUJBNHZUemJYQV9VWlBUb3JlX0xBdWVZTWtSbVBneU0&usp=drive_web#list
    GutenMark	http://www.sandroid.org/GutenMark/download.html
    dbus-sharp	https://github.com/mono/dbus-sharp/downloads
    dbus-sharp-glib	https://github.com/mono/dbus-sharp/downloads
    eagle-lin32	http://www.cadsoft.de/download-eagle/
    libol	https://my.balabit.com/downloads/libol/0.3
    WordNet	http://wordnet.princeton.edu/wordnet/download/current-version/
    aspell5-ga	http://borel.slu.edu/~kps/ispell/sios.html
    agg		http://www.antigrain.com/https://bitbucket.org/izi/polib/downloadsdownload/index.html
    mechanize	http://wwwsearch.sourceforge.net/mechanize/download.html
    klayout	http://www.klayout.de/build.html
    ming	https://sourceforge.net/projects/ming/files/Releases/
    fann	http://leenissen.dk/fann/wp/download/
    Mako	http://www.makotemplates.org/download.html
    macholib	https://bitbucket.org/ronaldoussoren/macholib/downloads#tag
    modulegraph	https://bitbucket.org/ronaldoussoren/modulegraph/downloads#tag
    py2app	https://bitbucket.org/ronaldoussoren/py2app/downloads#tag
    polib	https://bitbucket.org/izi/polib/downloads
    db		http://www.oracle.com/technetwork/jp/products/berkeleydb/downloads/index-090620-ja.html
    ); ##

# for print/xpdf-arabic etc
my (%MonthToDigit) = qw (
    -jan- 01  -apr- 04  -jul- 07   -oct- 10
    -feb- 02  -may- 05  -aug- 08   -nov- 11
    -mar- 03  -jun- 06  -sep- 09   -dec- 12
    );
# arp-scan is the same as HOMEPAGE (strange)
# Now global variables in Makefile
    my ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $TEXLIVE, $EGG_PACKAGE) ;

    my ($PKGBASE, $PKGNAME, $DISTBASE, $MASTER_SITE, $META_PACKAGE);
    my (@MASTER_SITES);
    my ($available, $http_code);
    my ($URL);			# global variable
    my ($output_record);	# string to output HTML
    my ($PKGVERSION);

    my ($max_version);
    my ($returnCode, @candidate);

sub SpecialPattern($$){
    my($distbase) = shift;
    my($line) = shift;
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $line, ' --> Pattern ', $SpecialPattern{$distbase}, "\n" if $DEBUG_EVAL_PATTERN ;
    eval $SpecialPattern{$distbase} ;
    print STDERR sprintf("%4d ", __LINE__ ), ' === >', ' (', $line,")\n" if $DEBUG_EVAL_PATTERN ;
    # not to return garbage
    if ( !($line =~ m|^[0-9._-]+$| ) ){  $line = '';}
    $line =~ y|_|.|;
    print STDERR sprintf("%4d ", __LINE__ ), ' === >', ' (', $line,")\n" if $DEBUG_EVAL_PATTERN ;
    return $line;
}

my (@CANDIDATE);	# collecting candidate of the version
my (%DISTBASE_CACHE);   # push(@DISTBASE_CACHE, \[$distbase, $version, $timestamp, $refcount]);

my (@DontSkipEndingDigit)  = qw (eric4 fltk2);
# 100 -> 1.0.0 type
my (@THREE) = qw(gtkglarea falcons-eye quakedata abcde binkd bwwtex cryptopp dirb sr-examples pscpug DatLib DatUtil ROMbuild xzip libdsk libgeotiff ploticus-examples shapelib proj vs mlvwm lwm biew proxytunnel visualvm_);
                                               # vs <- lang/sr-exaples
# 179w2 -> 1.7.9
#my (@THREEW) = qw(john); see ThreeSingle

# 300 -> 3.0  unzip
# 600 -> 6.0  zip
my (@ZIP) = qw (zip unzip fMSX);

my (@Arabian) = qw(SGMLSpm);
# 100 -> 1.00 type
my (@VER32) = qw(
gigbase gku bunzip wxRemind qkc atasm bicom bww2tex cgic 
PDF par jpilot-syncmail asterisk-perl pyserial datlib dutil 
mdiff rbuild rinfo zident adodb lzma lzop upx piewm sawfish 
wmctrl wmakerconf mesch gigabase plnode uno Par sgrep acmesrc netio
mame
);

# 31 -> 3.1 # 3370 -> 3.370 devel/cfitsio
my (@VER22) = qw(doc2html cfitsio lcc ctags elisau html gbdfed);

#  Device-Gsm Device-Modem Device-SerialPort 
#  0.46 -> 0.4.6
my (@DOT2) =  qw(pixmap HTTP-Lite XML-Elemental yencode xworm gambatte_src Class-Std icecastq clex TiffIO
TakaoExFonts_ TakaoFonts_ XML-Catalog Linux-Inotify2);
# 1.1103  -> 1.11.03
# IO-CaptureOutput
# 	p5-sybperl 	2.16 	->	2.171	2.18
#    dot is inserted after 3rd digit
my (@DOT3) = qw (
    BSD-Resource
    CatalystX-CRUD-Model-RDBO
    Data-AMF
    DateTime-Calendar-Mayan
    ExtUtils-ModuleMaker
    File-Temp
    FreezeThaw
    IO-CaptureOutput
    Module-CPANTS-Analyse
    Net-DHCP
    Role-Basic
    SQL-Abstract-Limit
    SWF-File
    Template-Plugin-DateTime
    Time-Local
    XML-Clean
    gdal-lib
    sybperl
    util-linux
    xsane
    flow-tools
    Mojo-IOLoop-ForkCall
    Text-Diff-Parser
    Log-Any
    );

# 633 -> 6.33.0 InsertDot
# util-linux <- (libuuid)

# devel/p5-ExtUtils-CBuilder)  0.280220 --> 0.28.02.20
my (@DOT32) = qw (ExtUtils-CBuilder dpbox);

# audio/hydrogen 	hydrogen 	0.9.6.1 	->	0.9.61
my (@DOT1111) = qw (hydrogen);

#  0.004007 -> 0.004.007  devel/p5-Contextual-Return   
my (@DOT4) = qw (
    Class-Inner Contextual-Return Data-Section 
    Return-Value Software-License Test-MinimumVersion  
    PPIx-Utilities Return-Value Mixin-ExtraFields MooX-Cmd hydrogen
    Pod-Eventual
    Dancer-Plugin-Auth-RBAC
);

# 20131217 -> 2013.12.17
my (@DELDOT422) = qw (sqtop ast-ksh);

# 2.1.3 -> 2.13
my (@DELETEDOT) = qw (nkf libssh zidrav4unix);

# devel/p5-OOTools 	p5-OOTools 	2.30 	<-	2.3
my (@ADDZERO) = qw(XML-AutoWriter Nmap-Parser xmahjongg Hash-Case Module-Starter OOTools Convert-UUlib JSON-XS IO-Util Module-Build Catalyst-Plugin-Authentication Curses-UI-POE);

my (@ADDZERO2) = qw(Convert-BER Spreadsheet-ParseExcel Test-Reporter Sub-Uplevel Curses-UI-POE DateTime DateTime-Format-Builder DateTime-Format-Strptime 	CGI-FormBuilder DBIx-Abstract CPAN Devel-Symdump Test-Differences );
# 1.001000 -> 1.0010 Class-C3-Componentised);

my (@DELETE02) = qw(Class-C3-Componentised);

# 325 -> 3.2.5
my (@ThreeSingle) = qw(nulib john);

# 1.001002 -> 1.1.2
my (@DOT133) = qw (DBIx-Class-Cursor-Cached IO-Pipeline Smart-Comments Parse-RecDescent);

# gdal-lib-1111 -> 1.11.1
my (@DOT121) = qw (gdal FreeImage);

my (@DOT845) = qw (IO-Prompt);

# devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.44
my(@LeftJustify1_3) = qw(Devel-FindRef DateTime-Format-Mail Class-MakeMethods enum);

# time/p5-DateTime-Format-Mail   0.402 -> 0.4020
my(@LeftJustify1_4) = qw(DateTime-Format-Mail);

# 0.603 -> 0.6.3     VerSprintf($version, 0,1,  '', 2,1, '', 3,2 )
my (@NetINET6Glue) = qw (Net-INET6Glue);

# 1.000031 -> 1.0.31 VerSprintf($version, 0, 1, '', 2,3, '', 5,3 )
my (@TextMarkdown) = qw (Text-Markdown );

# 4.3.30 -> 4.3.030  VerSprintf($version, 0, 1, '', 2,3,'0', 5,3 )
my (@bash) = qw (bash);

# 003_009_003 -> 3.9.3
my (@uhd) = qw (uhd);

# 0.002005 -> 0.2.5   www/p5-Reaction 	p5-Reaction
my (@SPRINTF) = qw (Reaction);

# devel/p5-enum 1.016 -> 1.016, 1.10 -> 1.100
my (@V1000) = qw (enum);

# p5-HTTP-Request-Form (HTTP-Request-Form) (1513 ) Now:  0.9.5.2 ->   0.952 Todo:
my (@SingleDigit) = qw(HTTP-Request-Form);

# archivers/hpack 79 -> 0.79
my (@ZeroDot) = qw (hpack umefont_);

# hyperestraier Add 1.0.0
my (@hyperestraier) = qw (hyperestraier);

# converters/bib2xml 10162002 -> 20021016
my (@swap4) = qw (bib2xml);

# Term-ReadLine-Perl5
my (@DIGIT_IN_NAME) = qw(cal3d emacs-w3m x2x w3m nec2c xnec2c asn1c py34-unittest2py3k p5-GD-Graph3d popa3d tex-algorithm2e sqlalchemy-i18n hdf5-c++ );
#
my (@DISTBASE_DIGIT) = qw(perl5 hdf5 libosip2 xfwm4 Catalyst-View-Mason2);

##    -------------------------
##    P R O T O T Y P E S
##    -------------------------

sub Usage($$); 
sub CheckHeader($);
sub CheckDNS($);
sub ColorUrlDigit($);
sub CompareVersion($$);
sub CountPeriod($);
sub DistbaseCacheUpdate($$$);
sub DistbaseCacheQuery($$);
sub GetDistBase($$$$$);
sub GetMasterSiteCandidate($$$);
sub GetMasterSiteSub($$$$);
sub GetVariableValue($$$);
sub GetTODOinfo($$);
sub GetWipInfo($);
sub GreyDigitIf00($$);
sub Http301core($$);
sub ParseDirectory($$$);
sub PrintHeader($);
sub ReadMakefile($$);
sub ReadTodo($);
sub RecordMaxElapsed($);
sub Stats($$);

sub StripLeaf($);
##    -------------------------
##    S U B R O U T I N E S
##    -------------------------
sub Usage($$) {
    my($summary) = shift;
    my($output_directory) = shift;
    $summary =~ s,$output_directory/,,;
    my($home) = $ENV{'HOME'};
    $output_directory =~ s,$home/,~/,;
    
    print <<HELP;
Check the version is current
Synopsis:
   check-update	[-D] [-f] [-h] [-i] [-r] [-R] [-t] [-u] [-v] [-V] [-w] [-W]
		[ -c category] 
		[ -d directory-to-output ]
		[ -p pkgsrc-directory ]	 
		[ -P package-only ] 
		[ -s pattern-to-start]
		[ -S summary-output]
		[ -T limited-list-name ]
		[ -x debug_items ]
		[ -y [123]]
Where:
   -c : category (implies -f)
   -d : output directory (default $output_directory)
   -D : Skip ending digit package (default: don't skip) #'
   -f : (full) output Recent-version-unavailable too.
        (default: output that part to different file)
   -h : (help) show this message (putting after options may show default value)
   -i : inform to update info (maintainer, or id\@domain, not implemented yet)
   -P : check particular package
   -p : pkgsrc directory (default /usr/pkgsrc)
   -r : Include Reverse results in listing
   -R : Skip RubyGems check (in case you are sure you have)
   -s : skip until match 
   -S : summary output file (default $summary)
   -t : Measure time (not implemented yet)
   -T : Accepts Limited List filenamel  (not implemented yet)
   -u : cvs update before checking the category
   -v : verbose
   -V : show version
   -w : include wip (not implemented yet)
   -W : Check the version in wip (not implemented yet)
   -x : activate DEBUG_ITEMS (examples: -x dh, -x a, etc.) see below for letters
HELP
# use v5.16 is for this fc (see perldoc -f fc)
    foreach my $L (sort {fc($a) cmp fc($b)} keys %LongName) {
	printf "       %s %s\n", $L, $LongName{$L};
    }
    print <<HELP2;
   -y : Select one of split devel category out of 1, 2 or 3 where: 
        1:  for '[A-Za-o]*'
        2:  for 'p*'
	3:  for [q-z]*
HELP2
}; #'
#        a:  Enable all
#        d:  distbase
#        e:  eval Special pattern
#	E:  Edit Version (EditVersion)
#        f:  debug classify (found family)
#        h:  http header
#        c:  cache  (URL and distbase combination to version)
#        C:  curl command
#        l:  curl listing
#        n:  count (not implemented yet)
#        p:  SpecialPattern debug
#        s:  sourceforge
#        S:  stats number
#        r:  rubygems

sub CheckRubyGems($){
    my($skip_rubygems_check ) = shift;
    # Check if required packages are installed
    # httping curl git-base p5-Net-DNS *rubygems mozilla-rootcerts
    my($gems_name);
    my($gems_package);
    my($no_rubygems) = 1;

    # --------------  looking for old rubygems  or just gem ------------------
    open(PKG_INFO, "pkg_info|") || print STDERR sprintf("%4d ", __LINE__), "Failed for pkg_info\n";
    while(<PKG_INFO>) {
	if (/^(.*rubygems-.*[0-9.]+)/ )	{ $gems_package = $1;   $no_rubygems = 0; last;}
	if (/^ruby22-[a-z]*/ )		{ $gems_name = 'gem22'; $no_rubygems = 0; last;}  # hard code for ruby2.*
	if (/^ruby2[0-9]*-[a-z]*/ )	{ $gems_name = 'gem';   $no_rubygems = 0; last;}  # hard code for ruby2.*
    }
    close(PKG_INFO);
    if ($no_rubygems) { die sprintf("%4d <", __LINE__), (caller 0)[3], "> *** Please install misc/rubygems or lang/ruby2*\n";}
    print STDERR  sprintf("%4d <", __LINE__), (caller 0)[3], '> gems_package ', $gems_package,'gems_name: ', $gems_name, "\n"
	if $DEBUG_RUBYGEM;
    if ($gems_name eq '') {
    open(PKG_INFO, "pkg_info -qL $gems_package |");
    while(<PKG_INFO>) {
	if (m|.*/bin.*|) {
	    $gems_name = $_; }}
    close(PKG_INFO);
    }
    #  --------------------------------------------------------------------------
    if ($gems_name eq '') { die;} else {print "gems_name: ", $gems_name,"\n" if $DEBUG_RUBYGEM;}

    chomp($gems_name);

    if($skip_rubygems_check ) { return $gems_name ; }
    #  --------------------
    ##      rubygems
    #  --------------------
    open (GEMS, "$gems_name list -r -q libarchive|");
    my(@result) = <GEMS>;
    close(GEMS);
    if ( $#result < 5 ) {
	print STDERR  sprintf("%4d <", __LINE__), (caller 0)[3],
	"> *** rubygems won't pull remote info.\n",
	"  Network Problem ? or please install security/mozilla-rootcerts OR p5-Mozilla-CA.\n",
	"  Following command is supposed to return serveral lines. Try it on your shell\n",
	"     $gems_name list -r -q libarchive\n";
	exit;}

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> gems name is :', $gems_name,"\n" if $DEBUG_RUBYGEM;
    return $gems_name;
}
sub CheckEnvironment(){
    #  --------------------
    #    Other packages
    #  --------------------
    my($bad_news) = 0;
    foreach my $pkg (qw(curl git-base p5-Net-DNS )) {
	if ( open(PKG_INFO, "pkg_info -q -c $pkg|") == 0 ) { $bad_news++;}
	close(PKG_INFO);
    }
    if ($bad_news) { return -1; }
    else           { return  1; }
}

sub CheckHeader($) {
# returns (http) ($status, $location) 
    my($url) = shift;
    my($status) = 'none';
    my($location);
    $url =~ s|-https:|https:|;
    print STDERR sprintf("%4d ", __LINE__ ), ' <', (caller 0)[3], ':', (caller 0)[2], ': ', $url, ' -> ', $_, "\n" if $DEBUG_HTTP_HEADER ;
    if ($url eq '') {
	print STDERR sprintf("%4d ", __LINE__ ), ' <', (caller 0)[3], ">\t:", (caller 0)[2], ': ', $url, " \$url is empty\n";
	return -1;}
    
    open(CURL, "$curl_head $url 2>&1|") || print STDERR '*** ',sprintf("%4d ", __LINE__ ),' Problem on ', (caller 0)[3],"\n";
    while (<CURL>){
	chomp();
	if ( /Server denied you to change to the given directory/) {
	    $status = 550;
	    print STDERR sprintf("%4d ", __LINE__ ), ' ', $url, ' -> ', $_  if $DEBUG_HTTP_HEADER ;
	}
	elsif ( /Connection refused/ ) { $status = 'Refused';} 	# # curl: (7) Failed to connect to www.opensync.org port 80: Connection refused
	elsif ( /^HTTP\S+ (\d+) / ) {  # \S+ has '/1.1' or so
	    print STDERR sprintf("%4d ", __LINE__ ), ' ', $url, ' -> ', $_,"\n" if $DEBUG_HTTP_HEADER ;
	    $status = $1; if ($status == 200) {$location ='';}}
	elsif ( /^Location: (\*)/) {
	    $location = $1;
	}
    }
    close(CURL);
    print STDERR sprintf("%4d ", __LINE__ ), '  *** returning: ', $status, " ***\n"  if $DEBUG_HTTP_HEADER ;
    return ($status, $location);
}
sub CheckDNS($) {
    my ($hostname) = shift;
    $hostname =~ s,-https://,,;
    $hostname =~ s,http://,,;
    $hostname =~ s,https://,,;
    $hostname =~ s,ftp://,,;
    
    $hostname =~ s,([^/]+).*,$1,;
print STDERR sprintf("%4d ", __LINE__ ), ' hostname -> ', $hostname, "\n" if $DEBUG_HTTP_HEADER ;
    my $res   = Net::DNS::Resolver->new;
    my $query = $res->search($hostname);
#
#      if ($query) {
#          foreach my $rr ($query->answer) {
#              next unless $rr->type eq "A";
#              print $rr->address, "\n";
#          }
#      } else {
#          warn "query failed: ", $res->errorstring, "\n";
#      }
    if ( ! $query ) {
	print STDERR sprintf("%4d ", __LINE__ ), ' DNS query failed for ', 
	    ColorString('red', $hostname), "\n" if $DEBUG_DISTBASE ;
	$NoHost++; return 0;
    }
    return 1;
}
# http://basercms.net/packages/download/basercms/3.0.6.1
#
my(%FAMILY);	# assoc for pkgname to family pattern
sub ClassifyPackage(@) {
    # classify packages into Normal or Family
    # Family means like 
    #	x11/gtksourcereview[23]*
    #	databases/postgresql9[0123]-server
    #	py-ipython01[03]
    # Normal is others, even ending with digit(s)
    my (@packages) = @_;
    foreach my $p (@packages) {
	my ($with_digit)	= 0 ;
	my ($family)	= 0 ;
	# (1) exclude similar but false first
	if ( $p =~ /dri[23]proto/ ) { return;} # exclude special (non family) case

	# (2) gcc and lua special, two digit in the package name end
	if ($p =~ /(apache|netatalk|gcc|lua|php|python)([0-9])([0-9])$/) {
	    my ($lang)  = $1;
	    my ($major) = $2;
	    my ($minor) = $3;
	    if ($lang =~ /python/ ) { $lang = 'Python';}
    	    if ($lang =~ /apache/ ) { $lang = 'httpd';}
	    $FAMILY{$p} = '$version =~ s/.*'. $lang .'-('.$major.'\.'.$minor.'\.[0-9]+)\.t.*/$1/' ; 
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1a) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (3) contao, name is special
	} elsif ($p =~ /(contao)([0-9])([0-9])/) {
	    my ($lang)  = $1;
	    my ($major) = $2;
	    my ($minor) = $3;
	    $FAMILY{$p} = '$version =~ s/.*'. $lang .'-('.$major.'_'.$minor.'_[0-9]+)\.html.*/$1/' ; 
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1b) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (4) gnupg{,2}
	}  elsif ($p =~ /(gnupg)([0-9]*)/) {
	    my ($pkg)  = $1;
	    my ($major) = $2;
	    if ($major ne '') {
		$FAMILY{$p} = '$version =~ s/.*'.$pkg.'-('.$major.'\.[0-9.]+)\.tar.*/$1/'; }
	    else {
		$FAMILY{$p} = '$version =~ s/.*'.$pkg.'-(1\.[0-9.]+)\.tar.*/$1/';
	    }
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1c) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (5) libdmapsharing{,3}
	}  elsif ($p =~ /(libdmapsharing)([0-9]*)/) {
	    my ($pkg)  = $1;
	    my ($major) = $2;  # {} -> 2.[0-8].[0-9]   {3} -> 2.9.[0-9]+
	    if ($major eq '') {
		$FAMILY{$p} = '$version =~ s/.*LIBDMAPSHARING_(2_[0-8_]+).*/$1/i'; ;  }
	    else {
		$FAMILY{$p} = '$version =~ s/.*LIBDMAPSHARING_(2_9_[0-9]+).*/$1/i';  }
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1c) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (6) gtksourceview
	} elsif ($p =~ /(gtksourceview)([0-9]*)$/) {
	    my ($pkg)   = $1;
	    my ($major) = $2;
	    if ($major eq '') { $major = 1;}
	    $FAMILY{$p} = '$version =~ s/.*'. $pkg .'-('. $major .'\.[0-9.]+).*/$1/' ;
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1d) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (7) gnumeric
	} elsif ($p =~ /(gnumeric)([0-9])([0-9])([0-9])$/) {
	    my ($pkg)   = $1;
	    my ($major) = $2;
	    my ($minor) = $3;
	    my ($micro) = $4;
	    $FAMILY{$p} = '$version =~ s/.*'. $pkg .'-('. $major . '\.'. $minor. $micro. '\.[0-9]+).*/$1/' ;
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (G) family: ', $p, "\n" if $DEBUG_FAMILY;
	# (8) py26-html-docs
	#     python-2.6.9-docs-html.tar.bz2
	} elsif ($p =~ /py([0-9])([0-9])-html-docs$/) {
	    my ($major) = $1;
	    my ($minor) = $2;
	    $FAMILY{$p} = '$version =~ s/.*python-('.$major.'\.'.$minor.'\.[0-9]+)-docs-html.*/$1/' ;
	# (9) postgresql
	} elsif ($p =~ /(postgresql|mysql)([0-9])([0-9])-.*$/) {
	    my ($distbase) = $1;
	    my ($major) = $2;
	    my ($minor) = $3;
	    $FAMILY{$p} = '$version =~ s/.*$distbase-('.$major.'\.'.$minor.'\.[0-9]+).*/$1/' ;
        # (10) security/libassuan{,2}
	} elsif ($p =~ /(libassuan)([2])*$/) {
	    my ($distbase) = $1;
	    my ($major) = $2;
	    if ($major eq '') {  $major = 1 ;}
	    $FAMILY{$p} = '$version =~ s/.*libassuan-('.$major.'[.][0-9][.][0-9])[.].*/$1/';
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1d) family: ', $p, ' -> ',
	    $FAMILY{$p}, 
	    "\n" if $DEBUG_FAMILY;

	# (11) berkley-db
	} elsif ($p =~ /^(db)([0-9])$/) {
	    my ($lang)  = $1;
	    my ($major) = $2;
	    $FAMILY{$p} = '$version =~ s/.*'. $lang .'-('.$major.'\.[0-9.]+)\.tar\..*/$1/' ;
	    $FAMILY{$p} = '$version =~ s/.*'. $lang .'-('.$major.'[.][38]+[.][0-9]+)\.tar\..*/$1/' ;
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1a) family: ', $p,"\n" if $DEBUG_FAMILY;

	 # (12) rt{,3}
# 	}  elsif ($p =~ /(rt)([0-9]*)/) {
# 	    my ($pkg)  = $1;
# 	    my ($major) = $2;
# 	    $FAMILY{$p} = '$version =~ s/.*rt-('. $major.'\.[0-9.]+)\.tar\..*/$1/';
# 	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1c) family: ', $p, "\n" if $DEBUG_FAMILY;
# 	 # (13) libwnck{,3}
	}  elsif ($p =~ /(libwnck)([0-9]*)/) {
	    my ($pkg)  = $1;
	    my ($major) = $2; 
	    if ($major eq '') {
		$FAMILY{$p} = '$version =~ s/.*'.$pkg.'-(2\.[0-9.]+)\.tar\..*/$1/'; ;  }
	    else {
		$FAMILY{$p} = '$version =~ s/.*'.$pkg.'-('.$major.'.[0-9.]+)\.tar\..*/$1/'; ;  }
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1c) family: ', $p, "\n" if $DEBUG_FAMILY;
	# normal numbering
	} elsif ($p =~ /(.*)([0-9]+)$/) {
	    my ($pybody) = $1 ;
	    my ($suffix) = $2;
#	    my ($py) = $pybody;    $py =~ m|py|;
	    my ($body) = $pybody;  $body =~ s|py-||; $body =~ s|ruby-||;
#	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (- ) family: ', $p, "\n" if $DEBUG_FAMILY;	    
	    if ( $body && grep (/^(py-|ruby-)$body[0-9]*([0-9])$/, @packages ) > 1 ) {  
		$FAMILY{$p} = '$version =~ s/.*'.$body.'[-]*('.$suffix.'[0-9_.]+).*/$1/' ;
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1d) family: ', $p, ' -> ',
		    $FAMILY{$p}, "\n" if $DEBUG_FAMILY;
	    }
#	        print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (2) family: ', $p, "\n" if $DEBUG_FAMILY;
	}
	# Sandwitched number
	elsif ($p =~ /(.*)([0-9])(.*)/) { 
	    my ($one, $two, $three) = ($1, $2, $3);
	    if ($one && $two && grep (/^$one[0-9]+$three$/, @packages) > 1 ) {
		$FAMILY{$p} = '$version =~ s/.*'.$one.'[-]*('.$two.'[0-9_.]+)'.$three.'.*/$1/' ;
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (3) family: ', $p, "\n" if $DEBUG_FAMILY;;
	    }
	}
    }
}
#  ----------------------------------

sub ColorString($$){
    my (%COLOR) = ( qw (
	black	30
	red	31
	green	32
	yellow	33
	blue	34
	pink	35
	magenta	36
	white	37
		    ));
    my($color) = shift;
    my($string) = shift;
    return sprintf("%c[%dm%s%c[m", 0x1b, $COLOR{$color}, $string, 0x1b);
}

# 1. color tailing digit-including-leaf
# 2. place separate href to leaf and rest of URL
sub ColorUrlDigit($) {
    my($url) = shift;
    my($target);
    $url =~ s/^-http/http/;	# strip leftmost -
    # pick digit only leaf name from URL.
    $url =~ m|(.*)/(.*[v0-9.]+/$)|;
    my($higher) = $1;
    my($digit)  = $2;
    my ($class_string) = '';
    # some strange case, $url does not include http:// line, in such case, just returun the original
    if (! ($url =~ m|^http.*://| ||
	   $url =~ m|^ftp.*://|     )) {
	$target = $url; }
    #  ------------------------------
    # URL to hilight
    else {
	if    ( $url =~ /github.com/i )		{ $class_string = " class=\"github\""; }
	elsif ( $url =~ /sourceforge.net/i )	{ $class_string = " class=\"sf\"";     }

	if ($higher && $digit )  {
	    $target = sprintf ("<a href=\"%s/\"%s>%s/</a><a class=\"rev\" href=\"%s\">%s</a>",
		      $higher, $class_string, $higher,
		      $higher.'/'. $digit,  $digit);}
	else {
	    $target = sprintf ("<a href=\"%s\"%s>%s</a>", $url, $class_string, $url);
	}
    #  ------------------------------
    }
    return $target;
}
sub CompareVersion($$){
    # return 1 if big, 0, if equal, -1 if small.

    my ($a) = shift;
    my ($b) = shift;

    $a =~ s/pre/\./;
    $b =~ s/pre/\./;

    # get the number of digit split by '.'
    my (@a) = split '\.', $a;
    my (@b) = split '\.', $b;
# get bigger count  of '.', in $a or $b
    my ($max_count) = $#a + 1;
    if ($#b + 1 > $max_count) { $max_count = $#b + 1 ;}
# Following two lines are devel/py-mock special :-)
    if ($a eq '1.0.1' && $b eq '1.0b1') { return 1; }
    if ($a eq '1.0b1' && $b eq '1.0.1') { return -1; }
    #    for my $i ( 0 .. $max_count - 1 ) {
    if ($a[0] > $b[0]) { return  1;}
    if ($a[0] < $b[0]) { return -1;}
    if ($a[0] == $b[0]) {
#	if ( $max_count = 1 ) {return 0;}
	if ($a[1] > $b[1])    { return  1;}
	if ($a[1] < $b[1])    { return -1;}
	if ($a[1] ne $b[1])   { 
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[1]: ', $a[1], ' $b[1]: ', $b[1], "\n";
	    return $a[1] cmp $b[1];}  # arc-5.21[op]
	if ($a[1] == $b[1]) {
#	    if ( $max_count = 1 ) { return 0;}
	    if ($a[2] =~ /rc/ )   {$a[2] =~ s/rc.*//;}
	    if ($b[2] =~ /rc/ )   {$b[2] =~ s/rc.*//;}
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[2]: ', $a[2], ' $b[2]: ', $b[2], "\n";
	    if ($a[2] eq '' and $b[2] == 0 || $a[2] eq 0 and $b[2] eq '' ) { return 0;}
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[2]: ', $a[2], ' $b[2]: ', $b[2], "\n";
	    if ($a[2] > $b[2] )    { return  1;}
	    if ($a[2] < $b[2] )    { return -1;}
	    if ($a[2] ne $b[2])    { return $a[2] cmp $b[2];}
	    if ($a[2] == $b[2] )   {
#		print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[3]: ', $a[3], ' $b[3]: ', $b[3], "\n";
#		if ($a[3] eq '' && $b[3] eq '' ) { return 0;}
		if ($a[3] =~ /rc/ )   {$a[3] =~ s/rc.*//;}
		if ($b[3] =~ /rc/ )   {$b[3] =~ s/rc.*//;}
		if ($a[3] > $b[3] )    { return  1;}
		if ($a[3] < $b[3] )    { return -1;}
		if ($a[3] eq '' and $b[3] == 0 || $a[3] eq 0 and $b[3] eq '' ) { return 0;}
#		print STDERR sprintf("%4d ", __LINE__ ), ' >', $a, '< ?= >', $b, '< $a[3]: ', $a[3], ' $b[3]: ', $b[3], "\n";
		if ($a[3] == $b[3] )   { return  $a cmp $b ;}
        }
	}
    }
}

# Now for maintainer only, not used for now
sub CountPeriod($){
    my ($string) = shift;
    my (@count) = split '\.', $string;
    return $#count;
}
# -------------------------
# Unbelievable enough, libassuan and libassuan2 shares the same distbase, (and expecting
# different result.
sub DistbaseCacheUpdate($$$) {
    my($distbase) = shift;
    my($master_site)  = shift;
    my($version)  = shift;
   # push(@DISTBASE_CACHE, \[$distbase, $version, $timestamp, $refcount]);
    my ($refcount);
    my ($timestamp) = time();
    my ($ptr);
    if ($ptr =  $DISTBASE_CACHE{$distbase.$master_site}) {
	$DISTBASE_CACHE{$distbase.$master_site} = [$version, $timestamp, $ptr->[2] ] ; 
	print STDERR  sprintf("%4d ", __LINE__ ). ' (U) '. $version. ' '. $timestamp.  $ptr->[2]. " " if $DEBUG_CACHE;
    }
    else      {	
	$DISTBASE_CACHE{$distbase.$master_site} = [$version, $timestamp, 1         ] ;
	print STDERR  sprintf("%4d ", __LINE__ ). ' (N) '. $version. ' '. $timestamp.  '1'.         " " if $DEBUG_CACHE;
    }
}
sub DistbaseCacheQuery($$) {
    my($distbase) = shift;
    if ($distbase eq 'libassuan') { return -1;}
    my($master_site) = shift;
    my ($ptr); 
    if ($ptr = $DISTBASE_CACHE{$distbase.$master_site}) {
	$ptr -> [1] = time();
	$ptr -> [2]++;
	my ($version) = $ptr -> [0];
	printf( STDERR "%4d (Q) %10s %5s", sprintf("%4d ", __LINE__ ), $distbase, $version )  if $DEBUG_CACHE;
	return $version ; } # $version
        printf( STDERR "%4d (Q) %10s %5s", sprintf("%4d ", __LINE__ ), $distbase,  -1 )  if $DEBUG_CACHE;    
    return -1;
}
sub EditVersion($$) {
    my ($distbase) = shift;
    my ($version) = shift;
    if ( ! ($version =~ /[0-9]/    ) ) { return -1;}
#   if ( ! ($version =~ /$distbase.*[0-9]/) ) { return -1;} 

print STDERR "\n", sprintf("%4d ", __LINE__ ), ' (2) ', $distbase, ' --> ', $version,"\n" if $DEBUG_EDITVersion;
	if (grep (/^$distbase$/, @THREE)	> 0 ) { $version = Three($version, 3);}
	if (grep (/^$distbase$/, @ZIP)		> 0 )	{ $version = Zip($version, 3);}
	if (grep (/^$distbase$/, @VER32)	> 0 ) { $version = Three($version, 2);}
	if (grep (/^$distbase$/, @VER22)	> 0 ) { $version = Two($version);}
print STDERR sprintf("%4d ", __LINE__ ), ' (3) <', (caller 0)[3] ,'> ', $version, ' --> '  if $DEBUG_EDITVersion;
	if (grep (/^$distbase$/, @DOT2)		> 0 ) { $version = InsertDot($version, 2);}
	if (grep (/^$distbase$/, @DOT3)		> 0 ) { $version = InsertDot($version, 3);}
	if (grep (/^$distbase$/, @DOT32)	> 0 ) { $version = InsertDot2($version, 2,4);}
	if (grep (/^$distbase$/, @DOT133)	> 0 ) { $version = InsertDot133($version);}
	if (grep (/^$distbase$/, @DOT4)		> 0 ) { $version = InsertDot($version, 4);}
	if (grep (/^$distbase$/, @DOT121)	> 0 ) { $version = InsertDot121($version);}
	if (grep (/^$distbase$/, @DOT845)	> 0 ) { $version = InsertDot845($version);}
	if (grep (/^$distbase$/, @DELETEDOT)	> 0 ) { $version = DeleteDot($version, 2);}
	if (grep (/^$distbase$/, @ADDZERO)	> 0 ) { $version = AddZero($version, 1);}
	if (grep (/^$distbase$/, @ADDZERO2)	> 0 ) { $version = AddZero($version, 2);}
	if (grep (/^$distbase$/, @DELDOT422)	> 0 ) { $version = DelDot422($version, 5, 8);}
            # www/p5-Reaction 	p5-Reaction 	0.2.5 	->	0.002005
	if (grep (/^$distbase$/, @SPRINTF)	> 0 )	{ $version = VerSprintf($version, 0,1, '', 2,3, '', 5,3 );}
	    # p5-Net-INET6Glue 0.603 -> 0.6.2
	if (grep (/^$distbase$/, @NetINET6Glue)	> 0 ) { $version = VerSprintf($version, 0,1, '', 2,1, '', 3,2 );}
            # Text-Markdown 1.000031 -> 1.0.31
	if (grep (/^$distbase$/, @TextMarkdown)	> 0 ) { $version = VerSprintf($version, 0,1, '', 2,3, '', 5,3 );}
        # 003_009_002 -> 3.9.2
	if (grep (/^$distbase$/, @uhd)		> 0 ) { $version = VerSprintf($version, 0,3, '', 4,3, '', 8,3);}
	if (grep (/^$distbase$/, @bash)		> 0 ) { $version = VerSprintf($version, 0,1, '', 2,2, '0', 4,2 );}
	    # devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.44
	if (grep (/^$distbase$/, @LeftJustify1_3)> 0 ) { $version = LeftJustify($version,1,3);} # count(1.3)
            # time/p5-DateTime-Format-Mail 0.401 -> 0.4010
	if (grep (/^$distbase$/, @LeftJustify1_4)> 0 ) { $version = LeftJustify($version,1,4);} # count(1.4)
	if (grep (/^$distbase$/, @SingleDigit)	> 0 ) { $version = SingleDigit($version);}
	if (grep (/^$distbase$/, @DELETE02)	> 0 ) { $version = Delete02($version);}
	if (grep (/^$distbase$/, @ZeroDot)	> 0 ) { $version = '0.'. $version;}
	if (grep (/^$distbase$/, @hyperestraier)> 0 ) { $version = '1.0.0.'. $version;}
	if (grep (/^$distbase$/, @ThreeSingle)	> 0 ) { $version = ThreeSingle($version);}
#	if (grep (/^$distbase$/, @Arabian)	> 0 ) { $version = TransArabian($version);}
	if (grep (/^$distbase$/, @Arabian)	> 0 ) { $version =~ s/ii/.2/;}
	if (grep (/^$distbase$/, @swap4)	> 0 ) { $version =~ s/([0-9][0-9][0-9][0-9])([0-9][0-9][0-9][0-9])/$2$1/;}
	if (grep (/^$distbase$/, 'eredis')	> 0 ) { $version =~ s/1\.0\.8/1.0.8.20150910/;}
    print STDERR sprintf("%4d ", __LINE__ ), ' (4) ', $version, "\n" if $DEBUG_EDITVersion;
#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_, "\n", $distbase, ' --> ', $version,"\n";
    return $version;
}

#  ----------------------------------------------------------------------
# This routine to find the Base name of distribution file.
# It will be used to separate the version portion from distribution file.
#  ----------------------------------------------------------------------
    #  --------------------------------------
    #      0-1. if (-) is onlye one in PKGNAME, remove - and after
    #      if resultant string in DISTNAME, take it as DISTBASE
    #  --------------------------------------
sub GetDistBaseAdjust($$$) {
#1061 <main::GetDistBaseSwap> (pkgname) aspell-ast-0.01
#                             (pkgbase) aspell-ast
#                             (distname) aspell6-ast-0.01
#                              distbase  aspell6-ast
    my ($pkgname)	=  shift;
    my ($pkgbase)	=  shift;
    my ($distname)	=  shift;
    my ($pkgversion)	=  $pkgname;
        $pkgversion	=~ s/$pkgbase-//;
    my ($distbase)	=  $distname;
        $distbase	=~ s/$pkgversion//;

    # to avoid picking    aspell6-ca-20040130-1.tar.bz2
    # but should match to aspell6-ca-2.1.5-1.tar.bz2     (need [0-9]. )
    ### $SpecialPatternY = '$line =~ /.*$value-([0-9]\.[0-9.-]+)\..*/$1/';
    # above line is too late to set ;-(, not set in line 2073, Main (3022) -> GetDistBase (1161) ->  here
	return $distbase;
}

sub GetDistBaseSimple($$){
    my ($pkgname)	= shift;
    my ($distname)	= shift;

    my (@partial) = split('-', $pkgname);
    if ($#partial != 1 ) { return '';}
    $pkgname =~ s|-$partial[1]||;
    if ($distname =~ /$pkgname/ ) {
	print STDERR sprintf("%4d ", __LINE__ ), '(distname) ', $distname,
' (pkgname) ', $pkgname, "\n" if $DEBUG_DISTBASE;
	return $pkgname;}
}
# Some special case: (letter v )
# 862   (PKGNAME)        p5-Algorithm-CheckDigits-1.3.0
#       (PKGBASE)        p5-Algorithm-CheckDigits
#       (DISTNAME)       Algorithm-CheckDigits-v1.3.0
#       (PKGVERSION)     1.3.0

sub GetDistBasePerlModule($$$){
   my ($pkgbase)	= shift;
   my ($pkgname)	= shift;
   my ($distname)	= shift;

   my ($distbase) = $distname;
       $distbase =~ s|-v*[0-9.]+||;
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;   
   if ( $pkgname =~ m|p5-(.*)-v*([0-9.]+)| && $distbase eq "$1" ) {
       print STDERR sprintf("%4d ", __LINE__), '<', (caller 0)[3], '> pkgname :', $pkgname,
	   ' distname ', $distname, "\n" if $DEBUG_DISTBASE;
       return $distbase;}
   else { return '';}
 }
sub GetDistBasePythonModule($$$){
   my ($pkgbase)	= shift;
   my ($pkgname)	= shift;
   my ($distname)	= shift;

   my ($distbase) = $distname;
       $distbase =~ s|-[0-9.]+||;
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;   
   if ( $pkgname =~ m|py[23][347]-(.*)-([0-9.]+)| && $distbase eq "$1" ) {
       print STDERR sprintf("%4d ", __LINE__), '<', (caller 0)[3], '> pkgname :', $pkgname,
	   ' distname ', $distname, "\n" if $DEBUG_DISTBASE;
       return $distbase;}
   else { return '';}
 }
# distname ast-ksh-2012-08-01
# pkgname  
sub GetDistBaseReduce($$$$){
    my ($pkgbase)	= shift;	# (static-)ast-ksh
    my ($pkgname)	= shift;	# (static-)ast-ksh-201208012
    my ($pkgversion)	= shift;	# 201210801
    my ($distname)	= shift;	# ast-ksh-2012-08-01

    my ($value)		= '';
    my ($distversion)	= $distname;	# ast-ksh-2012-08-01

    $distversion	=~ s/$pkgbase-//;	# 2012-08-01
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> distversion: ', $distversion, "\n" if $DEBUG_DISTBASE;    
    $distversion	=~ s/-//g;		# 20120801
    if ($distversion == $pkgversion) { 
	$value = $pkgbase ;
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> value: ', $value, "\n" if $DEBUG_DISTBASE;
    } else {
	my ($datestring) = $distname;	# ast-ksh-2012-08-01
	my ($candidate)  = $distname;	# ast-ksh-2012-08-01
	$datestring =~ s|.*(\d{4})-(\d{2})-(\d{2})|$1$2$3|;	# 20120801
	$candidate =~  s|-\d{4}-\d{2}-\d{2}||;			# 2012-08-01
	if ($datestring eq $pkgversion) { $value = $candidate; }
    }
    return $value;
}
# GetDistBase ->
sub GetDistBaseSwap($$$){
    #  --------------------------------------
    #      0-1.
    #   (PKGNAME)        bsdtar-3.1.2
    #   (PKGBASE)        bsdtar
    #   (DISTNAME)       libarchive-3.1.2
    #   (PKGVERSION)     3.1.2
    #  --------------------------------------
    my($pkgname, $pkgbase, $distname) = @_ ;
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],
	'> (pkgname) ', $pkgname,"\n",
	 '                             (pkgbase) ', $pkgbase,"\n",
	 '                             (distname) ', $distname, "\n" if $DEBUG_DISTBASE;
    my($numbers)=  $pkgname ;
       $numbers	=~ s/$pkgbase-// ;
    my($body)	=  $distname ;
    my($value) = '';
    $body	=~ s/-$numbers// ;
    if ( $body =~ m|^[a-zA-Z_-]+$|)	{ $value = $body;}
    $value =~ s|-src||; # editros/TeXmacs-1.99.2-src
    print STDERR ('                          > distbase : ', $value, "\n",
		  '                           > version : ', $numbers,"\n")
	if $DEBUG_DISTBASE;
    return $value;
}

sub GetDistBasePwlib($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#
    
    my ($value)		= $distname;	# pwlib-v1_8_3-src
    $value		=~ s/-v[0-9_]+-src//;# pwlib(-v1_8_3-src)
print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> distbase: ', $value, "\n" if $DEBUG_DISTBASE;
    $SpecialPatternY = '$line =~ /.*$value-v([0-9_]+)-src.*/$1/';  
    return $value;
}
sub GetDistBaseNoHyphen($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#
    
    my ($value)		= $distname;	# delegate9.9.1
    $value =~ s|\+|\.|;

    if ( ! ($value =~ /-/) ) {
	print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> distbase: ', $value, "\n" if $DEBUG_DISTBASE;
	$value =~ s/[0-9.]+//;
    }  else { $value = '';}
    return $value;
}
sub GetDistBaseOneHyphen($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#
    
    my ($value)		= $distname;	# delegate9.9.1
    my (@parts)		= split '-', $distname;
	print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> distbase: ', $value, '@parts -> ', join(':', @parts), " <-\n" if $DEBUG_DISTBASE;    
    if ($#parts == 1 && $parts[1] =~ /^[0-9]/ ) {	# meaning only one hyphen and rest starts digit
	print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> distbase: ', $value, "\n" if $DEBUG_DISTBASE;
	$value =~ s/-[0-9.]+.*//;
    }  else { $value = '';}
    return $value;
}
# 832   (PKGNAME)        mercury-14.01.1
#       (PKGBASE)        mercury
#       (DISTNAME)       mercury-srcdist-14.01.1
#       (PKGVERSION)     14.01.1
sub GetDistBaseMercury($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#

    my ($distbody)	=  $distname;
    $distbody =~ s/_/-/; # basic256_0.9.6.71  --> basic256-0.9.6.71 
    
print STDERR sprintf("%4d ", __LINE__ ), '(distbody) ',  $distbody,"\n" if $DEBUG_DISTBASE;
	$distbody	=~ s/-$pkgversion//;
print STDERR sprintf("%4d ", __LINE__ ), '(distbody) ',  $distbody,"\n" if $DEBUG_DISTBASE;
    if ( ! ($distbody =~ /[0-9.]+/) ) {
print STDERR sprintf("%4d ", __LINE__ ),
    ' (distname) ', $distname, ' (distbody) ', $distbody, "\n" if $DEBUG_DISTBASE;
	return $distbody;
    } else { return '';}
}

#    if ($thisreturn) { return $thisreturn; }
# main -> 
sub GetDistBase($$$$$) {	# <- Main       DISTBASEDISTBASE
    my ($dir) = shift;		# category
    my ($PackageName) = shift;	# leaf
    my ($PKGBASE)	= shift;
    my ($PKGVERSION)	= shift;
    my ($PKGNAME)	= shift;
    
    my ($DISTBASE)	= GetVariableValue($dir, $PackageName, 'DISTNAME');
    
print STDERR sprintf("%4d ", __LINE__ ),
         "  (PKGNAME)\t", $PKGNAME,        "\n",
    "       (PKGBASE)\t", $PKGBASE,      "\n",
    "       (DISTNAME)\t", $DISTBASE,      "\n",
    "       (PKGVERSION)\t", $PKGVERSION , "\n" if $DEBUG_DISTBASE;
#  %DISTBASE special
    if  (my $distbase = $DISTBASE{$PKGBASE}) {
	return $distbase;}

    if  ($PKGBASE =~ m|aspell|) {
	my ($distbase) =
	GetDistBaseAdjust($PKGNAME, $PKGBASE, $DISTBASE);

	if ($distbase) {return $distbase;}
    }

    #  --------------------------------------
    #      0. If  very simple patterns
    #  --------------------------------------
    # kde4-i10n-.. special 
    if ($PKGBASE =~ /kde4-(l10n-..)/) {
	return "kde-$1"}

print STDERR sprintf("%4d ", __LINE__ ),
     'BASE: ', $PKGBASE .'-'. $PKGVERSION, ' DISTNAME: ', $DISTBASE, "\n" if $DEBUG_DISTBASE;

    if ($PKGBASE .'-'. $PKGVERSION eq $DISTBASE ) {
print STDERR sprintf("%4d ", __LINE__ ),
         "  (PKGNAME)\t", $PKGNAME,        "\n",
    "       (PKGBASE)\t", $PKGBASE,      "\n",
    "       (DISTNAME)\t", $DISTBASE,      "\n",
    "       (PKGVERSION)\t", $PKGVERSION , "\n" if $DEBUG_DISTBASE;
	return $PKGBASE }

    # Get several value to do very simple logic for the very first 'if' line below.
    my($PKGBODY) = $DISTBASE;	# For Substracting $PKGVERSION from $PKGNAME
    				# This variable appears only these several lines, to pickup $VERSION_CANDIDATE

    my($VERSION_CANDIDATE) = $DISTBASE;
    $VERSION_CANDIDATE =~ s/$PKGBASE-//;
    $VERSION_CANDIDATE =  MonthToDigit($VERSION_CANDIDATE);
print STDERR sprintf("%4d ", __LINE__ ), '(PKGBODY) ', $PKGBODY,' (CAND) ', $VERSION_CANDIDATE,"\n" if $DEBUG_DISTBASE;
    my($testA) = $PKGBASE;
    my($testB) = $DISTBASE;
print STDERR sprintf("%4d ", __LINE__ ), 
    '(testA) ', $testA,
    ' (VERSION_CANDIDATE) ', $VERSION_CANDIDATE,
    ' (PKGNAME) ', $PKGNAME,
    ' (PKGBASE) ', $PKGBASE,   "\n" if $DEBUG_DISTBASE;    
    if ($testA.'-'.$VERSION_CANDIDATE eq $PKGNAME ) {
	print STDERR sprintf("%4d ", __LINE__ ), '(DISTBASE) ', $PKGBASE,"\n" if $DEBUG_DISTBASE;
	return $PKGBASE;}

    my ($thisreturn) =  GetDistBasePythonModule($PKGBASE, $PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

    #  --------------------------------------
    #      0-1.
    #   (PKGNAME)        bsdtar-3.1.2
    #   (PKGBASE)        bsdtar
    #   (DISTNAME)       libarchive-3.1.2
    #   (PKGVERSION)     3.1.2
    #  --------------------------------------
        $thisreturn =	GetDistBaseSwap($PKGNAME, $PKGBASE, $DISTBASE);
    if ($thisreturn) { return $thisreturn }

    print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ',
	'(PKGNAME) ', $PKGNAME, ' (PKGBASE) ', $PKGBASE, ' (DISTNAME) ', $DISTBASE
,"\n" if $DEBUG_DISTBASE;

     $thisreturn = GetDistBaseMercury($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
     if ($thisreturn) { return $thisreturn; }

             $thisreturn = GetDistBaseNoHyphen($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> return(', $thisreturn, ")\n" if $DEBUG_DISTBASE;
     if ($thisreturn) { return $thisreturn; }

             $thisreturn = GetDistBaseOneHyphen($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> return(', $thisreturn, ")\n" if $DEBUG_DISTBASE;
     if ($thisreturn) { return $thisreturn; }

    $thisreturn =  GetDistBasePerlModule($PKGBASE, $PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

         $thisreturn = GetDistBasePwlib($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
##
##     if ($thisreturn) { return $thisreturn; }
## print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
##
##          $thisreturn = GetDistBaseAdjust($PKGBASE, $PKGNAME, $DISTBASE);
## print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
##
     if ($thisreturn) { return $thisreturn; }

    #  --------------------------------------
    #      0-2. if (-) is onlye one in PKGNAME, remove - and after
    #      if resultant string in DISTNAME, take it as DISTBASE
    #  --------------------------------------
    $thisreturn = GetDistBaseSimple($PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

    # (distname) ast-ksh-2012-08-01 -> (pkgname) ast-ksh-20120801
    $thisreturn = GetDistBaseReduce($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

#
#print STDERR sprintf("%4d ", __LINE__ ),"\n" if $DEBUG_DISTBASE;
# taking care worpress-4.1-ja.tar.gz type (version is embedded).
    my($DISTBODY) = $DISTBASE;

print STDERR sprintf("%4d ", __LINE__ ), '(PKGNAME) ', $PKGNAME, ' (PKGBASE) ', $PKGBASE, ' (DISTBASE) ', $DISTBASE
,"\n" if $DEBUG_DISTBASE;

    #  --------------------------------------
    #      1. First, very simple patterns
    #  --------------------------------------
    if ( $VERSION_CANDIDATE =~ /^[0-9.pl-]+$/ ) {
	$DISTBASE =~ s/$VERSION_CANDIDATE//;
    #  --------------------------------------
    #      2. then can be managed with simple rule
    #  --------------------------------------
    } elsif ($PKGNAME eq	 $DISTBASE  ||
	     $PKGNAME eq 'py27-'.$DISTBASE  ||
	     $PKGNAME eq   'p5-'.$DISTBASE  ||
	     $PKGNAME eq   'php54-'.$DISTBASE  ||
	     0 ) {
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
	$DISTBASE =~ s/-$PKGVERSION//; 
	#  ----------------------------------
	#      3. Complicated others
	#  ----------------------------------
    } else {

#    print STDERR sprintf("%4d ", __LINE__ ), ' ', $DISTBASE, "\n";
    # if - is included, strip - and after S T R I P
    # if _ is included, strip _ and after S T R I P
    $DISTBASE   =~ s/(tcp_wrappers.*)-ipv6/$1/;		# (security) tcp_wrappers_7.6-ipv6.4
    $DISTBASE   =~ s/([0-9]+)r([0-9]+)/$1.$2/;		# math/xgap xgap4r16
#   $DISTBASE   =~ s/-rc[0-9]//;	# mail/mutt-kz-1.5.22-rc1
    					# but version.rc1 < version.. to be fixed XXXXX
    $DISTBASE   =~ s/\.orig//;		# editors/beav_1.40.orig
    $DISTBASE   =~ s/\.src//;		# editors/ted ted-2.21.src
    $DISTBASE   =~ s/-src//;		# editors/ted ted-2.21.src
    $DISTBASE   =~ s/-release//;	# audio/festival-2.1-release
    $DISTBASE   =~ s/-source//;		# print/mupdf mupdf-1.6-source
    $DISTBASE   =~ s/-beta//;		# time
    $DISTBASE   =~ s/\.alpha//;		# time/asclock-gtk wm/weewm
#   $DISTBASE   =~ s/_src//;		#  gambatte_src --> -r571.tar
    $DISTBASE   =~ s/_src_all//;	#  p7zip_9.20.1_src_all
#   $DISTBASE   =~ s/([0-9])_alpha/$1/;	#  wm/novawn NovaWM-0.8_alpha
    $DISTBASE   =~ s/([0-9])_alpha//;	#  wm/novawn NovaWM-0.8_alpha     
#    $DISTBASE   =~ s/([0-9])pre[0-9]/$1/;	#  wm/icewm-1.2.38pre
    $DISTBASE   =~ s/([0-9])p([0-9]+)$/$1\.$2/;	# zorro-1.1p8 -> zorro-1.1.8,  replace  'p' into '.'
#    $DISTBASE   =~ s/p([0-9]+)$/\.\1/;	# zorro-1.1p8 -> zorro-1.1.8    
    $DISTBASE   =~ s/-[0-9.]+a[0-9]+//;	# (net) arpwatch-2.1a15
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; (DISTBASE) ', $DISTBASE,"\n" if $DEBUG_DISTBASE;
	#  ----------------------------------
	#  3 - 2
	#  ----------------------------------
    if ( $DISTBASE=~ /otp_src_R.*/ ) {   # erlang -> otp_src_R16B02 etc -> 16.02 
	$DISTBASE = "otp_src_";
	} # ignore old style
	#  ----------------------------------
	#  3 - 3    distbase has digit
	#  ----------------------------------
    elsif (	$DISTBASE =~ /perl5/	||
		$DISTBASE =~ /hdf5/	||
		$DISTBASE =~ /libosip2/	||
		$DISTBASE =~ /xfwm4/	||
		$DISTBASE =~ /mpg123/	||
		$DISTBASE =~ /ysmv7/	||
		$DISTBASE =~ /cal3d/	||
		0 ) {
	#    elsif ( grep /^$DISTBASE$/, @DISTBASE_DIGIT  == 0) {
    $DISTBASE   =~ s/(.*perl5).*/$1/;	# strip after perl5, p5-postgresql -> pgsql_perl(5)-1.9.0 S T R I P
    $DISTBASE   =~ s/(.*hdf5).*/$1/;
    $DISTBASE   =~ s/(.*libosip2).*/$1/;
    $DISTBASE   =~ s/(.*xfwm4).*/$1/;
    $DISTBASE   =~ s/(.*mpg123).*/$1/;
    $DISTBASE   =~ s/(.*ysmv7).*/$1/;
    $DISTBASE   =~ s/(.*cal3d).*/$1/;    
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; (DISTBASE) ', $DISTBASE,"\n" if $DEBUG_DISTBASE;	
    }
	#  ----------------------------------
	#  3 - 4  The name ends with digit, but don't skip
	#  ----------------------------------
    elsif ( grep (/$PackageName/, @DontSkipEndingDigit) > 0 ) {
	$DISTBASE = $PackageName;
    }
    elsif ($PackageName =~ m|([A-Za-z]+[A-Za-z0-9_-]+[A-Za-z]+-)|) {
	$DISTBASE = $1;
	#  ----------------------------------
	#  3 - 5  Failed so far, 
	#  ----------------------------------
    }
    elsif (! ($VERSION_CANDIDATE =~ /^[0-9.pl]+$/ ) ) {
	$DISTBODY =~ s/-$PKGVERSION//;
	$VERSION_CANDIDATE = $DISTBODY;
	$VERSION_CANDIDATE =~ s/$PKGBODY//;
print STDERR sprintf("%4d ", __LINE__ ),
    '(DISTBODY) ', $DISTBODY,
    ' (CAND) ', $VERSION_CANDIDATE,
    ' (PKGVERSION) ', $PKGVERSION,
    "\n" if $DEBUG_DISTBASE;
	#  --------------------
	# rescue for the case $PKGVERSION is embedded in $DISTNAME, like "wordpress-\([0-9.]\)*-ja"
	#  --------------------
	my($SpecialPatternx) = $DISTBASE;
#	my($SpecialPatternx) = 's/$DISTBASE/$1/;';
	$SpecialPatternx =~ s|$PKGVERSION|([0-9.]+)|;
	$SpecialPatternx =~ s|^|\$line =~ s/.*|;
	$SpecialPatternx =~ s|$|.*/\$1/;|;
	$SpecialPattern{$DISTBODY} = $SpecialPatternx;
	$DISTBASE = $DISTBODY;
#	return $DISTBODY;	# return without editting below
#     'ja-wordpress',	'$line =~ s/wordpress-\([0-9.]\)*-ja/$1/;',
	print STDERR sprintf("%4d ", __LINE__ ), 
	    '(SpecialPattern) ', $DISTBASE,' -> ', $SpecialPatternx, ' (hash) ', $SpecialPattern{$DISTBASE},"\n" if $DEBUG_EVAL_PATTERN;
print STDERR sprintf("%4d ", __LINE__ ), '(DISTBODY) ', $DISTBODY,' (CAND) ', $VERSION_CANDIDATE,"\n" if $DEBUG_DISTBASE;
    }
	#  ----------------------------------
	#  3 - 6  Strip $PKGVERSION from $DISTNAME with simple rule S T R I P
	#  ----------------------------------
     else {
    $DISTBASE   =~ s/[-_]*[0-9._-]+$//;	
    }	
					# R-evaluate -> evaluate_0.5.5
    					# adding b in above is harmfull, pslib -> psli
    					# (be carefull) arc-5.21o  -> arco 
    					# gated-3-5-11 -> (g)
					# R-evaluate -> evaluate_0.5.5

    if (grep (/$DISTBASE/, @DIGIT_IN_NAME) == 0 )
				  {	# xnec2c and nec2c
    $DISTBASE   =~ s/[-_]*[0-9._-]+[a-z]$//;	# (mbone) vatsrc-4.0b2, this was harmfull nec2c -> nec
    }
    $DISTBASE   =~ s/-[0-9.]+ucl$/$1/;	# (mbone) wbd-1.0ucl
   # AnyEvent-BDB-1.1 -> (?)
    }
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ',
$dir, '/', $PackageName, '; DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
    return $DISTBASE;
}
sub GetGemFamilyVersion($$){		# <- Main
    my ($dist_name) = shift;
    my ($gems_name) = shift;
    print STDERR sprintf("%4d <",__LINE__ ), (caller 0)[3],
	'> distname: ', $dist_name,
	"\n"  if $DEBUG_RUBYGEM;
    my ($major, $minor);
    if (
	( $dist_name =~ m|^ruby-([A-Za-z_-]+)([0-9])([0-9])|)  ||
	( $dist_name =~ m|^ruby-([A-Za-z_-]+)([0-9])|       )  ||
	( $dist_name =~ m|^ruby-([A-Za-z_-]+)|              ) ) {
    $dist_name = $1;
    $major     = $2;
    $minor     = $3;}

    print STDERR sprintf("%4d <",__LINE__ ), 'distname: ', $dist_name, ' major: ', $major, ' minor: ', $minor, 
	"\n"  if $DEBUG_RUBYGEM;
        $minor      =~  s|^[0-9]([0-9]).*|$1|;
    if ($minor) { $minor = '.'.$minor;}
    my ($available);
    my (@candidate);
    my ($list);
    print STDERR sprintf("%4d <",__LINE__ ), (caller 0)[3],
	'> distname: ', $dist_name,
	' major: ', $major,
	' minor: ', $minor, 
	"\n"  if $DEBUG_RUBYGEM;
    
    my ($gems_command) =  "$gems_name list -r -a -q '^". $dist_name. "\$\'" ;
    print STDERR sprintf("%4d <",__LINE__ ), (caller 0)[3], '> gems_command: ', $gems_command, "\n" if $DEBUG_RUBYGEM;
    open(GEM, "$gems_command|") || print STDERR ColorString('red', sprintf("%04d", __LINE__). " Failed to $gems_command : $!\n");
    print STDERR sprintf("%4d ",__LINE__ ), "$gems_command\n" if $DEBUG_RUBYGEM;
    while(<GEM>) {
	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_  if $DEBUG_RUBYGEM;
	if ( /$dist_name \((.*)\)/ ) { 
	    $list = $1 ;}
    }
    close(GEM);
    print STDERR sprintf("%4d ", __LINE__ ), 'distname: ', $dist_name, ' -> ', $list, "\n" if $DEBUG_RUBYGEM;
#   my(@candidate) = map { $_ =~ s/ //g; ;}	split(',', $list);
       @candidate  = 				split(',', $list);
#    my(@candidate) = map { $_ =~ s/ //;}	split(',', $list);;
    my($v);
    foreach my $c (@candidate) {
	if ( $c =~ m|[a-zA-Z]+|) { next;}
	$c =~ s/ //;
#	print STDERR sprintf("%4d ", __LINE__ ), 'm: ', $major, ' a :', $available, ' c: ', $c, "\n"if $DEBUG_RUBYGEM;
	if (  ( $c =~  /^$major\.$minor/            ) &&
	      (CompareVersion($c, $available) > 0 ) ) { $available = $c;}
    }

    print STDERR sprintf("%4d ", __LINE__ ), 'major(', $major,') minor(', $minor, ') GetGemVersion: ', $dist_name, ' -> ', $available, "\n" if $DEBUG_RUBYGEM;

    if ( $available )	{ return $available;}
    else  		{ return '(0.0)';}
}

sub GetGemVersion($$){		# <- Main
    my ($dist_name) = shift;
    my ($gems_name) = shift;
    my ($available);
    my (@candidate);

# modena@makoto 08:33:19/150114(..misc/screen)%  gem200.new list -r -q libarchive
# 
# *** REMOTE GEMS ***
# 
# libarchive (0.1.2 ruby mswin32)
# libarchive-ruby (0.0.3)
# libarchive-ruby-fs (0.2.1)
# libarchive-ruby-gvalmon (0.0.1)
# libarchive-ruby-swig (0.6.3)
# libarchive-static (1.0.5 ruby i386-mingw32 i386-mswin32)
# libarchive-static-ruby186 (1.0.3 i386-mingw32 i386-mswin32)
    my ($gems_command) =  "$gems_name list -r -q $dist_name" ;
    print STDERR sprintf("%4d <",__LINE__ ), (caller 0)[3], '> gems_command: ', $gems_command, "\n" if $DEBUG_RUBYGEM;
    open(GEM, "$gems_command|") || print STDERR ColorString('red', sprintf("%04d", __LINE__). " Failed to $gems_command : $!\n");
    print STDERR sprintf("%4d ",__LINE__ ), "$gems_command\n" if $DEBUG_RUBYGEM;
    while(<GEM>) {
	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_  if $DEBUG_RUBYGEM;
	if ( /\b$dist_name \(([0-9.]+).*\)/ ) { 
	    $available = $1 ;
	    push(@candidate, $available); }
    }
    close(GEM);
    $available = PickFromCandidate(@candidate);
    print STDERR sprintf("%4d ", __LINE__ ), ' GetGemVersion: ', $dist_name, ' -> ', $available, "\n" if $DEBUG_RUBYGEM;

    if ( $available )	{ return $available;}
    else  		{ return '(0.0)';}
}
sub PickFromCandidate(@) {
    my (@CANDIDATE) = @_;
    my ($max_version);
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ': ', "\n",join ("\n", @CANDIDATE),"\n" if $DEBUG_CANDIDATE ;

    foreach  my $i ( 0.. $#CANDIDATE ) {
	my($ver) = $CANDIDATE[$i];
	print STDERR sprintf("%4d ", __LINE__ ), 'ver (', $ver,') max_version (',$max_version,")\n" if $DEBUG_VER_PATTERN;
	$ver =~ s/\.linux.*//;	# editors/ted linux.i386
	$ver =~ s/\.i386.*//;	# editors/ted linux.i386
	$ver =~ s/\.i686.*//;	#
	$ver =~ s/[_.-][a-z]+64//;	# http://download.tuxfamily.org/hatari/1.8.0/
	$ver =~ s/[_.-][a-z]+32//;	# http://download.tuxfamily.org/hatari/1.8.0/	
	$ver =~ s/-amd64.*//;	#
	$ver =~ s/x86_64.*//;	#
	$ver =~ s/solaris10.*//;	#
	$ver =~ s/[-.]win64.*/\./;	#
#	$ver =~ s/\.windows//;	# emulators/arcem
	$ver =~ s/osx//;	# biology/fastDNAml
	$ver =~ s/-svn.*//;	# avrdude-6.1-svn-20131205-mingw32.zip
#	$ver =~ s/\.cmake//;	# wm/compiz-fusion-plugins-extra
#	$ver =~ s/\.task//;	# wm/golem
	$ver =~ s/bar.plugin//;	# wm/golem	
	$ver =~ s/\.x86//;	# wm/golem
	$ver =~ s/\.x64//;	# audio/SDL2_mixer 
	$ver =~ s/fvwm//;	# devel/libstroke 0.5.1	-> 0.5.1fvwm
	$ver =~ s/with-nspr//;	# 	nss-3.17.3-with-nspr-4.10.7.tar.gz
	$ver =~ s/\.nspr.*//;	# 	nss-3.17.3-with-nspr-4.10.7.tar.gz
	$ver =~ s/v([0-9.]*)/$1/; # p5-Test-Compile-v1.2.1
#	$ver =~ s/([0-9])esr/$1/; # FireFox and its family

# following line is so harmfull ... potrace-1.1.linux-amd64.tar.gz -> 1.1.64 graphics/potrace
	$ver =~ s/\.[a-z]{2,}//;	#
	print STDERR sprintf("%4d ", __LINE__ ), 'ver (', $ver,') max_version (',$max_version,")\n" if $DEBUG_VER_PATTERN;
#	    $ver = EditVersion($DISTBASE, $ver);
	if (CompareVersion($ver, $max_version) > 0) { $max_version = $ver;}
    }
    if ( ! $max_version ) { $max_version = '0.0';}
    return $max_version;
}
sub GetMasterSiteCandidate($$$) {
#   get @MASTER_SITES from Makefile (etc)
    my($category) = shift;
    my($PackageName) = shift;
    my($DISTBASE) = shift;    
    my($pkgdir) = $category.'/'.$PackageName;
    my($MASTER_SITE) = GetVariableValue($category, $PackageName, 'MASTER_SITES');
    my (@MASTER_SITES) = split (' ', $MASTER_SITE);
#    foreach my $site (@MASTER_SITES) {
#	$site =~ s|old/$||;	# ham/xsane -> www.xsane.org/download/old/ (but it is fixed now).
#    }
#    $MASTER_SITE = join ' ',@MASTER_SITES;
#  ----------------------------------------------
   return @MASTER_SITES;
}

sub GetMasterSiteSub($$$$) {
# Relatively long subroutine to get @CANDIDATE from following four variables.
# Called from MAIN only once

    my ($PKGNAME)	= shift;
    my ($DISTBASE)	= shift;
    my ($master_site)	= shift;
    my ($home_page)	= shift;

    @CANDIDATE = '';
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
    $DISTBASE =~ s/\.src//;  # editors/ted  (ted-2.21.src) (772) Now:     2.21 -
    $DISTBASE =~ s/\.orig//;  # editors beav_1.40.orig
    $DISTBASE =~ s/-v[0-9.]*-linux//;  #  www/phraseanet-v3.1.4-linux
    my ($max_version ) = '0.0';
    my ($version, $count);
    my ($http_code) = 200;
    my ($location);

    if (($version = DistbaseCacheQuery($DISTBASE, $master_site)) > 0 ){ 
	print STDERR ' ', sprintf("%4d ", __LINE__ ), ' DISTBASE(', $DISTBASE, ') -> ', $version, ' ' if $DEBUG_CACHE;
	return ($http_code, $version);}

    if ( ! CheckDNS($master_site) ) {
	return ('DNS', '0.0');
    }

     ($MasterSiteStat, $location) = CheckHeader($master_site);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,") status: ", $MasterSiteStat, "\n" if $DEBUG_HTTP_HEADER ;
    if ($MasterSiteStat == 404 ) { 
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,") status: ", $MasterSiteStat, "\n" if $DEBUG_DISTBASE;
	if ($master_site =~ m|github| ) {	
	    print STDERR ColorString('magenta', 
				     sprintf("%4d ", __LINE__ ).
				     'CheckHeader call: ' .
				     (CheckHeader($master_site.'../releases.html'))[0]. ' '. $master_site."\n")  if $DEBUG_GITHUB;
		}
	if ($master_site =~ m|github| &&
	    (CheckHeader($master_site.'../releases.html'))[0] == 200 ) {
	    $master_site .= '../releases.html';
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;
	}
	else {   
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $home_page, ' status: ', $HomePageStat,"\n" if $DEBUG_DISTBASE;
	if ($HomePageStat == 404 || $HomePageStat == 'DNS' ) { return ($HomePageStat, '0.0');}
	$master_site = $home_page; # fall back to home_page
	}
    }
    if ($MasterSiteStat == 550 ) { 
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%04d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;
	$http_code = 550;
	if ($HomePageStat == 550 ) { return (550,'0.0') ;}
#	$master_site = $home_page; # fall back to home_page
    }
    if ($MasterSiteStat == 403 ) {
	$http_code = 403;
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;
	if ($HomePageStat == 404 ) { return (403, '0.0') ;}
	$master_site = $home_page; # fall back to home_page
	}
    if ($MasterSiteStat == 301 || $MasterSiteStat == 302 ) {
	my ($MorePageStat, $Morelocation) =  CheckHeader($location);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;
	if ($MorePageStat == 200) { return (200, $Morelocation)}
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;
	$Moved++;
	($MasterSiteStat, $master_site) = Http301core($master_site, 4); # 4 is retry number
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site, 'http_code(', $http_code, ")\n" if 	$DEBUG_HTTP_HEADER ;
	if ($http_code != 200 && $home_page)  {
	    ($http_code, $master_site) =  Http301core($home_page, 4); # 4 is retry number
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' master_site (', $master_site, ') http_code('.$http_code. ") \n" if 
	$DEBUG_HTTP_HEADER ;	}
# Following two lines are harmfull for xfce4-wm
#	else {
#	    return (301, '0.0');}
	$http_code = 200;
    }
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;		        

    return ($http_code, $master_site);
}
sub GetMasterSiteSubDirectory($$){
    my ($master_site)	= shift;
    my ($dist_name)	= shift;
 #   if (! $master_site  =~ m|.*/$| ) { $master_site .= '/';};
    my ($url) = $master_site .'/'. $dist_name;

print STDERR sprintf("%4d ", __LINE__ ), ' (distname) ', $dist_name, ' --> url = ', $url,"\n" if $DEBUG_HTTP_HEADER;

    my ($directory) = '';
# h97@makoto 22:49:16/160430(..audio/bml)% curl -I http://downloads.sourceforge.net/sourceforge/buzztard/bml-0.8.0.tar.gz
# HTTP/1.1 301 Moved Permanently
# Server: nginx
# Date: Sat, 30 Apr 2016 13:49:16 GMT
# Content-Type: text/html; charset=UTF-8
# Connection: close
# Location: http://downloads.sourceforge.net/project/buzztard/buzz%20machine%20loader/bml-0.8.0.tar.gz

    my ($curl_command) = 'curl';
    my ($ok) = 0;
print STDERR sprintf("%4d ", __LINE__ ), ' (url) ', $url,"\n" if $DEBUG_HTTP_HEADER;

    open(CURL,"$curl_command -I --insecure --user-agent FireFox $url 2>&1|") || print "problem on curl: $!\n";
    while (<CURL>){
	print STDERR sprintf("%4d ", __LINE__ ), ' (directory) ', $_ if ($DEBUG_HTTP_HEADER && $DEBUG_CURL_LISTING);
	# HTTP/1.1 301 Moved Permanently
	if (m,HTTP/1.1 301 Moved Permanently,) { $ok = 1 ;
print STDERR sprintf("%4d ", __LINE__ ), ' (directory) ', $_,"\n" if $DEBUG_HTTP_HEADER;
	}
	# Location: http://downloads.sourceforge.net/project/buzztard/buzz%20machine%20loader/bml-0.8.0.tar.gz
	if ($ok && m,Location: (.*), ) {
	    $directory = $1;
print STDERR sprintf("%4d ", __LINE__ ), ' (directory) ', $_,"\n" if $DEBUG_HTTP_HEADER;
	   $directory =~ s,http.*://,,;
	};
    };
    close(CURL);
print STDERR sprintf("%4d ", __LINE__ ), ' (directory) ', $directory,"\n" if $DEBUG_HTTP_HEADER;
    $directory =~ s,(.*)/[^/]+$,$1/,;
    print STDERR sprintf("%4d ", __LINE__ ), ' (directory) ', $directory,"\n" if $DEBUG_HTTP_HEADER;
    return $directory;
};
sub GetVariableValue ($$$) {
    my($category)	= shift;
    my($PackageName)	= shift;
    my($VARNAME)	= shift;
    my($pkgdir) = $category.'/'.$PackageName;

    open(MAKE,"(cd $pkgdir; make show-var VARNAME=$VARNAME)|") || 
	print STDERR sprintf("%4d ", __LINE__ ), "  problem getting $VARNAME: $!\n";
    my (@lines);
    while(<MAKE>){
	if (/^--- .* ---/ ) { next;}  # ignore the lines from parallel make
	push(@lines, $_);
    }	
    close(MAKE);
    chomp($lines[0]);
printf (STDERR "%4d %20s  %s\n", __LINE__, '('.$VARNAME.')', $lines[0] ) if $DEBUG_DISTBASE;    
    return $lines[0];
}
sub GetWipInfo($){
    my ($wip_directory) = shift;
    my ($pwd) = `pwd`;
    # collect PKGBASE -> PKGVERSION hash
}
sub pypiSpecial($$$$){
#  one example: devel/py-py
## http://pypi.python.org/pypi/zope.interface
    my ($distbase)	= shift;
    my ($master_site)	= shift;
        $master_site =~ s|archive/|releases|;
    my ($dir)		= shift;
    my ($PackageName)	= shift;
}
sub GitHubSpecial($$$$){
    my ($distbase)	= shift;
    my ($master_site)	= shift;
        $master_site =~ s|archive/|releases|;
    my ($dir)		= shift;
    my ($PackageName)	= shift;
    my (@candidate); 
    my ($curl_lines) = 0;
    my ($GITHUB_PROJECT);
    my ($GITHUB_TAG)	= GetVariableValue($dir, $PackageName, 'GITHUB_TAG');
# devel/pcre-ocaml has GITHUB_TAG ocaml-pcre-ocaml (ocaml- is too much). To manage that case:
    if ($GITHUB_TAG) {
	$GITHUB_PROJECT	= $PackageName;
	$GITHUB_PROJECT	=~ s/^py-//;
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $distbase, ' P(', $GITHUB_PROJECT, ")\n" if $DEBUG_DISTBASE || $DEBUG_GITHUB;	
    } else {
        $GITHUB_PROJECT	= GetVariableValue($dir, $PackageName, 'GITHUB_PROJECT');
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $distbase, ' P(', $GITHUB_PROJECT, ")\n" if $DEBUG_DISTBASE || $DEBUG_GITHUB;	
    }
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $distbase, ' P(', $GITHUB_PROJECT, ")\n" if $DEBUG_DISTBASE || $DEBUG_GITHUB;
    #   https://github.com/jberger/Mojo-IOLoop-ForkCall/archive/
    #   https://github.com/jberger/Mojo-IOLoop-ForkCall/archive/0.16.tar.gz
    #   https://github.com/jberger/Mojo-IOLoop-ForkCall/release
    #   https://github.com/jberger/Mojo-IOLoop-ForkCall/releases

 foreach  my $target  ("$master_site",
		       "$master_site"."$GITHUB_PROJECT",
		       "$master_site"."$distbase",
		       "$master_site"."$GITHUB_PROJECT".'/archive/',
		       "$master_site"."$GITHUB_PROJECT".'/releases/tag',
		       "$master_site"."$GITHUB_PROJECT".'/releases') {
     my ($curl_command) = "$curl_list_secure $target";
        print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> curl_command: ', $curl_command, "\n" if $DEBUG_GITHUB;
    open(CURL,  "$curl_command 2>&1|") ||
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Problem for curl', "$!\n";
     my ($cand);
    while(<CURL>) {
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> (',$distbase, ' / ', $target.') ', $_,"\n" if $DEBUG_GITHUB;
	$distbase =~ s/-[a-z]+//;
	if (m,/$distbase-([0-9.]+),	||
	    m,archive/release_([0-9_]+)\.,	||   # ham/uhd
	    m,archive/([0-9.]+)\.tar,	||	     # devel/js_of_ocaml
	    m|/([0-9.]+)\.tar\.gz|      ||
	    m|^([0-9.]+)\.zip|		||		# avoid jawbreaker-20121016 for hackrf
	    m|.*mame([0-9.]+)s\.zip|	||		# emulators/mame
	    m,data-name=\"v*([0-9.]+)\",||
	    m,release-([0-9.]+)\",	||   # sysutils/WCMcommander
	    m,releases/tag/([0-9.]+),	||   # sysutils/erlang-goldrush
	    0 ) {
	    $cand = $1;
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $cand, ' :: ', $_, "\n" if $DEBUG_GITHUB;
	    if ($distbase eq 'uhd' ) {  $cand = EditVersion('uhd',$cand); }
	    if ($distbase eq 'mame' ) {  $cand = EditVersion('mame',$cand); }
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $cand, ' :: ', $_, "\n" if $DEBUG_GITHUB;
	    push(@candidate, $cand);
	    }
    }
    close(CURL);
    } # foreach 
# ------ End special
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', join (" -- ", sort @candidate),"\n" if $DEBUG_GITHUB;
    return ( 200, @candidate)
}
#  -------------------------------------------------------------
# line 2983 (or around)
sub GitHubChanges($$){
# modena@makoto 00:00:51/150214(..devel/p5-App-Prove-Plugin-ProgressBar-Each)% 
# curl --location -l  https://raw.githubusercontent.com/motemen/App-Prove-Plugin-ProgressBar-Each/master/Changes
# 		                     https://github.com/motemen/App-Prove-Plugin-ProgressBar-Each/
#  ------------------------------------------
# Revision history for Perl extension App::Prove::Plugin::ProgressBar::Each
#
# 0.01    Mon Jul  5 18:47:42 2010
#         - original version
#  ------------------------------------------
    my ($pkgname) = shift;
        $pkgname =~ s|^p5-||;
    my ($homepage) = shift;
#   my (@candidate);
    my ($site) = $homepage;
    my ($max_version) =  '0.0';
    $site =~ s|http(.*):/|https:/|;
    $site =~ s|github.com|raw.githubusercontent.com|;
    $site .= 'master/Changes';
    print STDERR sprintf("%04d <", __LINE__), (caller 0)[3], '>',"\n" if $DEBUG_DISTBASE;
    open(CURL, "$curl_list_secure $site 2>&1|") || print STDERR sprintf("%4d ", __LINE__), "Problem opening $site :$! \n";
    while(<CURL>) {
	my ($ver);
	if (/([0-9.]+)\s/ )  { $ver = $1;}
	if (CompareVersion($ver, $max_version) > 0) { $max_version = $ver;}
    }
    close(CURL);
    return (200, $max_version);
}
#  --------------------------------------------------------------
sub ParseUpperDirectory($$){
    my($PKGBASE) = shift;
    my($upper)  = shift;
    my($leaf);
    my($returnCode) = 0;

    my(@candidate);
    my($candidate);

    my(@list);
    my($ver) = '0.0';

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],
	'> upper: ', $upper,"\n"	if $DEBUG_DIGIT;
    if ($upper =~ m|(.*)/(.*[v0-9.]+/$)| ) {
	$upper = $1; $leaf = $2;}

    if ($upper eq '' || $leaf eq '' ) {
	return ($returnCode, @candidate);}

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],
	'> upper: ', $upper, 'leaf: ', $leaf,"\n" if $DEBUG_GNOME;

    open(CURL, "$curl_list $upper 2>&1 |") ||
      	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Problem: ', "$!\n";
    while(<CURL>) {
	if ( m|<a href=\"(.*[0-9]\.[0-9]+)/| ||
	     m|<a href=\"(.*[0-9]\.[0-9]+)\.tar\.| ) {
	    $ver = $1;
	    print $ver , ' <- ', $_ if $DEBUG_DIGIT;
	    push(@list, $ver);
	    if (CompareVersion($ver, $candidate) > 0 ) { $candidate = $ver;}
	}			   
    }
    close(CURL);
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>',  $candidate,"\n" if $DEBUG_DIGIT;

    my($site) = $upper.'/'. $candidate. '/';
    $ver  = ParseDirectorySmall($site, $PKGBASE, 0);
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>',  $ver,"\n" if $DEBUG_SF;
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>',  $ver,"\n" if $DEBUG_DIGIT;
    $returnCode = 0 ; $candidate[0] = $ver;
    return ($returnCode, @candidate);
}
#  --------------------------------------------------------------
sub GnomeSpecial($$){
    my($distbase)	= shift;
    my($master_site)	= shift;
    my($status, $location);
    my($returnCode, @candidate);
    my(@master_site) = split ' ', GetVariableValue ('devel', 'accerciser', 'MASTER_SITE_GNOME');
    my($dir);

    foreach my $master_site (@master_site) {
	my ($url) = $master_site.'sources/'.$distbase. '/';
	($status, $location) = CheckHeader($url);
	print STDERR sprintf("%4d ", __LINE__ ), ' <', (caller 0)[3], ':', (caller 0)[2],
	    ': url (', $url, ') status (', $status, ') location (', $location, ')', "\n" if $DEBUG_GNOME ;
	print STDERR sprintf("%4d ", __LINE__ ), ' <', (caller 0)[3], ':', (caller 0)[2],
	    ': *** status *** (', $status, ') location (', $location, ')', "\n" if $DEBUG_GNOME ;
	if ($location ne ''){ $url = $location; }

	if ($status == 200 ) {
#	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2],"\n";
	    $dir = VersionedDirectory($distbase, $url);
	    if ($dir == -1) { next;}
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2],
		': dir(', $dir, ')',"\n" if $DEBUG_GNOME;   ($returnCode, @candidate) = ParseDirectory($dir, $DISTBASE, 0);
	    if ($returnCode == 200 ) {last;}
	}
    }
    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2],
	': returnCode(', $returnCode, ') @candidate', join ("\n", @candidate), "\n" if $DEBUG_GNOME;
    ($returnCode, @candidate) = ParseDirectory($dir, $DISTBASE, 0);
    return($returnCode, @candidate);
}
sub SFSubDirectory($$){
    my($DISTBASE) 	= shift;
    my($master_site)	= shift;
#    my($project)	= shift;

    $master_site =~ s/downloads.//;

    my ($master_site_upper) = $master_site;
    $master_site_upper .= $DISTBASE;
    $master_site_upper =~ s,$,/,;

    my(@candidate);
    my($candidate);

    my(@list);
    my($ver) = '0.0';
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> master_site_upper (', $master_site_upper,")\n" if $DEBUG_URL;
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> curl_list(', $curl_list, ")\n" if $DEBUG_URL;    
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> package_base (', $PKGBASE,")\n" if $DEBUG_SF;
    my ($retry) = 3;
    my ($lines) = 0;
    do {
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], $curl_list, ' ', $master_site_upper  if $DEBUG_URL;
    open(CURL, "$curl_list $master_site_upper 2>&1|") ||
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Problem: ', "$!\n";
    $lines = 0;
    while(<CURL>) {
#	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], $_ if $DEBUG_SF;
	$lines++;
	# find directory first,
#	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], $_  if $DEBUG_SF;
	if ( m|<tr title=\"([0-9.]+)\"| ) {
	    $ver = $1;
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], $_ ,' ->', $ver, "\n" if $DEBUG_SF;
#	    push(@list, $ver);
	    if (CompareVersion($ver, $candidate) > 0 ) { $candidate = $ver;}
	}
    }
    close(CURL);
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '$lines: ', $lines, '  retry: ', $retry, "\n" if $DEBUG_SF;
    }
    while ($retry-- > 0 && $lines < $MIN_LINES );

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>',  $candidate,"\n" if $DEBUG_SF;

    # And then find the file in the directory
    my($site) = $master_site .  $DISTBASE .'/' . $candidate. '/' ;
	$ver  = ParseDirectorySmall($site, $DISTBASE);

    $returnCode = 0 ; $candidate[0] = $ver;
    return ($returnCode, @candidate);
}
#  --------------------------------------------------------------
sub GreyDigitIf00($$){
    my ($http_code)	= shift;
    my ($digit)		= shift;
    if ( $http_code eq 'DNS') {
	return "<span class=\"pale_dns\">$http_code</span>";
    }
    if ( $http_code ) { 
	return "<span class=\"pale$http_code\">$http_code</span>";
    }
    elsif ($digit eq '0.0') {
	return "<span class=\"grey\">$digit</span>";
    }
    elsif ($digit ne '') {
	my ($alt) = $digit;
	if (length($digit) > 13 ) {
	    $digit = substr($digit,0,10).'...';; }
	    
	return "<span class=\"update\" alt=\"".$alt."\">$digit</span>"; #  enable by style file only if $full_list = 1;
    }
    return $digit;
}

#  -----------------------------------------------------------------------------------
#    Called when URL got 301 or 302, and returns ultimate master_site (with $http_code)
#  -----------------------------------------------------------------------------------
sub Http301core($$) {
    my ($site) = shift;
    my ($retry) = shift;

    my ($status);	# HTTP/1.1 (status digit)
    my ($location);	# Location header value when 'Moved permanently' status
    my ($retcode);	# return value of this subroutine
    my ($master_site);

#    print STDERR sprintf("%4d ", __LINE__ ), ' Moved ', $site,"<--\n";
#    chomp($site);
#    $|++;
    if ($site ne '' && $retry) {
    $site =~ s|-https:|https:|;
print STDERR sprintf("%4d ", __LINE__ ).' '. $site.' <... retry: '. $retry. "  \n\n" if  $DEBUG_HTTP_HEADER;
    if ($site eq '') { print STDERR sprintf("%4d ", __LINE__ ), " \$site is empty\n"; return -1;}
    open(URL, "$curl_head_secure $site 2>&1|") || print STDERR sprintf("%4d ", __LINE__ ), " problem accessing $site:$!\n";
    while(<URL>){
	chomp;
	print STDERR sprintf("%4d ", __LINE__ ). ' '. $_."\n" if  $DEBUG_DISTBASE ;
	if (m|HTTP/1.1 (\d+) |) {$status = $1; next;}
	if (($status == 301  || $status == 302 ) && /Location: (.*)/ ) {
	    $location = $1;
	    $location = StripLeaf($location);
print STDERR sprintf("%4d ", __LINE__ ).' location: ', $location,"\n" if  $DEBUG_HTTP_HEADER;
	}
    }
    close(URL);

    print STDERR "status      status ($status)". ' ('. sprintf("%4d ", __LINE__ ). ') Location '. $location." <== \n"  if $DEBUG_HTTP_HEADER ;
    if ( ($status == 301 || $status == 302 ) && $location && $retry-- > 0 ) { 
	($retcode, $master_site) = Http301core($location, $retry);
	if ($retcode == 200) { 
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. "\n", $master_site. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ; return ( 200, $master_site) }
    }
    elsif ( $status == 200 ) {
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('."\n". $master_site. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ; return ( 200, $master_site) }
    else { $retcode =  -301;}

#    if ($status == 200 )
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. "\n", $location. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ;
    print STDERR  ' retcode: ' , $retcode, '  Master site: '. "\n", $master_site, "\n" if  $DEBUG_DISTBASE ;
    } ###  if ($site ne '' && $retry) {
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. $location. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ;
    print STDERR   sprintf("%4d ", __LINE__ ),' retcode: ' , $retcode, '  Master site: '. $master_site, "\n" if  $DEBUG_HTTP_HEADER ;
    return ($retcode, $location);
}

# main -> GetVersionCandidate($$$) -> 
sub ParseDebug($){
    my ($pattern) = shift;
    my %DEBUG;
    my $char_list = 'aAcCdDEegFfGhlmnprRsSVxX';

    if ( $pattern =~ /a/ ) { $pattern = $char_list  }
    print STDERR sprintf("%4d ", __LINE__ ), ' DEBUG pattern (',  $pattern,  ')',"\n";
    foreach my $index (0 .. length($pattern) - 1 ){
	my $char = substr($pattern, $index, 1);
	if (grep (/$char/, $char_list) < 1) {
	    print STDERR  sprintf("%4d <", __LINE__), 'ParseDebug> ** Debug char not defined, see with -h option.',"\n"; exit;}
	$DEBUG{$char}++;
	print STDERR  '   ',$char,'  ', $LongName{$char}, "\n";
	}

    $DEBUG_ALTERNATIVE		= $DEBUG{'A'} + $DEBUG{'a'} ;
    $DEBUG_CACHE		= $DEBUG{'c'} + $DEBUG{'a'} ;
    $DEBUG_COUNT		= $DEBUG{'n'} + $DEBUG{'a'} ;
    $DEBUG_CANDIDATE		= $DEBUG{'X'} + $DEBUG{'a'} ;
    $DEBUG_CURL			= $DEBUG{'C'} + $DEBUG{'a'} ;
    $DEBUG_CURL_CACHE		= $DEBUG{'x'} + $DEBUG{'a'} ;
    $DEBUG_CURL_LISTING		= $DEBUG{'l'} + $DEBUG{'a'} ;
    $DEBUG_DIGIT		= $DEBUG{'D'} + $DEBUG{'a'} ; 
    $DEBUG_DISTBASE		= $DEBUG{'d'} + $DEBUG{'a'} ;
    $DEBUG_EDITVersion		= $DEBUG{'E'} + $DEBUG{'a'} ;
    $DEBUG_EVAL_PATTERN		= $DEBUG{'e'} + $DEBUG{'a'} ;
    $DEBUG_FALLBACK_SIMPLE	= $DEBUG{'F'} + $DEBUG{'a'} ;
    $DEBUG_FAMILY		= $DEBUG{'f'} + $DEBUG{'a'} ;
    $DEBUG_GITHUB		= $DEBUG{'g'} + $DEBUG{'a'} ;
    $DEBUG_GNOME		= $DEBUG{'G'} + $DEBUG{'a'} ;
    $DEBUG_HTTP_HEADER		= $DEBUG{'h'} + $DEBUG{'a'} ;
    $DEBUG_MASTER_SITES_LISTING = $DEBUG{'m'} + $DEBUG{'a'} ;
    $DEBUG_SPECIAL_PATTERN	= $DEBUG{'p'} + $DEBUG{'a'} ;
    $DEBUG_RUBYGEM		= $DEBUG{'r'} + $DEBUG{'a'} ;
    $DEBUG_REDIRECT		= $DEBUG{'R'} + $DEBUG{'a'} ;
    $DEBUG_SF			= $DEBUG{'s'} + $DEBUG{'a'} ;
    $DEBUG_STATS		= $DEBUG{'S'} + $DEBUG{'a'} ;
    $DEBUG_URL			= $DEBUG{'u'} + $DEBUG{'a'} ;
    $DEBUG_VERSION_DIR		= $DEBUG{'V'} + $DEBUG{'a'} ;
    print STDERR "\n";
}
#  ----------------------------------------------------
# Called three times:
#   ParseUpper Directory
#   GnomeSpecial
#   SFSubDirectory($$){

#	if ( grep (/$distbase/, @SimplePattern)) {
#	    $_ =~ /.*$distbase-([0-9.]+[0-9]).*/;	# not to include last '.'
#	    $version = $1;

sub ParseDirectorySmall($$$){
    my ($master_site) = shift;
    my ($distbase)   = shift;
    my ($SimpleFallBack) = shift;  # NOT used special flag to ask search simple pattern only

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> master_site: ', $master_site, "\n" if $DEBUG_URL;
# http://ftp.gnome.org/pub/GNOME/sources/3.10/';
#  pick following line
#  anjuta-3.10.0.tar.xz
       print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> master_site: ', $master_site, "\n"
	   if $DEBUG_GNOME || $DEBUG_SF || $DEBUG_DIGIT ;
    my ($curl_command) = "$curl_list $master_site";
    my ($ver) = '0.0';
    my ($ver_max) = $ver;
    my ($retry) = 3;
    my ($lines) = 0;
    do {
    open(CURL, "$curl_command 2>&1 |") || print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Problem ', "$!\n";
    $lines = 0;
    while(<CURL>){
	$lines++;
	if (m|$distbase|) {
	    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $_ if $DEBUG_GNOME ||  $DEBUG_SF  || $DEBUG_DIGIT;
	}
# if GNOME, pick only even (minor) number
	if ( (    $master_site =~ /GNOME/i   &&  m|.*$distbase-([0-9]\.[0-9]*[02468]\.[0-9]+)\.tar.*|) ||
             ( ! ($master_site =~ /GNOME/i ) &&  m|.*$distbase-([0-9.]+)\.tar.*| ) )  {
	    $ver = $1;
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $ver, ' > ', $ver_max,"\n" 
		    if $DEBUG_GNOME || $DEBUG_SF || $DEBUG_DIGIT ;
	    if (CompareVersion($ver, $ver_max) > 0 ) {
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> ', $ver, ' > ', $ver_max,"\n" 
		    if $DEBUG_GNOME || $DEBUG_SF || $DEBUG_DIGIT ;
		$ver_max = $ver;
	    }
	}
    }
    close(CURL);
    }
    while ($retry-- > 0 && $lines < $MIN_LINES );

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> returning: ', $ver_max, "\n"
		    if $DEBUG_GNOME || $DEBUG_SF || $DEBUG_DIGIT ;
    return $ver_max;
}
#  ----------------------------------------------------
# Called 11 times
#   inside GetSFProjectCandidate( x 6)
#   main                          x 5
sub ParseDirectory($$$){   # 2276  to  2502 lines (230 lines
    my ($master_site) = shift;
    my ($distbase)   = shift;
    my ($SimpleFallBack) = shift; 

    # returns ($returnCode, @candidate);

    my (@candidate);
    my ($version);
    print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ', $master_site, "   \n" if  ($DEBUG_URL || $DEBUG_MASTER_SITES_LISTING);
    if ($master_site eq '')	{ print STDERR sprintf("%4d ", __LINE__ ), ' $master_site is empty ',	 "\n"; return -1;}
    if ($master_site eq 'DNS')	{ print STDERR sprintf("%4d ", __LINE__ ), ' ',$distbase,' has DNS problem',"\n"; return -1;}
    print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ', $master_site, "   \n" if  ($DEBUG_URL || $DEBUG_MASTER_SITES_LISTING);
    my($curl_lines) = 0; # count how many lines came from curl -l
    my($repeat) = 3 ;
    my($sslv3) = '';
#   if ($master_site =~  m|https://code.google.com|) { $sslv3 = '-3';}
    $distbase =~ s|\+|\.|;

    while( $curl_lines == 0 && $repeat-- > 0 )  {
	print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], 
	    '> distbase (', $distbase, ') ', $master_site, "   \n" if $DEBUG_DISTBASE ;
	if ($master_site eq '') { print STDERR sprintf("%4d ", __LINE__ ), " \$master_site is empty\n"; return -1;}
	my ($curl_command) = "$curl_list_secure $sslv3 $master_site";
	print STDERR sprintf("%4d ", __LINE__ ), $curl_command, "\n" if $DEBUG_CURL;

#  --------------- H A N D L I N G  @CurlCache ------------------------
	my(@ThisCurl);
	    print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ',"\n",
		'      Last curl ', $LastCurl,    "\n",
		'      This curl ', $curl_command,"\n" if $DEBUG_CURL_CACHE;
	if    ( ($LastCurl =~ m|$local_ports_string$|) && ( $#LOCAL_PORTS > 30 )) { # with enough lines
	    @ThisCurl = @LOCAL_PORTS ;
	} elsif ($LastCurl eq $curl_command ) {
	    @ThisCurl = @CurlCache;
	    print STDERR sprintf("%4d ", __LINE__ ), ' *** ', $distbase,
		' ==> Using @CurlCache',"\n" if $DEBUG_CURL_CACHE;
	} else {
	    $LastCurl = $curl_command;
	    open(CURL, "$curl_command 2>&1|") || print STDERR "Problem curl: $!\n";
	    @ThisCurl = <CURL>;
	    close(CURL);
	    if ($curl_command =~ m|$local_ports_string$|)  {
		@LOCAL_PORTS = @ThisCurl; }
	    else {
	    @CurlCache = @ThisCurl;
	    }
	}
    while ($_ = shift @ThisCurl ) {
#  --------------------------------------------------------------------

#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_, "\n";
#print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' ', $_,"\n" if $DEBUG_DISTBASE;        
	$curl_lines++;
	chomp();	
     	if (/\[DIR\]/) { next; }	# skip directory
	# arc-5.21p.tar.gz (84.8 kB)
        # http://www3.sympatico.ca/mt0000/bicom/bicom101.zip -> fails to matchp
#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $distbase, ' ', $_,"\n";
# print STDERR sprintf("%4d ** ", __LINE__ ). '('. $distbase.') '. $SpecialPattern{$distbase}.': '. $_. ' ---: '.
#	   (grep (/$distbase/, keys %SpecialPattern)) ." :---\n";
        #  eaglecon-4.16r2.zip
	# DBD-CSV-0.22.tar.gz 45 < 22
	# DBD-CSV-0.44.tgz
	# DBD-CSV-0.45.tgz
        # zorro-1.1p8.tar.gz -> 8
	# Class-DBI-Pg-0.08.tar.gz
	#  -----------------------------------------------
	# S K I P P I N G   P A R T I C U L A R    F I L E (ignore)
	#  -----------------------------------------------
	if ( /scapy4win_and_pack.zip/)		{ next;} # net/scapy exception
	if ( /Pod-Simple-31337-0.02.tar.gz/)	{ next;} #
	if ( /buildrump-1369495826.tar.bz2/)	{ next;} # ignore old stuff (misc/rump)
	if ( /aspell6-ca-20[0-9][0-9]+/)	{ next;} # ignore aspell6-ca-20xx pattern
	if ( $distbase eq 'libXaw' && /libXaw3d/ )	{ next;}
	if ( /^[0-9]$/ ) { next;} # skip single digit by itself (devel/py-pyobjc-.*)  why ?
# ----------  A L W A Y S   G O  T H R U   H E R E  --------------	# MAJOR_IF_THEN_ELSE
print STDERR sprintf("%4d ** ", __LINE__ ), '(', $distbase,') ', $SpecialPattern{$distbase},': ', $_, ' ---: ',
	    grep (/$distbase/, keys %SpecialPattern)," :---\n" if
	    ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN || $DEBUG_MASTER_SITES_LISTING );
print STDERR sprintf("%4d ** ", __LINE__ ), '(', $distbase,') ', $FAMILY{$distbase},': ', $version,"\n" if
	    ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN || $DEBUG_MASTER_SITES_LISTING );

#  ----------------------------------------------------------------
print STDERR sprintf("%4d ** ", __LINE__ ), '(', $distbase,') $_(', $_,')',"\n" if $DEBUG_EVAL_PATTERN ;
	if ( grep (/$distbase/, @SimplePattern) || $SimpleFallBack ) {
	    $_ =~ /.*$distbase-([0-9.]+[0-9]).*/;	# not to include last '.'
	    $version = $1;
	} elsif ( $SpecialPatternY ) {
	    $version = $_;
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ', '(SpecialPatternY) ', $SpecialPatternY,"\n" if   ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN || $DEBUG_EVAL_PATTERN );		
	    eval $SpecialPatternY ;
print STDERR sprintf("%4d ", __LINE__ ), '($version) ', $version, "\n" if   ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN);
	} elsif ( grep (/$distbase/, keys %SpecialPattern) ||
		  $SpecialPattern{$distbase}  ) {	     ### the first case won't match with Text-Tabs+Wrap (includes  '+')
	    print STDERR sprintf("%4d ", __LINE__ ), '(', $distbase,') ', $_,"\n" if $DEBUG_EVAL_PATTERN;
	    #  E V A L U A T E SpecialPattern
	    $version = SpecialPattern($distbase, $_);
	} elsif ( $distbase eq 'Unicode-Map' && 
		$_ =~ /Unicode-Map8(.*)/ ) { 
print STDERR sprintf("%4d ", __LINE__ ), ' (1a)', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
next;
	} elsif ( $distbase eq 'otp_src_R' &&
		/\b$distbase([0-9]+)B([0-9]*)/ ) {
	    $version =	$1.$2 ;
	} elsif ( $distbase eq 'xmx-2.1alpha.pl')	{ 
	    s/alpha/a/g;
    	    s/beta/b/g;
		$_ =~ /xmx-(.*)pl.*\.tar\.gz/;
		$version = $1;
print STDERR sprintf("%4d ", __LINE__ ), ' (01)', $distbase,' version-> ', $version,"\n" if $DEBUG_DISTBASE;
	# avoid 2, www/p5-Catalyst-View-Mason2 will not be picked for www/p5-Catalyst-View-Mason
	} elsif ( /(.*\b)$distbase([013-9_.-][0-9a-z_.-]+)\.(gz|bz2|zip|xz|7z|tgz|tbz|tar|Z)/ ||
		/(.*\b)$distbase-v([0-9.]+)-linux/ ||
		/(.*\b)$distbase-([0-9.]+)\.python/ ||	# devel/pythontidy
		/(.*\b)$distbase.v([0-9.]+)/ ||
		0 ) {
	    my $pattern = $1;
	    if ($pattern =~ /-$/) { 
		print STDERR sprintf("%4d ", __LINE__ ), ' (-) ', $_,"\n" if $DEBUG_DISTBASE;
		next;}  # Avoid to pick CGI-Cookie-XS-0.18.tar.gz for Cookie-XS
	    $version =	$2; $version =~ s/^[-]//;  # www-VRML-1.10.tar.gz -> -1.10 -> 1.10
	    print STDERR sprintf("%4d ", __LINE__ ), ' (0) >', $pattern, '< ', $_,"\n" if ($DEBUG_DISTBASE||$DEBUG_EVAL_PATTERN);
print STDERR sprintf("%4d ", __LINE__ ), ' (1) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
	    #  -----------
	    # xpdf-arabic etc special
    	    #  -----------
	    if ($distbase =~ /xpdf-[a-z]*/) {
print STDERR sprintf("%4d ", __LINE__ ), ' (2) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
		my ($month, $digit);
		if ($version =~ /-[0-9]+(-[jfmasond][a-z][a-z]-).*/ ) { 
		    $month = $1;
		    $digit = $MonthToDigit{$month};
		    $version =~  s/-([0-9]+)-[jfmasond][a-z][a-z]-([0-9]+)\.tar/$1$digit$2/;
print STDERR sprintf("%4d ", __LINE__ ), ' (3) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
		}
	    } else { # not xpdf
	    $version =~ s/-vax-//;	# compat30-extras-sparc-3.1.tar.bz2  S T R I P
	    $version =~ s/-i386-//;	#
	    $version =~ s/(\d+)B(\d+)/$1.$2/;  # erlang otp_src_R16B02 -> 16.02
	    $version =~ s/_bin_win//; # shapelib129_bin_win.zip
	    $version =~ s/\.tar//;
	    $version =~ s/-src-tar//;	# pwlib-v1_11_1-src-tar
	    $version =~ s/release//;
	    $version =~ s/\.cmake//;
	    $version =~ s/source//;
	    $version =~ s/\.alpha//;	# wm/weewm
	    $version =~ s/-dev//;
            $version =~ s/-src-//;	# qt-everywhere-opensource --> -src-5.2.1
	    $version =~ s/-src//;	# qt-everywhere-opensource --> -src-5.2.1	     
	    $version =~ s/\.src//;
    	    $version =~ s/_src_all//;	#  p7zip_9.20.1_src_all.tar
       	    $version =~ s/src//;	#  archivers/hpack79src
       	    $version =~ s/dos//;	#  archivers/hpack79dos
#	    $version =~ s/pre[0-9]//;
	    $version =~ s/^[_.-]//;
	    if ( ($distbase =~ /[A-Z][A-Za-z]+[0-9]*-[A-Z][a-z]+/ ) ) { # perl module regular shape
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Perl Module: ', $version, "\n" if $DEBUG_DISTBASE;
		if ( $version =~ m|_[0-9]+$| ) { $version = ''; next;}	# skip  or after (DEVELOPER RELEASE)
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> Perl Module: ', $version, "\n" if $DEBUG_DISTBASE;
	    } else {			# harmful for p5-Data-Printer-0.35_01 -> 0.35.1
	    $version =~ s/[_.-]/\./g;
	    }
       	    $version =~ s/([0-9])p([0-9]+)/$1\.$2/;	# zorro 1.1p8, 1.1p8 ->1.1.8, while unzip60 is retained  
       	    $version =~ s/p[0-9]+//;
    	    $version =~ s/\.diff//;	# beav_1.40.diff
    	    $version =~ s/\.orig//;	# aranym_1.0.2.orig.tar
    	    $version =~ s/^r/0./;	#  gambatte_src-r571.tar
	    $version =~ s/\.ipv6//;	# (security) tcp_wrappers_7.6-ipv6.4
	    $version =~ s/\.shar//;
	    $version =~ s/\.cpio//;
	    $version =~ s/-v([0-9.]+)-linux/$1/;
	    $version =~ s/\.win32//;
	    $version =~ s/\.bin//;
	    $version =~ s/\.mac//;
#	    $version =~ s/([0-9.]+)*ruby.*/$1/;
    	    $version =~ s/\.cygwin//;	# net/proxytunnel
	    $version =~ s/\.doc//;
	    $version =~ s/\.c$//;	# bunzip-0.21.c.gz
	    $version =~ s/v([0-9._-]+)/$1/;
	    }
	} # line 2133, elsif (/(.*\b)$distbase([013-9_.-][0-9a-z_.-]+)\.(gz|bz2|zip|xz|7z|tgz|tbz|tar|Z)/ ||

	if ($version =~ m|[0-9.]+pre[0-9]| ) { next;}
	if ($version =~ m|[0-9.]+beta| ) { next;}
	if ($version eq '') { next;}
	if (length($version) > $MAXSTRINGLEN ) { next;} # skip too long
#  RCRCRC
print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], ">\t:", (caller 0)[2], ': (distbase) ', $distbase,' (version) ', $version, "\n" if $DEBUG_DISTBASE;
	if ( ! ($distbase =~ m|rc| ) &&
	       $version =~ m|[0-9.]+rc[0-9]| )  { next;} # in case $distbase has not 'rc' in it, ignore rc stuff  RRRRRRRCCCCC i
	if ( ! ($distbase =~ m|pre[0-9]| ) &&
	       $version =~ m|[0-9._-]+pre[0-9]| )  { next;} # in case $distbase has not 'pre' in it, ignore rc stuff  RRRRRRRCCCCC i
	if ($version =~ /^[0-9_]+$/ ) { $version =~ s|_|.|g;} # contao 3_2_44 -> 3.2.44
print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> (distbase) ', $distbase,' (version) ', $version, "\n" if ($DEBUG_DISTBASE || $DEBUG_EVAL_PATTERN);

print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> distbase: ', $distbase,' (version) ', $version, "\n" if $DEBUG_EDITVersion;

	if ($version eq '') { next;}
	if ( ! ($version =~ /[0-9]/ )) { next; } # need at least one digit
	# 552 -> 5.5.2, 2.1.3 -> 213 (nkf) etc
	#	if ($version =~ /1-bit ui/) { next;} # security sign pecuriarity
# the following line is harmfull if EditVersion is active 1.2907 > 1.29.07  
#	push(@candidate, $version); # for the safefy, push before edit too
	my($edit_version) = EditVersion($distbase, $version);
print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> distbase: ', $distbase,' (version) ', $edit_version, "\n" if $DEBUG_EDITVersion;

	    push(@candidate, "$edit_version");
#	    $count   =	CountPeriod($version);

    } # (A little bit small) end while ($_ = shift @ThisCurl ) {
print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> (distbase) ', $distbase,' (version) ', $version, "\n" if $DEBUG_DISTBASE;
    } # BIG  while( $curl_lines == 0 && $repeat-- > 0 )  {

    my ($returnCode) = 0;
    print STDERR sprintf("%4d ", __LINE__ ), '==> curl_lines: ', $curl_lines, "\n" if $DEBUG_DISTBASE;
    if ($curl_lines == 0 ) { $returnCode = -1; };

print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ': (distbase) ', $distbase,' (version) ', $version, 
' returnCode ', $returnCode, ' @candidate: ', "\n------------------\n",join ("\n", @candidate), "\n" if $DEBUG_CANDIDATE;
#      foreach my $c (@candidate) {
#  	if (1 || $c =~ /4\.8\.3/) {
#  print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],'> (edit_version) ', $c, "\n"; }}
    push(@candidate, "0.0");  # make always candidate 2 or more (?)
    ($returnCode, @candidate);
}  # end ParseDirectory
sub PrintHeader($) {
    my ($full_list) = shift;
    my ($update);
    if ($full_list) {
	$update = 'span.update { background: \#d0c8c8;}';
    }
    print SUMMARY <<SUMMARY;
<html>
<style>
    body    { font-size: small;}
    table   { font-size: small;}
    tr.user      { background-color: \#e8e8f0; }
    tr.reverse   { background-color: \#e0c8e8; }
    span.reverse { background-color: \#e0c8e8; }        
    a.rev { background: \#328032;color: white;}
    span.brown     { color: brown;}
    span.grey      { color: \#608060;}
    span.grey      { color: \#c09090;}
    span.pale550   { color: \#e0e090;}
    span.pale404   { color: \#f0a000;}
    span.pale403   { color: \#90e0e0;}

    span.pale302   { color: \#806080;}
    span.pale301   { color: \#804080;}

    span.pale_dns  { color: \#c040c0;}
    span.pale_arrow { color: \#c090c0;}
    span.pale0_0    { color: \#e0e090;}
    td.update { background: \#d0c8c8;}
    td.grey   { background: \#c0c0c0;}

    a.github:link	{ background-color: \#f0ff90; }
    a.github:visited	{ background-color: \#f0ff90; }
    a.github:hover	{ background-color: \#f0ff90; }
    a.github:active	{ background-color: \#f0ff90; }

    a.sf:link		{ background-color: \#c0e0e0; }
    a.sf:visited	{ background-color: \#c0e0e0; }
    a.sf:hover		{ background-color: \#c0e0e0; }
    a.sf:active		{ background-color: \#c0e0e0; }

</style>

<body>
<table cellspacing=0 cellpadding=3 border=0>
<tr><th>directory</th><th>Package</th><th>Now</th><th></th>
<th>Update-To</th><th>TODO</th><th>MAINTAINER</th><th>MASTER_SITES (only the first one checked) </th></tr>
SUMMARY
# just for emacs face
#     = $category.'/'.$PackageName;
}
# sub pyObjcSpecial($) {
#     # devel/py-objc-*
#     my ($distbase)	= shift;
#     my ($distbase_short) = $distbase;
#     $distbase_short =~ s/^pyobjc-//;
#     my ($master_site)	= 'https://pythonhosted.org/pyobjc/'.$distbase_short.'/changelog.html';
#     my ($line) 		= '$line =~ s|.*h2.Version ([0-9]\.[0-9.]+).*/h2.*|$1|;';
# ##       'cairo',		'  $line =~ s/.*$distbase(-5c){0,}-([0-9.]+[0-9]).*/$2/ ;',  # games/crimsonfields
# 
#     $SpecialPattern{$distbase} = \"$line\";
#     print STDERR sprintf("%4d ** ", __LINE__ ), '(', $line,')',"\n";
#     return ($master_site, $line);
# }
sub ReadMakefile($$)  {		# <- Main
    my ($category) =	shift;
    my ($directory) =	shift;
    my ($Makefile)  =	"$pkgsrc/$category/$directory/Makefile";
    my ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $texlive) 
	= ('',	     '',        0,            0,             0,		  -1,         0);
#print STDERR '   ***', __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n";
#    print STDERR "Checking $Makefile\n";    
    if ( -f $Makefile ) {
	chomp();
#	print STDERR "Reading $Makefile\r";
	open(MAKEFILE, $Makefile) || print STDERR "Problem opening $Makefile: $!\n";
	while (<MAKEFILE>) {
	    if ( /^MAINTAINER=\s*(.*)/ )	{ $MAINTAINER = $1; }
	    if ( /^HOMEPAGE=\s*(.*)/ )		{ $HOMEPAGE = $1; $HOMEPAGE =~ s|\#.*||; } 
	    if ( m|^.\s*include.*\.\./\.\./lang/ruby/gem\.mk|)	{ $GEM_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./lang/php/pear\.mk|)	{ $PEAR_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./mk/haskell\.mk|)	{ $HS_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./lang/python/egg\.mk|)	{ $EGG_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./print/texlive/package\.mk|)	{ $texlive++;}

	   #        MASTER_SITES=     ${MASTER_SITE_SOURCEFORGE:=modauthkerb/}
	    if ( m|^MASTER_SITES=\s+\$\{MASTER_SITE_SOURCEFORGE:=(.*)/|) { $SFProject = $1;}
	}
	close(MAKEFILE);
	if ($SFProject eq '' ) {
	    my ($site) = GetVariableValue($category, $directory, 'MASTER_SITE');
# 	    if ( $site =~ m|.*:=(.*)/|) { $SFProject = $1;} 
}
	if ($MAINTAINER eq '' ) { $MAINTAINER = GetVariableValue($category, $directory, 'MAINTAINER');}
	if ($HOMEPAGE eq '' || $HOMEPAGE =~ m|\$\{.*\}|)
	  { $HOMEPAGE = GetVariableValue($category, $directory, 'HOMEPAGE');}
	return ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $texlive, $EGG_PACKAGE);
    }
}    
sub ReadTodo($){
    my($pkgsrc) = shift;
    my($TODO)   = $pkgsrc.'/doc/TODO';
    if ( open(TODO, $TODO) == 0 ) {
	print STDERR " **(EE) Problem reading $TODO: $!\n";
	print STDERR " **(EE) -p option correct ?\n"; exit 24;
    }
    while(<TODO>) {
	if (/^[ \t]+o ([a-zA-Z0-9_-]+)-([0-9.a-z]+)/ ) {
	    my ($package) = $1;
	    my ($version) = $2;
	    $TODO{$package} = $version;
	}	    
    }
}	
sub RecordMaxElapsed($){
    my($shift) = time; 
}
sub StripLeaf($) {
    my($url) = shift;
    my($return) = $url;
    # strip the last part of URL if it includes file, not directory

    # Requesting http://downloads.sourceforge.net/sourceforge/qore/qore-uuid-module-1.3.tar.bz2
  # Redirected to http://downloads.sourceforge.net/project/qore/module-uuid/1.3/qore-uuid-module-1.3.tar.bz2
  # Requesting http://downloads.sourceforge.net/project/qore/module-uuid/1.3/qore-uuid-module-1.3.tar.bz2
  # Redirected to http://heanet.dl.sourceforge.net/project/qore/module-uuid/1.3/qore-uuid-module-1.3.tar.bz2
  # Requesting http://heanet.dl.sourceforge.net/project/qore/module-uuid/1.3/qore-uuid-module-1.3.tar.bz2
    my ($url) = shift;
    print STDERR ' ', sprintf("%4d ", __LINE__ ), ' url(', $url, ') ->  ' if $DEBUG_REDIRECT;
    if ($url =~ m,(.*)/.*\.tar\.(gz\|tgz\|bz2), ) {
	$return = $1;
    print STDERR ' ', sprintf("%4d ", __LINE__ ), $return  if $DEBUG_REDIRECT;
    }
    print STDERR ' ', sprintf("%4d ", __LINE__ ), "\n" if $DEBUG_REDIRECT;
    return $return;
}
sub ShowVersion(){
    print '(',$my_name,') Version: ', $VERSION,"\n";
    }

sub SkipTooOld($){
    my($MaturedList) = shift;
    my ($count) = 0;
    open(TOO_OLD, " $MaturedList ") || print STDERR sprintf("%4d <"), (caller 0)[3], '> Problem reading ', $MaturedList, ' ', $!,"\n";
    while(<TOO_OLD>) {
	chomp;
	if ( m|^\s*# |       ) { next;}
	if ( m|[^/]+/([^/]+)|) { push(@SkipTooOld, $1) ; $count++;}
    }
    close(TOO_OLD);
    return ($count);
}
sub ExecutionTime($$){
    my ($started) = shift;
    my ($ended)   = shift;
    my ($took)    = $ended - $started;

    my ($hour) =  int($took/3600);
    my ($min)  =  int( ($took - ($hour * 3600) )  /60);    
    my ($sec) =   $took - $hour * 3600 - $min * 60;
    return  sprintf("%02d:%02d:%02d", $hour, $min, $sec);
}
my($Sum);
sub Stats($$){
    my ($started) = shift;
    my ($exec_time) = ExecutionTime($started, time());
    my ($argv)    = shift;

    my ($sec, $min, $hour, $day, $mon, $Year, $dayoWeek, $dayoYear, $summertime) = gmtime($started);
    my ($started_string) = sprintf "%4d-%02d-%02d %02d:%02d", $Year+1900, $mon+1, $day, $hour, $min;

       ($sec, $min, $hour, $day, $mon, $Year, $dayoWeek, $dayoYear, $summertime) = gmtime();
    my ($ended)  = sprintf "%4d-%02d-%02d %02d:%02d", $Year+1900, $mon+1, $day, $hour, $min;
    my ($indicated);

    if ($full_list) { $indicated = '(indicated as 0.0)';}
    else            { $indicated = '(only listed with -f or -c option)';}
    $Sum
	= $Found 
	+ $TODO_LIST
	+ $OK
	+ $NotAvailable

	+ $NoMasterSitesStats
	+ $NotFound
	+ $Forbidden
	+ $DNSProblem

	+ $SkippedEndingDigitStats
	+ $SkipTooOld
	+ $StatTEXLIVE
	+ $MetaPackage

	+ $Reverse
	+ $NotListed
	;
    my($ForMergeCount) = sprintf 
    "<!-- ForMergeCount:%d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d -->\n",
	  $Found  ,
	  $TODO_LIST ,
	  $OK  ,
	  $NotAvailable ,

	  $NoMasterSitesStats ,
	  $NotFound ,
	  $Forbidden ,
	  $DNSProblem ,

	  $SkippedEndingDigitStats,
	  $SkipTooOld ,
	  $StatTEXLIVE ,
	  $MetaPackage ,

	  $Reverse ,
	  $NotListed ,
	$Sum,
	$TotalChecked, 
	
	$started, time();

    my($string2) = "       %-21s %6s %s\n";
    my($string) =  "%-21s %6s  %s\n";
    my($number) =  "%-21s %6d  %s\n";
    my($number2) = "%-41s %6d  %s\n";
    my($number3) = "%-41s %6d  %s\n";    
    # 95 + 21 - 7(Matured)
    my($number4) = "%-107s %6d  %s\n";

    my($URLmatured) = '<a href="https://github.com/makoto-fujiwara/check-update/blob/master/MaturedList">Matured:</a>';
# Be carefull to have each header has colon(:) for merge-process be done correctly

    print  SUMMARY '<pre>',"\n";
    print  SUMMARY '<a href="../00_Summary.html"> Summary </a> | <a href="./?C=M;O=D"> Upper directory</a>';
    if ( $category ) {
    print  SUMMARY ' | <a href="./diff/'. $category. $divide_devel . '.html"> diff </a> '
    }
    print  SUMMARY "\n";
    printf SUMMARY $string2,  'Script Time Stamp:', $VERSION;
    printf SUMMARY $string2,  'Started:',           $started_string, 'UTC';
    printf SUMMARY $string2,  'Ended:',             $ended, 'UTC';    
    printf SUMMARY $string2,  'Elapsed:',  '           '.$exec_time; # column adjust (indent) to above

    printf SUMMARY $number2,  '<span class="brown">Found:', 	$Found,		'These packages are to be updated</span>';
    printf SUMMARY $number3,  '<span class="brown">TODO flags:', $TODO_LIST,	'(More to be updated, by TODO)</span>';
    printf SUMMARY $number,  'Up-to-date:',		$OK,	'OK, Already up-to-date';
    printf SUMMARY $number,  'Not Available:',		$NotAvailable,	'Failed to get update info '. $indicated;

    printf SUMMARY $number,  'No Master Sites:',	$NoMasterSitesStats,	'(usually in files directory)';
    printf SUMMARY $number,  'NotFound (404):',		$NotFound,	'MASTER_SITES returns 404, and no recovery';
    printf SUMMARY $number,  'Forbidden(403/550):',	$Forbidden;
    printf SUMMARY $number,  "Site not in DNS:",	$DNSProblem;

    printf SUMMARY $number,  'Name ends with digit:',	$SkippedEndingDigit,	'(The name ends with digits, may give false version)';
    printf SUMMARY $number4,  $URLmatured,		$SkipTooOld,	'(No update expected)';

    printf SUMMARY $number,  'Texlive:',		$StatTEXLIVE,	'(Texlive is skipped for now)';
    printf SUMMARY $number,  'META_PACKAGE:',		$MetaPackage,	'(Other than meta-pkgs category)';
    printf SUMMARY $number,  'Confusing:',		$Reverse,	'<span class="reverse">(Found version wrong, hilighted, only for debug purpose)</span>';

    printf SUMMARY $number,  'Not Listed:',		$NotListed,'';
    printf SUMMARY $number,  'Sum of Above:',		$Sum,'';
    printf SUMMARY "\n";
    printf SUMMARY $number,  'Total Checked:',		$TotalChecked;
    printf SUMMARY $string,  'Options used:',		' ', $argv;
#   printf SUMMARY $string,  'Output URL:',		' ', $output_URL.$output_leaf.'/'. $summary_leaf;
    print  SUMMARY "\n";
    print  SUMMARY " *** Above # has so many errors, by so many reasons, don't blame me :-) , thank you.\n";

    print  SUMMARY $ForMergeCount,"\n" if $merge_mode;
    print  SUMMARY '</pre>',"\n";
}
# 30 -> 3.0   60 -> 6.0
sub Zip($$)  {
       my($version) = shift;
       my($result) ;
       my($a) = substr($version, 0,1);
       my($b) = substr($version, 1,1);
       my($c) = substr($version, 2,1);
       if      ( length($version) == 3 ) {$result = $a.'.'.$b.'.'.$c;}
       elsif   ( length($version) == 2 ) {$result = $a.'.'.$b       ;}
       return $result;
}
sub Three($$) {
    my($version) = shift;
    my($digit) =   shift;
    my($a, $b, $c) = ( 0, 0, 0 );
    if (grep (/\./, $version) > 0) { return $version;} # if already has period. unzip 6.0.0
    if (length($version) > 3 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 2);
	$c = substr($version, 3, 9);
    } elsif (length($version) == 3 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 1);
	$c = substr($version, 2, 1);
    } elsif (length($version) == 2 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 1);
	$c = 0;
    } elsif (length($version) == 1 ) {
	$a = $version;
	$b = 0;
	$c = 0;
    }
    if ($digit == 2 ) { return $a.'.'.$b.$c;}        
    else              { return $a.'.'.$b.'.'.$c;}

}
sub Two($) {
    my($version) = shift;
    my($a, $b) = (0, 0);
#    if (length($version) == 2 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 9);
#    }
    return $a.'.'.$b;
}
#sub Four($$) {
#    my($version) = shift;
#    my($digit) =   shift;
#    my($a, $b, $c) = ( 0, 0, 0);
#    if (length($version) == 4 ) {
#	$a = substr($version, 0, 1);
#	# (skip period of 0.00)
#	$b = substr($version, 2, 1);
#	$c = substr($version, 3, 1);
#    } elsif (length($version) == 2 ) {
#	$a = substr($version, 0, 1);
#	$b = substr($version, 1, 1);
#	$c = 0;
#    } elsif (length($version) == 1 ) {
#	$a = $version;
#	$b = 0;
#	$c = 0;
#    }
#    if ($digit == 2 ) { return $a.'.'.$b.$c;}        
#    else              { return $a.'.'.$b.'.'.$c;}
#
#}

# devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.422
# 							1.44 	->	1.440
#  LeftJustify($version,1,3);} #in 3 out 3
sub LeftJustify ($$$){
    my($version) = shift;
    my($int)	= shift;
    my($frac)	= shift;
    my($result) = $version;
    # add 0 if length of the version is only 4, if length is 5, no addition
    if (length($version) == $int + $frac) { $result .= '0';}
    return $result;
}
sub AddZero($$) {
    my($version) = shift;
    my($count)	= shift;
    if ($count == 1 ) { return $version . '0';}
    if ($count == 2 ) { return $version . '00';}
    if ($count == 3 ) { return $version . '000';}
    if ($count == 4 ) { return $version . '0000';}
}
#                                                       (0,1,  1,3, 4,3)
# # www/p5-Reaction 	p5-Reaction 	0.2.5 	<-	0.002005
# #  $version = VerSprintf($version, 0,1,  2,3, 5,3 );}
sub VerSprintf($$$$$) {
    my($version) = shift;
    my($one, $two, $z0, $three, $four, $z1, $five, $six) = @_;
    my($result) = $version;
    my ($a) = substr($version, $one,   $two);
    my ($b) = substr($version, $three, $four);
    my ($c) = substr($version, $five,  $six);
    $result = sprintf("%d.%s%d.%s%d", $a, $z0, $b, $z1, $c);
}

# nkf 2.1.3 -> 2.13  ( $version, 2) .. meaning remove 2nd dot
sub DeleteDot($$){
    my($version) = shift;
    my($digit) =   shift;
    my($result) = $version;
    my(@element) = split '\.', $version;
    $result = $element[0].'.' . $element[1] . $element[2];
#   print STDERR sprintf("%4d ", __LINE__ ), ' ', $version, ' -> ', $result,"\n";
    return $result;
}
#                  DelDot422($version, 5, 8);
# www/sqtop 20131217 -> 2013.12.17
sub DelDot422($$$) {
    my($version) = shift;
    my($one)	= shift;;
    my($two)	= shift;
    my($result) = $version;
    $result =	substr($version, 0, 4)  
	.	substr($version, $one, 2)
	.	substr($version, $two, 2) ;

    return $result;
}
sub InsertDot($$){
    my($version) = shift;
    my($digit) =   shift;
    my($result) = $version;
    # if the letter at the location of $digit + 1 is digit, insert period at that point
    # example yencode 0.46 -> 0.4.6
    # 0.341 -> 0.34 but 0.42 -> 0.42 (not 0.42.) ($digit == 3, graphics/p5-SWF-File)
#print STDERR '(',sprintf("%4d ", __LINE__ ), ')  ', $version, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;
    if ($digit == 3 && length($version) == 4 ) {return $result;}
#print STDERR '(',sprintf("%4d ", __LINE__ ), ')  ', $version, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;    
    $digit++;
    if (substr($version, $digit, 1 ) + 0 >= 0) {
	$result = substr($version, 0, $digit) . '.' . substr($version, $digit, 99);
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}
sub InsertDot2($$$){
    my($version) = shift;
    my($one) =   shift;
    my($two) =   shift;
    my($result) = $version;

    #  	p5-ExtUtils-CBuilder 	0.28.02.16 	->	0.280220    (3,2)
    $result = substr($version, 0, 1)        . '.'
	.     substr($version, $one, 2) .'.'
	.     substr($version, $two, 2) .'.'
        .    substr($version,  $two + 2, 2) ;
    return $result;
}

# 1.001002 -> 1.1.2
sub InsertDot133($){
    my($version) = shift;
    my($result) = $version;
    if (length($version) == 8) { 
	$result = sprintf("%d.%d.%d", 
			  substr($version, 0, 1),
			  substr($version, 2, 3),
			  substr($version, 5, 3));
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, "\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}
# 1111 -> 1.11.1 geography/gdal-lib
sub InsertDot121($){
    my($version) = shift;
    my($result) = $version;
    if (length($version) == 4) { 
	$result = sprintf("%d.%2d.%d", 
			  substr($version, 0, 1),
			  substr($version, 1, 2),
			  substr($version, 3, 1));
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, "\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}
# 8 chars ->      4 5
# 0.997002 -> 0.99.7.002
sub InsertDot845($){
    my($version) = shift;
    my($result) = $version;
    if (length($version) == 8) { 
	$result = sprintf("%d.%2d.%d.%03d", 
			  substr($version, 0, 1),
			  substr($version, 2, 2),
			  substr($version, 4, 1),
			  substr($version, 5, 3));
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, "\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}


# p5-HTTP-Request-Form (HTTP-Request-Form) (1513 ) Now:  0.9.5.2 ->   0.952 Todo:       
sub SingleDigit($){
    my ($version) = shift;
    my ($result)  = 
	substr($version, 0, 3) . '.' .
	substr($version, 3, 1) . '.' .
    	substr($version, 4, 1);
    return $result;
}
# archivers/nulib2 325 -> 3.2.5
sub ThreeSingle($){
    my ($version) = shift;
    my ($result);
    $result = sprintf("%d.%d.%d", 
			  substr($version, 0, 1),
			  substr($version, 1, 1),
		      substr($version, 2, 1), )
}
# 5-Class-C3-Componentised (Class-C3-Componentised) (1536 ) Now:   1.0010 -> 1.001000 Todo:
sub Delete02($) {
    my ($version) = shift;
    my ($result) = $version;
    if (length($version) == 8 && substr($version, 6, 2) eq '00' ) {
	$result = substr($version, 0, 6);
    }
    return $result;
}
sub AddSpecialPattern(){
## https://pythonhosted.org/pyobjc/core/changelog.html
##  <h2>Version 3.2</h2>  
    opendir(my $dh, $pkgsrc.'/devel') ||
	printf STDERR sprintf("%4d ", __LINE__ ), "Problem on AddSpecialPattern(),\n";
    while (readdir $dh ) {
	chomp();
#	printf STDERR sprintf("%4d ", __LINE__ ). ' -> '. $_."\n";
	if ( /^py-(pyobjc-.*)/ ) {
	    my ($distbase) = $1;
#	    printf STDERR sprintf("%4d ", __LINE__ ). 'distbase: '. $distbase." ";
	    $SpecialPattern{$distbase} = '$line =~ s|.*Version ([0-9]\.[0-9.]+).*|$1|;';
	    $DownLoadAlternative{$distbase} = 'https://pythonhosted.org/pyobjc/core/changelog.html';
	}
    }
    closedir($dh);
#    printf STDERR sprintf("%4d ", __LINE__ ).   $DownLoadAlternative{'pyobjc-framework-WebKit'} ."\n";
}
sub SummaryName(){
    if (! $summary) {
	if    ($DEBUG_DISTBASE)	{ $summary = '.debug.html';}
	elsif ($DEBUG_CACHE)		{ $summary = '.cache.html';}
	elsif ($DEBUG_HTTP_HEADER)	{ $summary = '.header.html';}
	elsif ($partial) 		{ $summary = '.partial' .'.html';}
	elsif ($category)		{ 
	    
	    $summary = $category . $divide_devel . '.html';
	}
	else       			{
	    my($sec, $min, $hour, $date, $mon, $year, $dofweek, $dayofyear, $summertime) 
		= gmtime();
	    $summary
		= sprintf("%04d%02d%02d.html", $year + 1900, $mon + 1, $date); }}
    if ($output_directory)		{
	$summary_leaf	= $summary;
	$summary_tmp	= $output_directory .'/.'. $summary;
	$summary	= $output_directory .'/' . $summary;
    }
  }
sub GetSFProjectString($$){
    my($url)	  = shift;
    my($distbase) = shift;
    # Looking for the latest version? Download cmusphinx-ru-5.2.tar.gz (157.7 MB)
    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2] , ' ', $url,"\n"  if $DEBUG_VERSION_DIR;
    my $w3m_command = 'w3m -T TEXT '. $url;
    my ($name); # cmph- etc
    my ($ver) = '0.0';
  print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' w3m_command(', $w3m_command,') <- ', "\n" if $DEBUG_VERSION_DIR;
    open(W3M, "$w3m_command |") || print STDERR 'problem'."\n";
    while(<W3M>) {
#	print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' ', $_;
	if (/Looking for the latest version/) {
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' (', $distbase,') ',$_ if $DEBUG_VERSION_DIR;
	    if (/Download $distbase-([0-9.]+)\.t/ ) {
	    $ver = $1;
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' ver(', $ver,') <- ',"\n" if $DEBUG_VERSION_DIR;
	    }
#	    if (CompareVersion($ver, $max_version) > 0) { $max_version = $ver;}
	}
    }
    close(W3M);
    return ($ver);
}
sub GetSFProjectCandidate($$$) {  # line 2922 to 2979
    my ($SFProject) = shift;
    my ($DISTBASE) = shift;
    my ($dist_name) = shift;
    ###        return ($master_site, $returnCode, @candidate);

    my (@candidate);
        $#candidate = -1;  # make it empty
    my ($returnCode);
    my ($status, $location);
    my ($master_site) = $SF_SITE. $SFProject;
    $master_site =~ s,http://sourceforge,https://download.sourceforge,;

    print STDERR sprintf("%4d ", __LINE__ ), ' SFProject: ',  $SFProject."\n" if $DEBUG_SF;
    my ($subDirectory) = $DISTBASE;
    $subDirectory =~ s/-/_/g;
    my (@directory_candidate);

    my ($directory_candidate) = GetMasterSiteSubDirectory($master_site, $dist_name);
    if ($directory_candidate) {
    push (@directory_candidate, $directory_candidate);}
    push (@directory_candidate,
	    'http://download.sourceforge.net/projects/' .$SFProject . '/files/'. $subDirectory .'/',
	            'https://sourceforge.net/projects/' .$SFProject . '/'      . $subDirectory .'/',
	            'https://sourceforge.net/projects/' .$SFProject . '/files/',
	            'https://sourceforge.net/projects/' .$SFProject . '/files/'. $subDirectory .'/',
	            'https://sourceforge.net/projects/' .$SFProject . '/files/'. $SFProject .'/',
#                   'https://sourceforge.net/projects/cmusphinx/files/sphinxtrain/1.0.8/
	    'http://download.sourceforge.net/project/'  .$SFProject . '/files/',
	    'http://download.sourceforge.net/project/'  .$SFProject,
	    'http://download.sourceforge.net/projects/' .$subDirectory  . '/files/',
            'http://download.sourceforge.net/projects/' .$SFProject . '/files/',
     );
    my ($iteration) = 0;
    foreach my $site (
	@directory_candidate) {
	if ($site eq '' ) {
	    print STDERR sprintf("%4d ", __LINE__ ), ' <', (caller 0)[3], ">\t:", (caller 0)[2], ': ', $site, " \$site is empty\n"; next;}
	    ($status, $location) = CheckHeader($site);
		 print STDERR sprintf("%4d ", __LINE__ ), '(',$iteration++,') ', $site, ') status('. $status.") -> \n"  if $DEBUG_HTTP_HEADER;
	    if ($status == 200 ) {
	    ($returnCode, @candidate) = ParseDirectory($site, $DISTBASE, 0);
		 print STDERR sprintf("%4d ", __LINE__ ), 
		     ' (ParseDir) master_site(', $site, ') status('. $status. ') '. 'candidate('.$#candidate.') -> '. join (' ', @candidate), "\n"  if $DEBUG_SF;
	    }
	    if ($#candidate > 0 ) { $master_site = $site ;last;}
	my ($candidate);
	    if ($status == 200 ) {
		my ($candidate) = GetSFProjectString($site, $DISTBASE);
		if ( $candidate != '0.0') {push(@candidate, $candidate); last;}
		my ($dir) = VersionedDirectory($DISTBASE, $site);
		if ($dir == -1) { next;}
		print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ': dir (', $dir, ')',"\n" if $DEBUG_VERSION_DIR;
#		my (@can);
		($returnCode, @candidate) = ParseDirectory($dir, $DISTBASE, 0);
#		push(@candidate, @can);  # not overwrite but add
#		if ($returnCode == -1) {
#		    ($candidate) = GetSFProjectString($site, $DISTBASE);
#		    if ( $candidate != '0.0') { push(@candidate, $candidate); last; }
#		} else { last ;	}
	    }
#	return ($returnCode, @candidate);
	}    # end foreach

	if ($#candidate  < 0 && (my ($alternative) = $SourceForgeAlternative{$DISTBASE} ) ) {
	foreach my $site (split ';', $alternative) {
		print STDERR sprintf("%4d ", __LINE__ ), ' (Alterna.) master_site(', $site, ') status('. $status.") -> \n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($site, $DISTBASE, 0);
		print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;	
	    $master_site = $site;
	}
	}
    return ($master_site, $returnCode, @candidate);
}
sub MonthToDigit ($){
    my ($version) = shift;
print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ', $version, ' --> ' if $DEBUG_DISTBASE;
    my ($month, $digit);
    if ($version =~ /[0-9]+(-[jfmasond][a-z][a-z]-).*/ ) { 
	$month = $1;
	$digit = $MonthToDigit{$month};
	$version =~  s/([0-9]+)-[jfmasond][a-z][a-z]-([0-9]+)/$1$digit$2/;
    }
print STDERR  $version,"\n" if $DEBUG_DISTBASE;
    return $version;
}
sub VersionedDirectory ($$){
    # like SourceForge, there are directory that holds versioned
    # sub directories. For example
    # https://sourceforge.net/projects/aegis/files/aegis/
    # (1) To check if it is a directory like this
    # (2) Returns URL for the sub-direcory which holds latest version
    my ($distbase) = shift;
    my ($url) = shift;
    if ( $url eq '') { return -1 ; }
    my ($host);
    if ($url =~ m|(http.*:://[^/]+)/| ) { $host = $1; }
    my($ver) = '0.0';
    my($max_version) = $ver;
#    my (@candidate) = ();

    # get the plain text format by w3m command,
    # w3m -T TEXT  https://sourceforge.net/projects/aegis/files/aegis/ > /tmp/1.txt
    # and searches for /^[ ]+[0-9.][ ]+$/ line to get version directory name.

    my $w3m_command = 'w3m -T TEXT '. $url;
    my ($name); # cmph- etc
    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' w3m_command(', $w3m_command,') <- ', $_ ,"\n" if $DEBUG_VERSION_DIR;
    open(W3M, "$w3m_command |") || print STDERR 'problem'."\n";
    while(<W3M>) {
	print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' ', $_  if $DEBUG_VERSION_DIR;
	if (                   /^([\t ]+)([0-9.]+)[\t ]+/  ||
			       /^[\t ]*($distbase)*[-]*([0-9.]+)[\t ]+/ ||
			       m|.(DIR).\s+([0-9.]+)/| ) {
	    $ver = $2;
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' ver(', $ver,') <- ', $_ if $DEBUG_VERSION_DIR;
	    if (CompareVersion($ver, $max_version) > 0) { $max_version = $ver;}
	    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' max_ver(', $max_version,') <- ', $_ if $DEBUG_VERSION_DIR;
	}
    }
    close(W3M);
    if ($ver eq '0.0') { return -1;}
    my ($return) = $url.$name.$max_version.'/';
    print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], ' return (', $return,')',"\n" if $DEBUG_VERSION_DIR;
    return $return;
}
## ----------------------------------------
##         M A I N   R o u t i n e    Main
#  ----------------------------------------
#$SIG{'INT'} = 'SingintHandler';
my ($PackageStart);	# For timing, not used for now
my ($PackageEnd);

my ($argv)    = join ' ', @ARGV;	# to show at Stats()
getopts( 'c:Dd:fFhM:mP:p:rRs:S:tT:uvVwWx:y:', \%opts);

if ($opts{'b'}) { $option_batch++;}	# used be default, not implemented
if ($opts{'c'}) { $category = $opts{'c'}; $full_list++;}
if ($opts{'d'}) { $output_directory = $opts{'d'};}
if ($opts{'D'}) { $disable_digit_ending_package++;}	# not useful now
if ($opts{'f'}) { $full_list++;}
if ($opts{'F'}) { $FindDepends++;}	# not implemented yet
if ($opts{'M'}) { $maintainer = $opts{'M'} }
if ($opts{'m'}) { $merge_mode++;}	# shows ForMergeCount (can be always true ?)
if ($opts{'p'}) { $pkgsrc = $opts{'p'};}
if ($opts{'P'}) { $selected =  $opts{'P'}; $partial++;}

if ($opts{'r'}) { $include_reverse++};
if ($opts{'R'}) { $skip_rubygems_check++};
if ($opts{'s'}) { $starting =  $opts{'s'}; $skip_until_match++; $partial++;}
if ($opts{'S'}) { $summary  =  $opts{'S'};}
if ($opts{'x'}) { 
    ParseDebug($opts{'x'});
}

if ($opts{'y'}) { $divide_devel = $opts{'y'};}# (ad-hoc :-) '': none,  1: [A-Za-o]*,  2: p*,  3: [q-z]*
    SummaryName();  # should be before Usage() is called, and after opts c, x, S, C 
if ($opts{'h'}) { Usage($summary, $output_directory); exit 0; }

if ($opts{'t'}) { $MeasureTime++; }	# not implemented yet
if ($opts{'T'}) { $LimitedList = $opts{'T'};}	# ditto
if ($opts{'u'}) { $update_pkgsrc++;}
if ($opts{'v'}) { $verbose++;}
if ($opts{'V'}) { ShowVersion(); exit;}
if ($opts{'w'}) { $include_wip++};	# not implemented yet
if ($opts{'W'}) { $update_wip++};	# not implemented yet

if (($category eq '' ) && ($selected =~ m|(.*)/(.*)| ) ||
    ( $ARGV[0] =~ m|(.*)/(.*)| ) ) {
    $category = $1; $selected = $2;
    $SINGLE_PACKAGE++;
} elsif ( $category eq '' && $selected eq '' ){
    my ($pwd) = `pwd`;
    chomp($pwd);
    $pwd =~ m|([^/]+)/([^/]+)$|;
    $category = $1; $selected = $2;
    $SINGLE_PACKAGE++;

	$pkgsrc = `pwd` ;
	chomp($pkgsrc);
	$pkgsrc =~ s|[^/]+/[^/]+/*$||;
#	print STDERR sprintf("%4d ", __LINE__), 'now pkgsrc ', $pkgsrc, "\n";
}
if ($SINGLE_PACKAGE) {
   $skip_rubygems_check++;
   $summary_tmp = '/dev/null';
} else {
    print STDERR sprintf("%4d ", __LINE__), ' *** category (', $category, ') package (', $selected, ")\n";
}
my($gems_name);

$gems_name = CheckRubyGems( $skip_rubygems_check );
if ($gems_name eq '')  { die "Please install misc/rubygems\n" ;}

if (CheckEnvironment() == -1) { die "Please install necessary package(s).\n" ;}

if ( -f $MaturedList) {
    print STDERR sprintf("%4d ", __LINE__ ), " *** Reading filename: ", $MaturedList," -> ";
    printf STDERR "%d lines read\n", SkipTooOld($MaturedList);
}

my(%DIVIDE_DEVEL) = ( 1, '[A-Za-o].*',
		      2, 'p.*',
		      3, '[q-z].*' );


chdir $pkgsrc;
AddSpecialPattern();

if ( $summary_tmp ne '/dev/null') {
print STDERR sprintf("%4d ", __LINE__ ), 'output directory is '. $output_directory ."\n";
print STDERR sprintf("%4d ", __LINE__ ), "output to $summary\n";
}

opendir(PKGSRC, '.') || print STDERR sprintf("%4d ", __LINE__ ), " problem reading directory $pkgsrc: $! \n",
    __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n" ;
my (@categories) = readdir(PKGSRC);
close(PKGSRC);

ReadTodo($pkgsrc);

#my ($no_avail) = $output_directory . '/.NOT_AVAILABLE' ;
#if ($category) { $no_avail = $output_directory . '/.NOT_AVAILABLE-'. $category. '.html';}
#open(NO_AVAIL, "> $no_avail") || print STDERR "Problem opening $no_avail for write:$!\n";

my ($pwd) = `pwd`;
$pwd =~ chomp($pwd);

open(SUMMARY, "> $summary_tmp") || print STDERR "Problem opening $summary for write: $!\n";
PrintHeader($full_list);	# controlls style for highlighting
# --------------------------------------------------------------
##                   F O R E A C H   D I R
# --------------------------------------------------------------
foreach my $dir (@categories) {  # major loop to the line 3261 ... some 400 lines 	# MAJOR_FOREACH
    my ($console_color) = '';

    if ( ! -d $dir)		{ next;}
    if ($dir =~ /^\.$/ )	{ next;}
    if ($dir =~ /^\.\.$/ )	{ next;}
    if ($dir =~ /^CVS$/ )	{ next;}
    if ($dir =~ /^mk$/ )	{ next;}
    if ($dir =~ /^licenses$/ )	{ next;}
    if ($dir =~ /^template$/ )	{ next;}
    if ($dir =~ /^distfiles$/ )	{ next;}
    if ($dir =~ /^bootstra$/ )	{ next;}
    if ($dir =~ /^packages$/ )	{ next;}
    if ($dir =~ /^meta-pkgs$/ )	{ next;}
    if ($include_wip == 0 && $dir =~ /^wip$/ ) { next;}
    if ($category && ($dir ne $category )) { next;} # skip other than category if specified
    
    if (! -d $dir) 	 {next;}
#
# cvs update  if -u is found
    if ($update_pkgsrc) {
    print STDERR sprintf("%4d ", __LINE__ ), " Updating $pkgsrc -> $dir\n";
    if ($dir) {
	open(CVS_UPDATE, "(cd $pkgsrc; cvs update -dPA $dir)|") 
	|| print STDERR "problem executing cvs update\n";
	while (<CVS_UPDATE>) {
	    # do nothing
	}
	close(CVS_UPDATE);
	}
    else {
	print STDERR "cvs update requested but no dir specified, skipping\n";
    }
    }
    if ($dir =~ /^doc$/ )	{ next;}  # doc is to be updated (if -u), so check later here

#   -----------------------------
##    R E A D   D I R E C T O R Y
#   -----------------------------
    opendir(CATEGORIES, "$pwd/$dir") || 
	print STDERR "problem opendir $pwd/$dir: $! \n",
	__FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n" ;
    my (@PackageNames) = readdir(CATEGORIES);
    closedir(CATEGORIES);

    printf STDERR "%4d     ---  (%s) ---\n", sprintf("%4d ", __LINE__ ), $dir if ! $SINGLE_PACKAGE;

    # set regexp in %FAMILY
    ClassifyPackage(@PackageNames);

    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1a) pattern: ', $SpecialPatternY,"\n" if $DEBUG_FAMILY;
# ------------------------------------
##    F O R   E A C H  P A C K A G E     ( to line 3297, some 350 lines )
#  ------------------------------------
    foreach my $PackageName (@PackageNames) { 					# MAJOR_FOREACH
	my ($candidate);
	    $#candidate = -1;	# initialize as empty;
	my ($console_string) = '';

	$MasterSiteStat = 0;
	$NoMasterSites = 0;
	$HomePageStat = 0;
	$SpecialPatternY = ''; # By-Package Pattern
	#  ----- By package status  -----
	my ($HomePageStatus);	#  for listing   See (TODO) section for the moment
	my ($MasterSiteStatus);	#  for listing
	my ($PackageStatus);	#  for Stats

#	DoEachPackage( );
#sub 	DoEachPackage( ) {
	$#CANDIDATE = -1;	# make it empty
#    if ( ! -d $PackageName)	{ next;}
    if ($PackageName =~ /^.$/ )	{ next;}
    if ($PackageName =~ /^..$/ ) { next;}
    if ($PackageName =~ /^CVS$/ ) { next;}
    if ($PackageName =~ /^suse/i ) { next;}		# skip suse emulation
     # --------------------------------
     ##   S K I P P I N G   S P E C I A L
     #  --------------------------------
    if ($PackageName =~ /gst-plugins0.10/) { next;}     # skip old versions:
    if ($selected ne '' && $selected ne $PackageName) { next;} # -s option 
    if ($skip_until_match) {
	if ($PackageName =~ /$opts{'s'}/ ) { $skip_until_match = 0; }
	else { next;}
    }
     # ------------------------------------------------------------------------
     ## ---------------  D I V I D E    pkgsrc/devel  Special  (skip if matched)
     #  If category is devel, check if it is in the particular part of three parts.
     #  This is to speed up by parallel execution if make -j multiple requested 
     #  -------------------------------------------------------------------------
	my ($develPattern) = $DIVIDE_DEVEL{$divide_devel};
	if ( $category eq 'devel'	&&
	     $divide_devel  		&&  
	     ! ($PackageName =~ /^$develPattern/)  ) {
print STDERR sprintf("%4d ", __LINE__ ), 
	     ' category ',    $category,
	     ' divide_devel ', $divide_devel,
             ' PackageName ' , $PackageName,
	     ' DIVIDE_DEVEL{$divide_devel} ', $DIVIDE_DEVEL{$divide_devel}, " :Skipping..\n"
if $DEBUG_DIVIDE_DEVEL;
	     next;}

print STDERR sprintf("%4d ", __LINE__ ), 
	     ' category ',    $category,
	     ' divide_devel ', $divide_devel,
             ' PackageName ' , $PackageName,
	    ' DIVIDE_DEVEL{$divide_devel} ', $DIVIDE_DEVEL{$divide_devel}, " :Processing..\n"
	if $DEBUG_DIVIDE_DEVEL;
     ## ------  E N D    D I V I D E    pkgsrc/devel  Special 
    my ($this_PackageDir) = $dir.'/'.$PackageName;
    my ($reverse)   = 0;	# for displaying flag

    $PackageStart = time();
    my($thispwd) = `pwd`;    # not really effectively used
    $thispwd =~ chomp($thispwd);
#    print STDERR '   ***', __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ )," " ;
    if ( ! -d $this_PackageDir ) { print STDERR "Not directory: $thispwd -> $this_PackageDir\n"; next;}

    my ($Makefile) = $this_PackageDir.'/Makefile';
    if ( ! -f "$Makefile")        { print STDERR "Makefile does not exist or is not file\n"; next; }
	# ----------- I M P O R T A N T    S T A T I S T I C S   V A L U E -------------
    $TotalChecked++;			# becoming serial so on (to count)
    #  ----------------------------------------------------------------------------

	if ( grep (/^$PackageName$/, @SkipTooOld) > 0 ) { $SkipTooOld++; next; }
	# ------------- P a c k a g e  n a m e ---------
	# -------------------
	## Read Makefile and get several VALUES

	($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $TEXLIVE, $EGG_PACKAGE)
	= ReadMakefile($dir, $PackageName);
	$PKGVERSION		= GetVariableValue ($dir, $PackageName, 'PKGVERSION_NOREV');
	my ($location); # destination to be directed
	my ($dist_name) = GetVariableValue ($dir, $PackageName, 'DISTNAME');
        $dist_name .= GetVariableValue ($dir, $PackageName, 'EXTRACT_SUFX');

	if              ( $HOMEPAGE eq '')	{ $HomePageStat = '';}
	elsif (! CheckDNS($HOMEPAGE))		{ $HomePageStat = 'DNS';}
	else {($HomePageStat, $location) = CheckHeader($HOMEPAGE); }
	
    $PKGBASE	= GetVariableValue ($dir, $PackageName, 'PKGBASE');
	#  ----------------------------------------------------------------
    if ($TEXLIVE) { $StatTEXLIVE++; next;} # skip texlive for the moment
    # GEM_PACKAGE and %FAMILY
	my ($p);
    if ( ($p = $FAMILY{$PackageName} ) && $GEM_PACKAGE ) {	# MAJOR_IF_THEN_ELSE
	print STDERR sprintf("%4d ", __LINE__ ), 'p (', $p,') PackageName (',$PackageName, ") \n" if $DEBUG_FAMILY;
	$DISTBASE = GetVariableValue ($dir, $PackageName, 'DISTNAME');
	$available = GetGemFamilyVersion($PackageName, $gems_name);

    } elsif ($GEM_PACKAGE) {   # MAJOR_IF_THEN_ELSE
	$DISTBASE = GetVariableValue ($dir, $PackageName, 'DISTNAME');

	$DISTBASE =~ s/-[0-9.-]+//;
	$available = GetGemVersion($DISTBASE, $gems_name);
	$http_code = 0;
	print STDERR sprintf("%4d ", __LINE__ ), ' HOMEPAGE: ', $HOMEPAGE,"\n" if $DEBUG_RUBYGEM;
        # ------------  not $GEM_PACKAGE to 3181 (some 130 lines)
    } else {	# MAJOR_IF_THEN_ELSE
#  -----------------------------------------------------------------------	
	print STDERR sprintf("%4d ", __LINE__ ), '#candidate: ', $#candidate, ' DISTBASE: ', $DISTBASE,"\n" if $DEBUG_GNOME;

	my($PKGNAME)	= $PKGBASE . '-'. $PKGVERSION;
	$DISTBASE	= GetDistBase($dir, $PackageName, $PKGBASE, $PKGVERSION, $PKGNAME);
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> (DISTBASE) ', $DISTBASE, "\n" if $DEBUG_DISTBASE;
	if ($DISTBASE =~ /.*-$/ ) { $DISTBASE =~ s/-$//;}  # aspell6-ca- -> aspell6-ca # 20150411
	$META_PACKAGE	= GetVariableValue ($dir, $PackageName, 'META_PACKAGE');
	if ($META_PACKAGE =~ /yes/i) { $MetaPackage++; next;}

	@MASTER_SITES	= GetMasterSiteCandidate($dir, $PackageName, $DISTBASE);
	$MASTER_SITE = $MASTER_SITES[0];  # XXXXXXXXXXXXXX

	$URL =  $MASTER_SITE;
	$URL =~ s/ .*//;	# Pick the very first word
	chomp($URL);
	if ( my ($p) = $FAMILY{$PackageName} ) {
	    print STDERR sprintf("%4d ", __LINE__ ), '(PackageName) ', $PackageName, ' (p) ', $p, "\n" if $DEBUG_FAMILY;
	    $SpecialPatternY = $p ;
	}
	# ---------------------------------------------------------------
	if ($MASTER_SITE =~ m|http://downloads.sourceforge.net/sourceforge/([^/]+)/| ) {
	    $SFProject = $1; }
	# ----------------------------------------------------------------
	##            S O U R C E F O R G E   S P E C I A L
	#  ----------------------------------------------------------------
	if ($SFProject && $SFProject != -1 ) {			# MAJOR_IF_THEN_ELSE
	    my($returnCode);
	    ($URL, $returnCode, @candidate) = GetSFProjectCandidate($SFProject, $DISTBASE, $dist_name);
	    if ($returnCode == 0 ) { $returnCode = '200';}; # 0 is good news = 200
 print STDERR sprintf("%4d ", __LINE__ ),
' (PKGBASE) ', $PKGBASE, 'URL: ', $URL, ' returnCode (', $returnCode, ")\n" if $DEBUG_SF;
	# ---------------------------------------------------------------
	##    N O T   S O U R C E F O R G E
	} else {						# MAJOR_IF_THEN_ELSE
	#  ---------------------------------------------------------------
	    if ($MASTER_SITE eq '') { 
printf STDERR  ColorString('red', 
	sprintf("%20s %15s %4s Skipping, MASTER_SITES is empty\n",
		$PKGBASE, '('.$DISTBASE.')', '('.  __LINE__ .')')
    	)
       ; $NoMasterSites++;   next;}
	    
# Get Max version available at MASTER_SITES

print STDERR sprintf("%4d ", __LINE__ ), 
		' URL: ', $URL,"\n",'      HOMEPAGE: ', $HOMEPAGE, "\n"
		if $DEBUG_MASTER_SITES_LISTING;
		
	my($http_code, $master_site) = GetMasterSiteSub($PKGBASE, $DISTBASE, $URL, $HOMEPAGE);
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $http_code, ' Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;
	    $returnCode = -1;

	 if ($HS_PACKAGE) {					# MAJOR_IF_THEN_ELSE
	$master_site = "http://hackage.haskell.org/package/". $DISTBASE;
	print STDERR sprintf("%4d ", __LINE__ ), "HS_PACKGE: ", $MASTER_SITE ,"\n" if $DEBUG_DISTBASE;
	}

	if ($http_code eq 'DNS' ) {
	    $MasterSiteStat = 'DNS';
	}
	if ($#candidate == -1  && ($master_site =~ /gnome\.org/ ) ) {
	    ($returnCode, @candidate) = GnomeSpecial($DISTBASE, $master_site);
	}
	    print STDERR sprintf("%4d ", __LINE__ ), '#candidate: ', $#candidate, ' DISTBASE: ', $DISTBASE, ' master_site ', $master_site, "\n" if $DEBUG_GNOME;

#        if ($#candidate == -1 || $candidate[0] eq '0.0' ){
#	    # good for RBtool
#	($returnCode, @candidate) = UpperDirectory($DISTBASE, $master_site);
#	} else {
#		print STDERR sprintf("%4d ", __LINE__ ), 'candidate: ', $candidate[0], "\n" if $DEBUG_GNOME;
#	}
       
	    print STDERR sprintf("%4d ", __LINE__ ), '#candidate: ', $#candidate, ' DISTBASE: ', $DISTBASE,"\n" if $DEBUG_GNOME;

	 if ($#candidate < 0  && $master_site =~ m|(.*)/[0-9._]+/*$|) {	# MAJOR_IF_THEN_ELSE
	    my ($upper) = $1;
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE with ending digit: ', $master_site,"\n" if $DEBUG_DIGIT;
	    ($returnCode, @candidate) = ParseUpperDirectory($PackageName, $upper);
	 }								# MAJOR_IF_THEN_ELSE
         # ------------------- back to upper level --
	print STDERR sprintf("%4d ", __LINE__ ), 'candidate: ', $#candidate, 'http_code: ', $http_code, "\n" if ($DEBUG_SF || $DEBUG_MASTER_SITES_LISTING );
# 1 is good for www/librest07 but bad for many occasion:
	if ($#candidate < 1  && $master_site && $http_code ne 'DNS' ) {
	    print STDERR sprintf("%4d ", __LINE__ ), $#candidate, "\n" if $DEBUG_MASTER_SITES_LISTING ;
	    ($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE, 0);
	}
# 1 is good for www/librest07 but bad for many occasion:
	print STDERR sprintf("%4d ", __LINE__ ), $#candidate, "\n" if $DEBUG_MASTER_SITES_LISTING ;
        if ($#candidate < 1  && $HOMEPAGE) {
	    ($returnCode, @candidate) = ParseDirectory($HOMEPAGE, $DISTBASE, 0);
	    print STDERR sprintf("%4d ", __LINE__ ), $HOMEPAGE," checked.\n" if $DEBUG_DISTBASE;
	}
	print STDERR sprintf("%4d ", __LINE__ ), $#candidate, "\n" if $DEBUG_MASTER_SITES_LISTING ;
	print STDERR sprintf("%4d ", __LINE__ ), $#candidate, "\n" if $DEBUG_SF;
	print STDERR sprintf("%4d ", __LINE__ ), $#candidate, "\n" if $DEBUG_GITHUB;
	if ($#candidate == -1  && $HOMEPAGE && $HOMEPAGE =~ /github.com/ ) {
	    # ------------------ GitHubChanges (3327)
	    ($returnCode, @candidate) =  GitHubChanges($DISTBASE, $HOMEPAGE);
	    print STDERR sprintf("%4d ", __LINE__ ), $HOMEPAGE," checked.\n" if $DEBUG_DISTBASE
	}

	 } # if ($SFProject) { -> else				# MAJOR_IF_THEN_ELSE

 print STDERR sprintf("%4d ", __LINE__ ),
	    '(DISTBASE) ', $DISTBASE, 
	    ' returnCode: ', $returnCode,
	    ' candidate#: ', $#candidate,
	    "\n" if ( $DEBUG_DISTBASE || $DEBUG_MASTER_SITES_LISTING );
print STDERR sprintf("%4d ", __LINE__ ),
    join (' ', @candidate) ,"\n" if $DEBUG_DISTBASE;
	if ($#candidate == -1  &&  ( $MASTER_SITE  =~ m|http://pypi.python.org/| )) {
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE if $DEBUG_DISTBASE;
	    ($returnCode, @candidate) = ParseDirectory(
		"https://pypi.python.org/pypi/".$DISTBASE, $DISTBASE, 0);}

	if ($#candidate == -1  && $EGG_PACKAGE) {
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE if $DEBUG_DISTBASE;
	    ($returnCode, @candidate) = ParseDirectory(
		"https://warehouse.python.org/project/".$DISTBASE, $DISTBASE, 0);}
	print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE, ' DISTBASE ', $DISTBASE, ' cand (', $#candidate,")\n" if $DEBUG_GITHUB;
	if ($#candidate  < 1 && ($MASTER_SITE =~ m|github.com/|) ) {
	    # ------------------ GitHubSpecial (3352)
	    ($returnCode, @candidate) = GitHubSpecial($DISTBASE, $MASTER_SITE, $dir, $PackageName);
	}
	if ($#candidate  < 1 && ($HOMEPAGE =~ m|github.com/|) ) {
	    # ------------------ GitHubSpecial on HOMEPAGE
	    ($returnCode, @candidate) = GitHubSpecial($DISTBASE, $HOMEPAGE, $dir, $PackageName);
	}
## http://pypi.python.org/pypi/zope.interface
#	if ($#candidate  < 1 && ($HOMEPAGE =~ m|pypi.python.org/pypi|) ) {
#	    # ------------------ on HOMEPAGE
#	    ($returnCode, @candidate) = pypiSpecial($DISTBASE, $HOMEPAGE, $dir, $PackageName);
#	}

	print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE, ' DISTBASE ', $DISTBASE, "\n" if $DEBUG_DISTBASE;
	print STDERR sprintf("%4d ", __LINE__ ),  $DownLoadAlternative{$DISTBASE}, "\n" if $DEBUG_ALTERNATIVE;
#	if ($DISTBASE =~ /^pyobjc/ ) { ($MASTER_SITE, $line ) = pyObjcSpecial($DISTBASE);
#	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE,"\n" if $DEBUG_DISTBASE;
#		($returnCode, @candidate) = ParseDirectory($MASTER_SITE, $DISTBASE, 0);
#	}
	if ( $DownLoadAlternative{$DISTBASE}) {			# MAJOR_IF_THEN_ELSE
	    $MASTER_SITE= $DownLoadAlternative{$DISTBASE};
	    print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> MASTER_SITE ', $MASTER_SITE,"\n" if $DEBUG_ALTERNATIVE;
		($returnCode, @candidate) = ParseDirectory($MASTER_SITE, $DISTBASE, 0);

	}							# MAJOR_IF_THEN_ELSE  ----------------------
	    push(@CANDIDATE, @candidate);
	    $available = PickFromCandidate(@CANDIDATE);
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $http_code, 'Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;        

	# --------------  # $GEM_PACKAGE else end
    }								# MAJOR_IF_THEN_ELSE # $GEM_PACKAGE else end
    # ------------------- back to top level of main
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $MasterSiteStat, 'Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;        

    my($to_list) = 1;
	my ($DISTBASE_TO_SHOW)	= $DISTBASE;
	my ($PKGBASE_TO_SHOW)	= $PKGBASE;
	$DISTBASE_TO_SHOW =~ s/$PKGBASE/=/;
	if ( $DISTBASE_TO_SHOW ne '='){
	    ($PKGBASE_TO_SHOW) =~ s/$DISTBASE/ =>/;}

    $console_string .= 
    sprintf  ("%20s %15s %4s Now: %8s -> %7s Todo: %5s ", 
	$PKGBASE_TO_SHOW, '('.$DISTBASE_TO_SHOW.')', '('.sprintf("%4d ", __LINE__ ).')', $PKGVERSION,  $available, $TODO{$PKGBASE});
print STDERR sprintf("%4d ", __LINE__ ), 
    ' (SimpleFallBack) master_site(', $MASTER_SITE, ') returnCode('. $returnCode.") -> available(". $available.")\n"  if $DEBUG_FALLBACK_SIMPLE;

print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '>:', (caller 0)[2], 'available: ', $available, ' returnCode: ', $returnCode,
' @candidate: ', "\n------------------\n", join("\n", @candidate),"\n" if $DEBUG_CANDIDATE;

	if (( $available eq '0.0' || $available eq '' || $returnCode == -1 ) && $#candidate == -1 && ! $candidate[0] ne '0.0' ) {
	    ($returnCode, @candidate) =  ParseDirectory($MASTER_SITE, $DISTBASE, 1);
	    $available = PickFromCandidate(@candidate);
print STDERR sprintf("%4d ", __LINE__ ), 
    ' (SimpleFallBack) master_site(', $MASTER_SITE, ') returnCode('. $returnCode.") -> available(". $available.")\n"  if $DEBUG_FALLBACK_SIMPLE;

	}
	# ------------------------------------------------------------
	##   F I N D   T H E   C O N D I T I O N   T O   L I S T (404/403/550/DNS)
	# ------------------------------------------------------------
    print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. ' -> '. $available. "\n" if $DEBUG_CACHE;
    if      ( CompareVersion( $available, $PKGVERSION) >  0 )		{ $Found++; $console_color = 'black'; # for stats and just below # MAJOR_IF_THEN_ELSE 
    } elsif ( $TODO{$PKGBASE} &&
	      CompareVersion( $TODO{$PKGBASE}, $PKGVERSION) != 0 )	{ $TODO_LIST++; $to_list = 1; $console_color = 'green';
    } elsif ( CompareVersion( $available, $PKGVERSION) == 0 )		{ $to_list = 0;	 $OK++; $console_color = 'blue'; # OK, disable to list
    } elsif ( CompareVersion( EditVersion($DISTBASE, $available), $PKGVERSION) == 0 ) { $to_list = 0;	 $OK++; $console_color = 'blue'; # OK, disable to list
    } elsif ( $available eq '0.0' || $available eq '') {
	$console_color = 'magenta';
	if    ($MasterSiteStat == 404 )	{ $NotFound++; }
	elsif ($MasterSiteStat == 403 )	{ $Forbidden++;}
	elsif ($MasterSiteStat == 550 )	{ $Forbidden++;}
	elsif ($MasterSiteStat == 'DNS' )	{ $DNSProblem++;}
	elsif ($NoMasterSites )		{ $NoMasterSitesStats++;}

	else				{ $NotAvailable++ ; }
	if ( $full_list == 0 ) { $to_list = 0; $NotListed++;} # Unable to find recent version
    } elsif ( CompareVersion( $available, $PKGVERSION) < 0 )    	{
	if ($include_reverse == 0 ) { $to_list = 1; }
	$Reverse++; $reverse++; 
    } else {
	$NotListed++;
	print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. '  av('. $available. ') PKG(', $PKGVERSION,")\n" if $DEBUG_COUNT;
    }
    print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. ' -> '. $available. "\n" if $DEBUG_CACHE;
    DistbaseCacheUpdate($DISTBASE, $URL, $available);
	# ------------------------------------
	##  O U T P U T    H T M L    L I N E
	# ------------------------------------
    if ($http_code) { $available = $http_code; $to_list = 1; $console_color = 'magenta'; }

    # Let background user (usually gray)  if MAINTAINER is not set.
    my($css);
    if ($MAINTAINER =~/pkgsrc-users@/) { $css = " class=\"user\"";} else { $css = '';}
    if ($reverse) { $css = " class=\"reverse\"";}

#print STDERR sprintf("%4d ", __LINE__ ), ' HOMEPAGE: ', $HOMEPAGE,"\n" if $DEBUG_DISTBASE;
    my($homepage) = $PKGBASE;     # if HOMEPAGE is empty, don't use href, set for that
	print STDERR sprintf("%4d ", __LINE__), "HOMEPAGE: ", $HOMEPAGE, "\n" if $DEBUG_DISTBASE;
    if ($HOMEPAGE) { $homepage = sprintf "<a href=\"%s\">%s</a>", $HOMEPAGE, $PKGBASE;}
    else           { $homepage =                  "<span class=\"grey\"> ". $PKGBASE .'</span> ';}
       my ($HomePageString); # This is used after $homepage to show status in HTML
    if    ($HomePageStat eq ''  ) { $HomePageString =  "<span class=\"grey\"> (empty)</span>";}
    elsif ($HomePageStat != 200 ) { $HomePageString =  "<span class=\"pale_dns\"> (". $HomePageStat.')</span> ';}
    my ($MasterSiteString); # decorate if there is a problem on URL
    if ($MasterSiteStat != 200 && $available eq '0.0' ) { $MasterSiteString =  "<span class=\"pale_dns\">(". $MasterSiteStat.')</span> ';}
	# -----------  E D I T         M A I N T A I N E R  -------
    $MAINTAINER =~ s/\@NetBSD.org//i;
    $MAINTAINER =  substr($MAINTAINER, 0, 13);  # pkgsrc-users@ 13 letters

    $output_record = sprintf "<tr%s>
<td><a href=\"%s\">%s</a></td>
<td>%s</td>
<td>%s</td>
<td><span class=\"grey\">-&gt;</span></td><td>%10s</td><td>%s</td><td>%s</td><td>%10s</td>
<td>%s</td></tr>\n", 
	    $css,
	    $CVSweb. $this_PackageDir,	$this_PackageDir,
	    $homepage. $HomePageString,
	    $PKGVERSION, 
	    GreyDigitIf00($http_code, $available),
	    $TODO{$PKGBASE},
	    $MAINTAINER, 
	    ColorUrlDigit($URL). $MasterSiteString;
    if ($to_list == 1) {
	print SUMMARY $output_record;
#	print STDERR "Needs update";
    } else { 
	$console_string .= "not-to-list";
	$console_color = 'yellow';
    }
    if ($available eq '0.0') { 
#	print NO_AVAIL $summary;
#	print STDERR  ' fail to get ver. -> ', $URL;
#	$NotAvailable++;
	}
	$console_string .= "\n";
    print STDERR ColorString( $console_color, $console_string);
    my($Elapsed) = time() - $PackageStart;
    RecordMaxElapsed($Elapsed);
    } #     foreach my $PackageName (@PackageNames) { 		# MAJOR_FOREACH
    # ------------------------------------------
    ##    E N D    F O R   E A C H  P A C K A G E 
    # -----------------------------------------
    
#} #end sub DoEachPackage
# --------------------------------------------------------------
##          E N D  F O R   F O R E A C H   D I R
# --------------------------------------------------------------
  }   #     foreach my $dir (@categories) {			# MAJOR_FOREACH
    Stats($start_time, $argv);
close(SUMMARY);
if ( $summary_tmp ne '/dev/null') {
    print STDERR "renaming $summary_tmp to $summary\n";
    system ("mv $summary_tmp $summary");
}
exit;
__END__
## Local Variables:
## mode: outline-minor
## outline-regexp: "^[ 	]*sub\\s-+\\([-[:alnum:]+_:]+\\)\\|^\\(?:my\\|our\\)\\s-+\\([$@%][-[:alnum:]+_:]+\\)\\s-*=\\|^[ 	]*package\\s-+\\([-[:alnum:]+_:]+\\);\\|^=head[0-9][ 	]+\\(.*\\)\\|^=cut\\>\\|^[	 ]*\\#\\# \\|^[	 ]*\\# -----------\\|.*# MAJOR_IF_THEN_ELSE\\\|.*MAJOR_FOREACH\\|.*compareVersion\(\\|[^#].*@candidate\||.*S T R I P"
## End:

; please note I have copy in ~/.emacs-sub/time-stamp-setup.el
(require 'time-stamp)
(add-hook 'write-file-hooks 'time-stamp)
(setq time-stamp-active t)
(setq time-stamp-time-zone "UTC")
(setq time-stamp-format "%04y-%02m-%02d %02H:%02M");
(setq time-stamp-start "$VERSION = \"") ;
(setq time-stamp-end "\"") ;
(setq time-stamp-line-limit "10") ; ; default is 8
