#!/usr/pkg/bin/perl
use strict;
use Net::DNS;	# net/p5-Net-DNS
# For emacs setup, see the bottom of this file (or evaluate them)
my($VERSION);
$VERSION = "2015-02-04 00:27" ; # written by emacs time-stamp
$VERSION .= ' UTC';
my ($MAXSTRINGLEN) = 30;	# Max length of string to pick version
			        # avoid problem on devel/py-ipython-10
#   requirement:
#       net/curl
#       misc/rubygems.
#       security/mozilla-rootcert installed and following executed.
#        #  mozilla-rootcerts install
#use pkgsrc::Dewey;
#       dewey_cmp(lhs, op, rhs);
#       dewey_match(pattern, package);

my($my_name) = $0;
   $my_name =~ s#(.*)/##;

my ($pkgsrc) = '/usr/pkgsrc';	#
my ($summary);			# output file name
my (%TODO);			# found info in doc/TODO, $TODO{$package} = $version

# output to tmp name and rename it at the end of execution
my ($summary_tmp);
my ($summary_leaf);	# only for stats output

my ($DEBUG_CURL_LISTING);
my ($DEBUG_CURL);
my ($DEBUG_DISTBASE);
my ($DEBUG_VER_PATTERN) = 0;
my ($DEBUG_EVAL_PATTERN);
my ($DEBUG_HTTP_HEADER);
my ($DEBUG_CACHE);
my ($DEBUG_CURL_CACHE);
my ($DEBUG_COUNT);
my ($DEBUG_RUBYGEM);
my ($DEBUG_SF);
my ($DEBUG_STATS);
my ($DEBUG_DIVIDE_DEVEL) = 0;
my ($DEBUG_FAMILY) = 0;
my ($DEBUG_SPECIAL_PATTERN);

my ($curl_head)		= 'curl -k -I --location --insecure';
my ($curl_head_secure)	= 'curl -k -I --location --insecure -s';
my ($curl_list)		= 'curl -k -l --location --insecure ';
my ($curl_list_secure)	= 'curl -k -l --location --insecure -s';

#    $curl_head		= 'w3m -dump_head';
#    $curl_head_secure	= 'w3m -dump_head';
#    $curl_list		= 'w3m -dump_source';
#    $curl_list_secure	= 'w3m -dump_source';

# w3m has a problem on archiver/unalz
## modena@makoto 22:35:59/150120(~)% w3m -dump_head http://www.kipple.pe.kr/win/unalz/
## unable to get local issuer certificate: accept? (y/n)

# stats:
my ($Found)	= 0;
my ($OK)	= 0;
my ($NotFound)	= 0;
my ($Forbidden)	= 0;
my ($Moved)	= 0;
my ($NotListed) = 0;
my ($TODO_LIST) = 0;
my ($DNSProblem) = 0;
my ($Reverse)   = 0;	# for stats
my ($MetaPackage)  = 0;	
my ($TotalChecked)	= 0;
my ($NotAvailable)	= 0;
my ($NoMasterSites)	= 0;
my ($NoMasterSitesStats)= 0;
my ($NoHost)	= 0;	# DNS query failed
my ($SkipTooOld) = 0;  # count
my ($StatTEXLIVE) = 0;

#my ($MasterSite404);		# by package status
my ($SkippedEndingDigit) = 0;	# (Stats): Skip flag: Packagename ending with digit;
my ($SkippedEndingDigitStats) = 0;	# (Stats): Skip count: Packagename ending with digit;
my ($StatsMasterSite404) = 0;	# for count
my ($PackageStatus) = 0;	# (http_code) Each package has only one status, and the collect for stats. 

my ($MasterSiteStat);		# by package status
my ($HomePageStat);		# by package status
my ($StatsHomePageStat) = 0;	# for count

#my ($PKGNAME, $PKGVERSION, $MASTER_SITES);
my ($CVSweb) = 'http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/';

# opts, option related variables
my ($option_batch) = 0;
my ($category);
my ($verbose) = 0;
my ($selected) = '';	# Check this package only
my ($DISTNAME);
my (@SUFIX) = qw(.tar.gz tar.bz2 tar.xz .zip);
my ($skip_until_match) = 0;
my ($starting) = 0;
my ($partial) = 0;  # not whole execution, don't write to normal summary file
my ($include_wip) = 0;	# whether includes wip(1) or not(0)
my ($update_wip) = 0;	# cvs update before execution
my ($include_reverse) = 0;	# whether includes confusing entry (default no)
my ($output_leaf)	= 'pkgsrc/check-update';
my ($output_URL)	= 'http://www.ki.nu/~makoto/';
my ($output_directory)	= $ENV{'HOME'}.'/public_html/'. $output_leaf;
my ($update_pkgsrc) = 0;	# cvs update prior to execution
my ($full_list) = 0;
my ($disable_digit_ending_package) = 0;	# Change logic and name
my ($MeasureTime) = 0;
my ($FindDepends) = 0;
my (@TimeTopTen);
my ($LimitedList);
my ($merge_mode) = 0;
my ($maintainer) = 0;		# output for the maintainer
my ($divide_devel) = '';	# execute divided manner on devel category

my (@CurlCache);		# keep the last time listing resuls;
my ($LastCurl);			# The curl command when above cache stored

my ($start_time) = time();
our(%opts);
# ----------------------------------------
#      N O  D E V E L O P M E N T 
# ----------------------------------------
my (@SkipTooOld) = qw(xview-lib estic zenicb tex2rtf gkermit kermit gturing bridge-hands ccxstream weewm Cg-compiler);

# Simple means $distbase-([0-9.]+)-(extran string not necessary)..
my (@SimplePattern)  = qw(gmpc 
renpy crimson crack-attack hands flags autotrace simulavr hal 
sign parchive cabextract celt auctex ntp mercury-srcdist);
#my (@Debian) = qw(signing-party);

my ($SpecialPatternY);
# key is DISTBASE (but please note DISTBASE itself is extracted by this script)    
my (%SpecialPattern) = (
    'cairo',		'$line =~ s/.*$distbase(-5c){0,}-([0-9.]+[0-9]).*/$2/ ;',  # games/crimsonfields
    'potrace',		'$line =~ m|.*$distbase[_-]([0-9.]+)[.-].[a-z].*|; my($rrr) = $1 ;',

#   Next line is SimplePattern equivalent
#   'crack-attack',	'$line =~ s/.*$distbase-([0-9.]+).*/$1/ ;',
    'amavisd',		'$line =~ s/.*$distbase-([0-9.]+\.[0-9]+\.[0-9]+)/$1/ ;',
    
#                                    '$distbase' here doesn't make it
#                                     v
    'signing-party',	'$line =~ s/.*signing-party_([0-9.]+)-.*/$1/ ;',
    'Cython',		'{$line =~ m|.*$distbase-([0-9]\.[0-9]+\.[0-9])|; $line = $1 ;}',
#    'NovaWM', 	        '$line =~ s/.*$distbase-([0-9.]+).*/$1/ ;', #   -0.8.1_alpha.tar.bz2 (716.3 kB)
#    'sign',		'$line =~ s/The latest version is ([0-9.]+),/$1/ ;', #  security/sign  1-bit ui</a><br --> 
    'lzop',		'$line =~ s/.*lzop-([0-9.]+)\..*/$1/;',
    'synce',		'$line =~ s/.*synce-gvfs-([0-9.]+)\..*/$1/;',
    'iozone',		'$line =~ s/.*iozone([0-9_.]+)\.tar.*/$1/;',
    'CPAN',		'$line =~ s/.*CPAN-([0-9_.]+)\.tar.*/$1/;',
    'pyproj',		'$line =~ s/.*v([0-9_.]+)rel/$1/;',#
    );

my(%SourceForgeAlternative) = qw (
    burn	http://sourceforge.net/projects/gsburn/files/burn/burn-0.4.1/ 
    acidrip	http://sourceforge.net/projects/acidrip/files/acidrip/0.14%20-%20Your%20two-wheeled%20knife/
    dirac	http://sourceforge.net/projects/dirac/files/dirac-codec/Dirac-1.0.2/
    gxine	http://sourceforge.net/projects/xine/files/gxine/0.5.908/
    libassetml	http://sourceforge.net/projects/ofset/files/libassetml/1.2.1/
    xmltv	http://sourceforge.net/projects/xmltv/files/xmltv/0.5.66/
    OroboROX	http://sourceforge.net/projects/rox/files/OroboROX/0.9.8/
    pcmanfm	http://sourceforge.net/projects/pcmanfm/files/PCManFM%20%2B%20Libfm%20%28tarball%20release%29/PCManFM/
     gtkglarea	http://sourceforge.net/projects/openev/files/gtkglarea/gtkglarea-1.2.3/
);

# PKGBASE to $DISTBASE association Special (ending digit is main customer)
my(%DISTBASE) = qw (
    basic256	basic256
    nhc98	nhc98src
    );
   
my(%DownLoadAlternative) = qw (
    openbox	http://openbox.org/wiki/Openbox:Download
    oroborus	http://ftp.debian.org/debian/pool/main/o/oroborus/
    3proxy	http://3proxy.ru/download/
    arp-scan	http://www.nta-monitor.com/tools-resources/security-tools/arp-scan
    skampi	http://liinwww.ira.uka.de/~skampi/download.html
    abcMIDI	http://ifdo.pugmarks.com/~seymour/runabc/top.html
    xmms-crossfade	http://www.eisenlohr.org/xmms-crossfade/download.html
    ast-ksh	http://www2.research.att.com/sw/download/
    Event-ExecFlow	http://www.exit1.org/download/event-execflow
    Event-RPC	http://www.exit1.org/download/event-rpc
    pyproj	https://github.com/jswhit/pyproj/releases/
    mercury-srcdist	http://dl.mercurylang.org/index.html
    LuaJit	http://luajit.org/download.html
    LuaJit2	http://luajit.org/download.html
    basic256	http://sourceforge.net/projects/kidbasic/
    nhc98src	https://www.haskell.org/nhc98/download.html
    ); #

# for print/xpdf-arabic etc
my (@MonthToDigit) = qw (
    xpdf-arabic
    xpdf-chinese-simplified
    xpdf-chinese-traditional
    xpdf-cyrillic
    xpdf-greek
    xpdf-hebrew
    xpdf-japanese
    xpdf-korean
    xpdf-latin2
    xpdf-thai
    xpdf-turkish
    );

my (%MonthToDigit) = qw (
    -jan- 01
    -feb- 02
    -mar- 03
    -apr- 04
    -may- 05
    -jun- 06
    -jul- 07
    -aug- 08
    -sep- 09
    -oct- 10
    -nov- 11
    -dec- 12
    );
# arp-scan is the same as HOMEPAGE (strange)
# Now global variables in Makefile
    my ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $TEXLIVE, $EGG_PACKAGE) ;

    my ($PKGBASE, $PKGNAME, $DISTBASE, $MASTER_SITE, $META_PACKAGE);
    my (@MASTER_SITES);
    my ($available, $http_code);
    my ($URL);
    my ($output_record);	# string to output HTML
    my ($PKGVERSION);

    my ($max_version);
    my ($returnCode, @candidate);

sub SpecialPattern($$){
    my($distbase) = shift;
    my($line) = shift;
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $line, ' Pattern ', $SpecialPattern{$distbase}, "\n" if $DEBUG_EVAL_PATTERN ;
#    print STDERR sprintf("%4d ", __LINE__ ), $distbase,' -> ', $SpecialPattern{$distbase}, "\n" if $DEBUG_EVAL_PATTERN ;
    my($return) ;
    eval $SpecialPattern{$distbase} ;

    # not to return garbage
    if ( !($line =~ m|^[0-9._-]+$| ) ){  $line = '';}
    $line =~ y|_|.|;
    print STDERR sprintf("%4d ", __LINE__ ), ' === >', ' (', $line,")\n" if $DEBUG_EVAL_PATTERN ;
    return $line;
}

my (@CANDIDATE);	# collecting candidate of the version

my (%DISTBASE_CACHE);   # push(@DISTBASE_CACHE, \[$distbase, $version, $timestamp, $refcount]);


my (@DontSkipEndingDigit)  = qw (eric4 fltk2);
# 100 -> 1.0.0 type
my (@THREE) = qw(gtkglarea falcons-eye quakedata abcde binkd bwwtex cryptopp dirb sr-examples pscpug DatLib DatUtil ROMbuild xzip libdsk libgeotiff ploticus-examples shapelib proj vs mlvwm lwm biew);
                                               # vs <- lang/sr-exaples
# 300 -> 3.0  unzip
# 600 -> 6.0  zip
my (@ZIP) = qw (zip unzip fMSX);

# 100 -> 1.00 type
my (@VER32) = qw(gigbase gku bunzip wxRemind qkc atasm bicom bww2tex cgic PDF par jpilot-syncmail asterisk-perl pyserial datlib dutil mdiff rbuild rinfo zident adodb lzma lzop upx piewm sawfish wmctrl wmakerconf mesch gigabase plnode uno);

# 31 -> 3.1 # 3370 -> 3.370 devel/cfitsio
my (@VER22) = qw(doc2html cfitsio lcc ctags);	# doc2html

#  Device-Gsm Device-Modem Device-SerialPort 
#  0.46 -> 0.4.6
my (@DOT2) =  qw(pixmap HTTP-Lite XML-Elemental yencode xworm gambatte_src Class-Std icecastq clex);

# 1.1103  -> 1.11.03
# IO-CaptureOutput
# 	p5-sybperl 	2.16 	->	2.171	2.18
#    dot is inserted after 3rd digit
my (@DOT3) = qw (Data-AMF DateTime-Calendar-Mayan Template-Plugin-DateTime xsane IO-CaptureOutput sybperl gdal-lib SQL-Abstract-Limit CatalystX-CRUD-Model-RDBO BSD-Resource File-Temp FreezeThaw Module-CPANTS-Analyse util-linux ExtUtils-ModuleMaker SWF-File);


# 633 -> 6.33.0 InsertDot
# util-linux <- (libuuid)
# devel/p5-ExtUtils-CBuilder)  0.280220 --> 0.28.02.20
my (@DOT32) = qw (ExtUtils-CBuilder);

# audio/hydrogen 	hydrogen 	0.9.6.1 	->	0.9.61
my (@DOT1111) = qw (hydrogen);
#     devel/p5-Contextual-Return   0.004007 -> 0.004.007
my (@DOT4) = qw (Class-Inner Contextual-Return Data-Section Class-Inner Return-Value Software-License Test-MinimumVersion  PPIx-Utilities Return-Value Mixin-ExtraFields MooX-Cmd hydrogen);

# 20131217 -> 2013.12.17
my (@DELDOT422) = qw (sqtop ast-ksh);
# 2.1.3 -> 2.13
my (@DELETEDOT) = qw (nkf libssh zidrav4unix);

# devel/p5-OOTools 	p5-OOTools 	2.30 	<-	2.3

my (@ADDZERO) = qw(XML-AutoWriter Nmap-Parser xmahjongg Hash-Case Module-Starter OOTools Async-Interrupt Convert-UUlib JSON-XS IO-Util Module-Build Catalyst-Plugin-Authentication);
my (@ADDZERO2) = qw(Convert-BER Spreadsheet-ParseExcel Test-Reporter Sub-Uplevel Curses-UI-POE DateTime DateTime-Format-Builder DateTime-Format-Strptime 	CGI-FormBuilder DBIx-Abstract CPAN Devel-Symdump Test-Differences );
# 1.001000 -> 1.0010 Class-C3-Componentised);

my (@DELETE02) = qw(Class-C3-Componentised);
    
# 1.001002 -> 1.1.2
my (@DOT133) = qw (DBIx-Class-Cursor-Cached IO-Pipeline Mixin-ExtraFields);
# gdal-lib-1111 -> 1.11.1
my (@DOT121) = qw (gdal);

# devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.44
my(@SPRINTF1_3) = qw(Devel-FindRef);
# www/p5-Reaction 	p5-Reaction 	0.2.5 	->	0.002005
my (@SPRINTF) = qw (Reaction);

# devel/p5-enum 1.016 -> 1.016, 1.10 -> 1.100
my (@V1000) = qw (enum);

# p5-HTTP-Request-Form (HTTP-Request-Form) (1513 ) Now:  0.9.5.2 ->   0.952 Todo:       
my (@SingleDigit) = qw(HTTP-Request-Form);

# archivers/hpack 79 -> 0.79
my (@ZeroDot) = qw (hpack);
    
# Term-ReadLine-Perl5
my (@DIGIT_IN_NAME) = qw(cal3d emacs-w3m x2x w3m nec2c xnec2c asn1c py34-unittest2py3k p5-GD-Graph3d popa3d tex-algorithm2e sqlalchemy-i18n hdf5-c++ );
#
my (@DISTBASE_DIGIT) = qw(perl5 hdf5 libosip2 xfwm4 Catalyst-View-Mason2);
use Getopt::Std;
##    -------------------------
##    P R O T O T Y P E S
##    -------------------------

sub Usage($$); 
sub CheckHeader($);
sub CheckDNS($);
sub ColorUrlDigit($);
sub CollectCandidate($);
sub CompareVersion($$);
sub CountPerid($);
sub DistbaseCacheUpdate($$$);
sub DistbaseCacheQuery($$);
sub ExpandURL($$);
sub GetDistBase($$$$$);
sub GetMasterSiteCandidate($$$);
sub GetMasterSiteSub($$$$);
sub GetVariableValue($$$);
sub GetTODOinfo($$);
sub GetWipInfo($);
sub GreyDigitIf00($$);
sub Moved($);
sub Http301core($$);
sub MasterSiteType($);
sub MasterSiteVersion($);
sub ParseDirectory($$);
sub PkgVersion($);
sub PrintHeader($);
sub ReadMakefile($$);
sub ReadTodo($);
sub RecordMaxElapsed($);
sub Stats($$);
sub ValidateMasterSite($$);

##    -------------------------
##    S U B R O U T I N E S
##    -------------------------
sub Usage($$) {
    my($summary) = shift;
    my($output_directory) = shift;
    $summary =~ s,$output_directory/,,;
    my($home) = $ENV{'HOME'};
    $output_directory =~ s,$home/,~/,;
    
    print <<HELP;
Check the version is current
Synopsis:
   check-update	[-C] [-D] [-f] [-h] [-r] [-t] [-u] [-v] [-V] [-w] [-W]
		[ -c category] 
		[ -d directory-to-output ]
		[ -p pkgsrc-directory ]	 
		[ -P package-only ] 
		[ -s pattern-to-start]
		[ -S summary-output]
		[ -T limited-list-name ]
		[ -x debug_items ]
		[ -y [123]]
Where:
   -c : category (implies -f)
   -d : output directory (default $output_directory)
   -D : Skip ending digit package (default: don't skip) #'
   -f : (full) output Recent-version-unavailable too.
        (default: output that part to different file)
   -h : (help) show this message (putting after options may show default value)
   -P : check particular package
   -p : pkgsrc directory (default /usr/pkgsrc)
   -r : Include Reverse results in listing
   -s : skip until match 
   -S : summary output file (default $summary)
   -t : Measure time (not implemented yet)
   -T : Accepts Limited List filenamel  (not implemented yet)
   -u : cvs update before checking the category
   -v : verbose
   -V : show version
   -w : include wip (not implemented yet)
   -W : Check the version in wip (not implemented yet)
   -x : activate DEBUG_ITEMS (examples: -x dh, -x a, etc.) where:
        a:  Enable all
        d:  distbase
        e:  eval pattern
        f:  debug classify (found family)
        h:  http header
        c:  cache  (URL and distbase combination to version)
        C:  curl command
        l:  curl listing
        n:  count (not implemented yet)
        p:  SpecialPattern debug
        s:  sourceforge
        S:  stats number
        r:  rubygems
    -y : Select one of split devel category out of 1, 2 or 3 where: 
        1:  for '[A-Za-o]*'
        2:  for 'p*'
	3:  for [q-z]*
HELP
}

sub CheckHeader($) {
# returns (http) ($status, $location) 
    my($URL) = shift;
    my($status) = 'none';
    my($location);
    $URL =~ s|-https:|https:|;
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $URL, ' -> ', $_  if $DEBUG_HTTP_HEADER ;
    if ($URL eq '') { print STDERR sprintf("%4d ", __LINE__ ), " \$URL is empty\n"; return -1;}
    
    open(CURL, "$curl_head $URL 2>&1|") || print STDERR '*** ',sprintf("%4d ", __LINE__ ),' Problem on ', (caller 0)[3],"\n";
    while (<CURL>){
	chomp();
	if ( /Server denied you to change to the given directory/) {
	    $status = 550;
	    print STDERR sprintf("%4d ", __LINE__ ), ' ', $URL, ' -> ', $_  if $DEBUG_HTTP_HEADER ;
	}
	elsif ( /Connection refused/ ) { $status = 'Refused';} 	# # curl: (7) Failed to connect to www.opensync.org port 80: Connection refused
	elsif ( /^HTTP\S+ (\d+) / ) {  # \S+ has '/1.1' or so
	    print STDERR sprintf("%4d ", __LINE__ ), ' ', $URL, ' -> ', $_  if $DEBUG_HTTP_HEADER ;
	    $status = $1;} 
	elsif ( /^Location: (\*)/) {
	    $location = $1;
	}
    }
    close(CURL);
    print STDERR sprintf("%4d ", __LINE__ ), '  *** returning: ', $status, " ***\n"  if $DEBUG_HTTP_HEADER ;
    return ($status, $location);
}
sub CheckDNS($) {
    my ($hostname) = shift;
    $hostname =~ s,-https://,,;
    $hostname =~ s,http://,,;
    $hostname =~ s,https://,,;
    $hostname =~ s,ftp://,,;
    
    $hostname =~ s,([^/]+).*,$1,;
print STDERR sprintf("%4d ", __LINE__ ), ' hostname -> ', $hostname, "\n" if $DEBUG_HTTP_HEADER ;
    my $res   = Net::DNS::Resolver->new;
    my $query = $res->search($hostname);
#
#      if ($query) {
#          foreach my $rr ($query->answer) {
#              next unless $rr->type eq "A";
#              print $rr->address, "\n";
#          }
#      } else {
#          warn "query failed: ", $res->errorstring, "\n";
#      }
    if ( ! $query ) {
	print STDERR sprintf("%4d ", __LINE__ ), ' DNS query failed', "\n" if $DEBUG_DISTBASE ;
	$NoHost++; return 0;
    }
    return 1;
}
# http://basercms.net/packages/download/basercms/3.0.6.1
#
my(%FAMILY);
sub ClassifyPackage(@) {
    # classify packages into Normal or Family
    # Family means like 
    #	x11/gtksourcereview[ 23]
    #	databases/postgresql9[0123]-server
    #	py-ipython01[03]
    # Normal is others, even ending with digit(s)
    my (@packages) = @_;
    foreach my $p (@packages) {
	my ($with_digit)	= 0 ;
	my ($family)	= 0 ;

	# gcc and lua special 
	if ($p =~ /(gcc|lua|php|python)([0-9])([0-9])$/) {
	    my ($lang)  = $1;
	    my ($major) = $2;
	    my ($minor) = $3;
	    if ($lang =~ /python/ ) { $lang = 'Python';}
	    $FAMILY{$p} = '$version =~ s/.*'. $lang .'-('.$major.'\.'.$minor.'\.[0-9]+)\.t.*/$1/' ; 
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1) family: ', $p, "\n" if $DEBUG_FAMILY;	    
	#     py26-html-docs
	#     python-2.6.9-docs-html.tar.bz2
	} elsif ($p =~ /py([0-9])([0-9])-html-docs$/) {
	    my ($major) = $1;
	    my ($minor) = $2;
	    $FAMILY{$p} = '$version =~ s/.*python-('.$major.'\.'.$minor.'\.[0-9]+)-docs-html.*/$1/' ; 	    
	# normal numbering
	} elsif ($p =~ /(.*)([0-9])$/) { 
	    my ($pybody) = $1 ;
	    my ($suffix) = $2;
#	    my ($py) = $pybody;    $py =~ m|py|;
	    my ($body) = $pybody;  $body =~ s|py-||;
	    if ( $body && grep (/^$body[0-9]*([0-9])$/, @packages ) > 1 ) {  
		$FAMILY{$p} = '$version =~ s/.*'.$body.'[-]*('.$suffix.'[0-9_.]+).*/$1/' ;
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (1) family: ', $p, "\n" if $DEBUG_FAMILY;
	    }
#	        print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (2) family: ', $p, "\n" if $DEBUG_FAMILY;
	}

	# Sandwitched number
	elsif ($p =~ /(.*)([0-9])(.*)/) { 
	    my ($one, $two, $three) = ($1, $2, $3);
	    if ($one && $two && grep (/^$one[0-9]+$three$/, @packages) > 1 ) {
		$FAMILY{$p} = '$version =~ s/.*'.$one.'[-]*('.$two.'[0-9_.]+)'.$three.'.*/$1/' ;
		print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '>  (3) family: ', $p, "\n" if $DEBUG_FAMILY;;
	    }
	}
    }
}
sub ColorUrlDigit($) {
    my($url) = shift;
    my($target);
    $url =~ s/^-http/http/;	# strip leftmost -
    # pick digit only leaf name from URL.
    $url =~ m|(.*/)([v0-9.]+/$)|;
    my($higher) = $1;
    my($digit)  = $2;
    # some strange case, $url does not include http:// line, in such case, just returun the original
    if (! ($url =~ m|^http.*://| ||
	   $url =~ m|^ftp.*://|     )) {
	$target = $url; }
    elsif ($higher && $digit )  {
    $target = sprintf ("<a href=\"%s\">%s</a><a class=\"rev\" href=\"%s\">%s</a>",
		      $higher, $higher,
		      $higher.$digit,  $digit);}
    else { $target = sprintf ("<a href=\"%s\">%s</a>", $url, $url);}
    return $target;
}
sub CollectCandidate($){
    # collect all the candidate of version string in @CANDIDATE;
}
# sub CompareVersion($$){
#     my($lhs) = shift;
#     my($rhs) = shift;
# #    print STDERR sprintf("%4d ", __LINE__ ), ' **** ', $lhs, ' ', $rhs, "\n";
#   return dewey_cmp($lhs, 'cmp', $rhs);
# }
sub CompareVersion($$){
    # return 1 if big, 0, if equal, -1 if small.

    my ($a) = shift;
    my ($b) = shift;

    $a =~ s/pre/\./;
    $b =~ s/pre/\./;

    # get the number of digit split by '.'
    my (@a) = split '\.', $a;
    my (@b) = split '\.', $b;
# get bigger count  of '.', in $a or $b
    my ($max_count) = $#a + 1;
    if ($#b + 1 > $max_count) { $max_count = $#b + 1 ;}
# Following two lines are devel/py-mock special :-)
    if ($a eq '1.0.1' && $b eq '1.0b1') { return 1; }
    if ($a eq '1.0b1' && $b eq '1.0.1') { return -1; }
    #    for my $i ( 0 .. $max_count - 1 ) {
    if ($a[0] > $b[0]) { return  1;}
    if ($a[0] < $b[0]) { return -1;}
    if ($a[0] == $b[0]) {
#	if ( $max_count = 1 ) {return 0;}
	if ($a[1] > $b[1])    { return  1;}
	if ($a[1] < $b[1])    { return -1;}
	if ($a[1] ne $b[1])   { 
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[1]: ', $a[1], ' $b[1]: ', $b[1], "\n";
	    return $a[1] cmp $b[1];}  # arc-5.21[op]
	if ($a[1] == $b[1]) {
#	    if ( $max_count = 1 ) { return 0;}
	    if ($a[2] =~ /rc/ )   {$a[2] =~ s/rc.*//;}
	    if ($b[2] =~ /rc/ )   {$b[2] =~ s/rc.*//;}
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[2]: ', $a[2], ' $b[2]: ', $b[2], "\n";
	    if ($a[2] eq '' and $b[2] == 0 || $a[2] eq 0 and $b[2] eq '' ) { return 0;}
#	    print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[2]: ', $a[2], ' $b[2]: ', $b[2], "\n";
	    if ($a[2] > $b[2] )    { return  1;}
	    if ($a[2] < $b[2] )    { return -1;}
	    if ($a[2] ne $b[2])    { return $a[2] cmp $b[2];}
	    if ($a[2] == $b[2] )   {
#		print STDERR sprintf("%4d ", __LINE__ ), ' ', '$a[3]: ', $a[3], ' $b[3]: ', $b[3], "\n";
#		if ($a[3] eq '' && $b[3] eq '' ) { return 0;}
		if ($a[3] =~ /rc/ )   {$a[3] =~ s/rc.*//;}
		if ($b[3] =~ /rc/ )   {$b[3] =~ s/rc.*//;}
		if ($a[3] > $b[3] )    { return  1;}
		if ($a[3] < $b[3] )    { return -1;}
		if ($a[3] eq '' and $b[3] == 0 || $a[3] eq 0 and $b[3] eq '' ) { return 0;}
#		print STDERR sprintf("%4d ", __LINE__ ), ' >', $a, '< ?= >', $b, '< $a[3]: ', $a[3], ' $b[3]: ', $b[3], "\n";
		if ($a[3] == $b[3] )   { return  $a cmp $b ;}
        }
	}
    }
}

# Nown for maintainer only
sub CountPeriod($){
    my ($string) = shift;
    my (@count) = split '\.', $string;
    return $#count;
}
# -------------------------
sub DistbaseCacheUpdate($$$) {
    my($distbase) = shift;
    my($version)  = shift;
    my($master_site)  = shift;
   # push(@DISTBASE_CACHE, \[$distbase, $version, $timestamp, $refcount]);
    my ($refcount);
    my ($timestamp) = time();
    my ($ptr);
    if ($ptr =  $DISTBASE_CACHE{$distbase.$master_site}) {	
	$DISTBASE_CACHE{$distbase.$master_site} = [$version, $timestamp, $ptr->[2] ] ; 
	print STDERR  sprintf("%4d ", __LINE__ ). ' (U) '. $version. ' '. $timestamp.  $ptr->[2]. " " if $DEBUG_CACHE;
    }
    else      {	
	$DISTBASE_CACHE{$distbase.$master_site} = [$version, $timestamp, 1         ] ;
	print STDERR  sprintf("%4d ", __LINE__ ). ' (N) '. $version. ' '. $timestamp.  '1'.         " " if $DEBUG_CACHE;
    }
}
sub DistbaseCacheQuery($$) {
    my($distbase) = shift;
    my($master_site) = shift;
    my ($ptr); 
    if ($ptr = $DISTBASE_CACHE{$distbase.$master_site}) {
	$ptr -> [1] = time();
	$ptr -> [2]++;
	my ($version) = $ptr -> [0];
	printf( STDERR "%4d (Q) %10s %5s", sprintf("%4d ", __LINE__ ), $distbase, $version )  if $DEBUG_CACHE;
	return $version ; } # $version
        printf( STDERR "%4d (Q) %10s %5s", sprintf("%4d ", __LINE__ ), $distbase,  -1 )  if $DEBUG_CACHE;    
    return -1;
}
sub EditVersion($$) {
    my ($distbase) = shift;
    my ($version) = shift;
    if ( ! ($version =~ /[0-9]/    ) ) { return -1;}
#   if ( ! ($version =~ /$distbase.*[0-9]/) ) { return -1;} 

print STDERR "\n", sprintf("%4d ", __LINE__ ), ' (2) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;

	    if (grep (/^$distbase$/, @THREE) > 0 ) { $version = Three($version, 3);}
	    if (grep (/^$distbase$/, @ZIP) > 0 )	{ $version = Zip($version, 3);}
	    if (grep (/^$distbase$/, @VER32) > 0 ) { $version = Three($version, 2);}
	    if (grep (/^$distbase$/, @VER22) > 0 ) { $version = Two($version);}
print STDERR sprintf("%4d ", __LINE__ ), ' (3) <', (caller 0)[3] ,'> ', $version, ' --> '  if $DEBUG_DISTBASE;
    	    if (grep (/^$distbase$/, @DOT2)  > 0 ) { $version = InsertDot($version, 2);}
       	    if (grep (/^$distbase$/, @DOT3)  > 0 ) { $version = InsertDot($version, 3);}
       	    if (grep (/^$distbase$/, @DOT32)  > 0 ) { $version = InsertDot2($version, 2,4);}
	    if (grep (/^$distbase$/, @DOT133)  > 0 ) { $version = InsertDot133($version);}
	    if (grep (/^$distbase$/, @DOT4)  > 0 ) { $version = InsertDot($version, 4);}
	    if (grep (/^$distbase$/, @DOT121)  > 0 ) { $version = InsertDot121($version);}
	    if (grep (/^$distbase$/, @DELETEDOT)  > 0 ) { $version = DeleteDot($version, 2);}
	    if (grep (/^$distbase$/, @ADDZERO)  > 0 ) { $version = AddZero($version, 1);}
	    if (grep (/^$distbase$/, @ADDZERO2)  > 0 ) { $version = AddZero($version, 2);}
	    if (grep (/^$distbase$/, @DELDOT422)  > 0 ) { $version = DelDot422($version, 5, 8);}
            # www/p5-Reaction 	p5-Reaction 	0.2.5 	->	0.002005
	    if (grep (/^$distbase$/, @SPRINTF)  > 0 ) { $version = VerSprintf($version, 0,1,  2,3, 5,3 );}
	    # devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.44
	    if (grep (/^$distbase$/, @SPRINTF1_3)  > 0 ) { $version = LeftJustify($version,1,3);} # count(1.3)
    	    if (grep (/^$distbase$/, @SingleDigit)  > 0 ) { $version = SingleDigit($version);}
    	    if (grep (/^$distbase$/, @DELETE02)  > 0 ) { $version = Delete02($version);}
            if (grep (/^$distbase$/, @ZeroDot)  > 0 )  { $version = '0.'. $version;}

print STDERR sprintf("%4d ", __LINE__ ), ' (4) ', $version, "\n" if $DEBUG_DISTBASE;
#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_, "\n", $distbase, ' --> ', $version,"\n";
    return $version;
}

sub ExpandURL($$) {		# <- Not used now (?)
    my ($upper) = shift;
    my ($leaf)  = shift;
    my ($full);
    my ($host)  = $upper;
    $host =~ s|^(-http://[^/]*)/*|$1|;
    $host =~  s|^(http://[^/]*)/*|$1|;
    $host =~   s|^(ftp://[^/]*)/*|$1|;

    if      ( $leaf =~ m|^http://| || $leaf =~ m|^ftp://|  ) {
	$full = $leaf;
    } elsif ( $leaf =~ m|^/|) {
	$full = $host . $leaf;
    } else {
	$full = $upper . $leaf;
    }
    return $full;
}
# ----------------------------------------------------------------------
# This routine to find the Base name of distribution file.
# It will be used to separate the version portion from distribution file.
# ----------------------------------------------------------------------
    # --------------------------------------
    #      0-1. if (-) is onlye one in PKGNAME, remove - and after
    #      if resultant string in DISTNAME, take it as DISTBASE
    # --------------------------------------
sub GetDistBaseSimple($$){
    my ($pkgname)	= shift;
    my ($distname)	= shift;

    my (@partial) = split('-', $pkgname);
    if ($#partial != 1 ) { return '';}
    $pkgname =~ s|-$partial[1]||;
    if ($distname =~ /$pkgname/ ) {
	print STDERR sprintf("%4d ", __LINE__ ), '(distname) ', $distname,
' (pkgname) ', $pkgname, "\n" if $DEBUG_DISTBASE;
	return $pkgname;}
}
# Some special case: (letter v )
# 862   (PKGNAME)        p5-Algorithm-CheckDigits-1.3.0
#       (PKGBASE)        p5-Algorithm-CheckDigits
#       (DISTNAME)       Algorithm-CheckDigits-v1.3.0
#       (PKGVERSION)     1.3.0

sub GetDistBasePerlModule($$$){
   my ($pkgbase)	= shift;
   my ($pkgname)	= shift;
   my ($distname)	= shift;

   my ($distbase) = $distname;
       $distbase =~ s|-v*[0-9.]+||;
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;   
   if ( $pkgname =~ m|p5-(.*)-v*([0-9.]+)| && $distbase eq "$1" ) {
       print STDERR sprintf("%4d ", __LINE__), '<', (caller 0)[3], '> pkgname :', $pkgname,
	   ' distname ', $distname, "\n" if $DEBUG_DISTBASE;
       return $distbase;}
   else { return '';}
 }
sub GetDistBasePythonModule($$$){
   my ($pkgbase)	= shift;
   my ($pkgname)	= shift;
   my ($distname)	= shift;

   my ($distbase) = $distname;
       $distbase =~ s|-[0-9.]+||;
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;   
   if ( $pkgname =~ m|py[23][347]-(.*)-([0-9.]+)| && $distbase eq "$1" ) {
       print STDERR sprintf("%4d ", __LINE__), '<', (caller 0)[3], '> pkgname :', $pkgname,
	   ' distname ', $distname, "\n" if $DEBUG_DISTBASE;
       return $distbase;}
   else { return '';}
 }
# distname ast-ksh-2012-08-01
# pkgname  
sub GetDistBaseReduce($$$$){
    my ($pkgbase)	= shift;	# (static-)ast-ksh
    my ($pkgname)	= shift;	# (static-)ast-ksh-201208012
    my ($pkgversion)	= shift;	# 201210801
    my ($distname)	= shift;	# ast-ksh-2012-08-01

    my ($value)		= '';
    my ($distversion)	= $distname;	# ast-ksh-2012-08-01

    $distversion	=~ s/$pkgbase-//;	# 2012-08-01
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> distversion: ', $distversion, "\n" if $DEBUG_DISTBASE;    
    $distversion	=~ s/-//g;		# 20120801
    if ($distversion == $pkgversion) { 
	$value = $pkgbase ;
	print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> value: ', $value, "\n" if $DEBUG_DISTBASE;
    } else {
	my ($datestring) = $distname;	# ast-ksh-2012-08-01
	my ($candidate)  = $distname;	# ast-ksh-2012-08-01
	$datestring =~ s|.*(\d{4})-(\d{2})-(\d{2})|$1$2$3|;	# 20120801
	$candidate =~  s|-\d{4}-\d{2}-\d{2}||;			# 2012-08-01
	if ($datestring eq $pkgversion) { $value = $candidate; }
    }
    return $value;
}
sub GetDistBaseSwap($$$){
    # --------------------------------------
    #      0-1.
    #   (PKGNAME)        bsdtar-3.1.2
    #   (PKGBASE)        bsdtar
    #   (DISTNAME)       libarchive-3.1.2
    #   (PKGVERSION)     3.1.2
    # --------------------------------------
    my($pkgname, $pkgbase, $distname) = @_ ;
    print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],
	'> (pkgname) ', $pkgname,"\n",
	 '                             (pkgbase) ', $pkgbase,"\n",
	 '                             (distname) ', $distname, "\n" if $DEBUG_DISTBASE;
    my($numbers)=  $pkgname ;
       $numbers	=~ s/$pkgbase-// ;
    my($body)	=  $distname ;
    my($value) = '';
    $body	=~ s/-$numbers// ;
    if ( $body =~ m|^[a-zA-Z]+$|)	{ $value = $body;}
    print STDERR ('                          > distbase : ', $value, "\n",
		  '                           > version : ', $numbers,"\n")
	if $DEBUG_DISTBASE;
    return $value;
}
#    $DISTBASE = GetDistBaseSwap($PKGNAME, $PKGBASE, $DISTBASE);


# not used for now (?)
sub GetDistBaseIOZone($$$$){

#1036   (PKGVERSION_NOREV)  3.429
#1036            (PKGBASE)  iozone
#1036           (DISTNAME)  iozone3_429
#             (PKGVERSION)     3.429
    my ($pkgbase)	= shift;	# (static-)ast-ksh
    my ($pkgname)	= shift;	# (static-)ast-ksh-201208012
    my ($pkgversion)	= shift;	# 201210801
    my ($distname)	= shift;	# ast-ksh-2012-08-01

    my ($value)		= $distname;	# iozone3_429
    $value		=~ s/$pkgbase//;# 3_429
    $value		=~ s/_/./;	# 3.429
    if ( $value eq $pkgversion)	{ 
print STDERR sprintf("%4d ", __LINE__ ), "\n" if $DEBUG_DISTBASE;
	$value = $pkgbase;
	$SpecialPatternY = '$line =~ /.*$value([0-9_]+).*/';  }
    else			{ $value = ''; }
    return $value;
}
sub GetDistBasePwlib($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#
    
    my ($value)		= $distname;	# pwlib-v1_8_3-src
    $value		=~ s/-v[0-9_]+-src//;# pwlib(-v1_8_3-src)
print STDERR sprintf("%4d ", __LINE__ ), ' distbase: ', $value, "\n" if $DEBUG_DISTBASE;
    $SpecialPatternY = '$line =~ /.*$value-v([0-9_]+)-src.*/$1/';  
    return $value;
}
# 832   (PKGNAME)        mercury-14.01.1
#       (PKGBASE)        mercury
#       (DISTNAME)       mercury-srcdist-14.01.1
#       (PKGVERSION)     14.01.1
sub GetDistBaseMercury($$$$){
    my ($pkgbase)	= shift;	#
    my ($pkgname)	= shift;	#
    my ($pkgversion)	= shift;	#
    my ($distname)	= shift;	#

    my ($distbody)	=  $distname;
    $distbody =~ s/_/-/; # basic256_0.9.6.71  --> basic256-0.9.6.71 
    
print STDERR sprintf("%4d ", __LINE__ ), '(distbody) ',  $distbody,"\n" if $DEBUG_DISTBASE;
	$distbody	=~ s/-$pkgversion//;
print STDERR sprintf("%4d ", __LINE__ ), '(distbody) ',  $distbody,"\n" if $DEBUG_DISTBASE;
    if ( ! ($distbody =~ /[0-9.]+/) ) {
print STDERR sprintf("%4d ", __LINE__ ),
    ' (distname) ', $distname, ' (distbody) ', $distbody, "\n" if $DEBUG_DISTBASE;
	return $distbody;
    } else { return '';}
}

#    if ($thisreturn) { return $thisreturn; }

sub GetDistBase($$$$$) {	# <- Main       DISTBASEDISTBASE
    my ($dir) = shift;		# category
    my ($PackageName) = shift;	# leaf
    my ($PKGBASE)	= shift;
    my ($PKGVERSION)	= shift;
    my ($PKGNAME)	= shift;
    
    my ($DISTBASE)	= GetVariableValue($dir, $PackageName, 'DISTNAME');
    
print STDERR sprintf("%4d ", __LINE__ ),
         "  (PKGNAME)\t", $PKGNAME,        "\n",
    "       (PKGBASE)\t", $PKGBASE,      "\n",
    "       (DISTNAME)\t", $DISTBASE,      "\n",
    "       (PKGVERSION)\t", $PKGVERSION , "\n" if $DEBUG_DISTBASE;
#  %DISTBASE special
    if  (my $distbase = $DISTBASE{$PKGBASE}) {
	return $distbase;}

    # --------------------------------------
    #      0. If  very simple patterns
    # --------------------------------------
    if ($PKGBASE .'-'. $PKGVERSION eq $DISTBASE ) { return $PKGBASE }

    # Get several value to do very simple logic for the very first 'if' line below.
    my($PKGBODY) = $DISTBASE;	# For Substracting $PKGVERSION from $PKGNAME
    				# This variable appears only these several lines, to pickup $VERSION_CANDIDATE

    my($VERSION_CANDIDATE) = $DISTBASE;
    $VERSION_CANDIDATE =~ s/$PKGBASE-//;
    $VERSION_CANDIDATE =  MonthToDigit($VERSION_CANDIDATE);
print STDERR sprintf("%4d ", __LINE__ ), '(PKGBODY) ', $PKGBODY,' (CAND) ', $VERSION_CANDIDATE,"\n" if $DEBUG_DISTBASE;
    my($testA) = $PKGBASE;
    my($testB) = $DISTBASE;
print STDERR sprintf("%4d ", __LINE__ ), 
    '(testA) ', $testA,
    ' (VERSION_CANDIDATE) ', $VERSION_CANDIDATE,
    ' (PKGNAME) ', $PKGNAME,
    ' (PKGBASE) ', $PKGBASE,   "\n" if $DEBUG_DISTBASE;    
    if ($testA.'-'.$VERSION_CANDIDATE eq $PKGNAME ) {
	print STDERR sprintf("%4d ", __LINE__ ), '(DISTBASE) ', $PKGBASE,"\n" if $DEBUG_DISTBASE;
	return $PKGBASE;}

    my ($thisreturn) =  GetDistBasePythonModule($PKGBASE, $PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

    # --------------------------------------
    #      0-1.
    #   (PKGNAME)        bsdtar-3.1.2
    #   (PKGBASE)        bsdtar
    #   (DISTNAME)       libarchive-3.1.2
    #   (PKGVERSION)     3.1.2
    # --------------------------------------
        $thisreturn =	GetDistBaseSwap($PKGNAME, $PKGBASE, $DISTBASE);
    if ($thisreturn) { return $thisreturn }

    print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ',
	'(PKGNAME) ', $PKGNAME, ' (PKGBASE) ', $PKGBASE, ' (DISTNAME) ', $DISTBASE
,"\n" if $DEBUG_DISTBASE;

     $thisreturn = GetDistBaseMercury($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
     if ($thisreturn) { return $thisreturn; }

    $thisreturn =  GetDistBasePerlModule($PKGBASE, $PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

         $thisreturn = GetDistBasePwlib($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;
     if ($thisreturn) { return $thisreturn; }

    # --------------------------------------
    #      0-2. if (-) is onlye one in PKGNAME, remove - and after
    #      if resultant string in DISTNAME, take it as DISTBASE
    # --------------------------------------
    $thisreturn = GetDistBaseSimple($PKGNAME, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

    # (distname) ast-ksh-2012-08-01 -> (pkgname) ast-ksh-20120801
    $thisreturn = GetDistBaseReduce($PKGBASE, $PKGNAME, $PKGVERSION, $DISTBASE);
    if ($thisreturn) { return $thisreturn; }
print STDERR sprintf("%4d ", __LINE__ ),'<', (caller 0)[3], '> ',"\n" if $DEBUG_DISTBASE;

#
#print STDERR sprintf("%4d ", __LINE__ ),"\n" if $DEBUG_DISTBASE;
# taking care worpress-4.1-ja.tar.gz type (version is embedded).
    my($DISTBODY) = $DISTBASE;

print STDERR sprintf("%4d ", __LINE__ ), '(PKGNAME) ', $PKGNAME, ' (PKGBASE) ', $PKGBASE, ' (DISTBASE) ', $DISTBASE
,"\n" if $DEBUG_DISTBASE;

    # --------------------------------------
    #      1. First, very simple patterns
    # --------------------------------------
    if ( $VERSION_CANDIDATE =~ /^[0-9.pl-]+$/ ) {
	$DISTBASE =~ s/$VERSION_CANDIDATE//;
    # --------------------------------------
    #      2. then can be managed with simple rule
    # --------------------------------------
    } elsif ($PKGNAME eq	 $DISTBASE  ||
	     $PKGNAME eq 'py27-'.$DISTBASE  ||
	     $PKGNAME eq   'p5-'.$DISTBASE  ||
	     $PKGNAME eq   'php54-'.$DISTBASE  ||
	     0 ) {
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
	$DISTBASE =~ s/-$PKGVERSION//; 
	# ----------------------------------
	#      3. Complicated others
	# ----------------------------------
#    } elsif ( grep (/$PKGBASE/, @MonthToDigit) ) {
#	$DISTBASE
    } else {

#    print STDERR sprintf("%4d ", __LINE__ ), ' ', $DISTBASE, "\n";
    # if - is included, strip - and after
    # if _ is included, strip _ and afte
    $DISTBASE   =~ s/(tcp_wrappers.*)-ipv6/$1/;		# (security) tcp_wrappers_7.6-ipv6.4
    $DISTBASE   =~ s/([0-9]+)r([0-9]+)/$1.$2/;		# math/xgap xgap4r16
#   $DISTBASE   =~ s/-rc[0-9]//;	# mail/mutt-kz-1.5.22-rc1
    					# but version.rc1 < version.. to be fixed XXXXX
    $DISTBASE   =~ s/\.orig//;		# editors/beav_1.40.orig
    $DISTBASE   =~ s/\.src//;		# editors/ted ted-2.21.src
    $DISTBASE   =~ s/-src//;		# editors/ted ted-2.21.src
    $DISTBASE   =~ s/-release//;	# audio/festival-2.1-release
    $DISTBASE   =~ s/-source//;		# print/mupdf mupdf-1.6-source
    $DISTBASE   =~ s/-beta//;		# time
    $DISTBASE   =~ s/\.alpha//;		# time/asclock-gtk wm/weewm
#   $DISTBASE   =~ s/_src//;		#  gambatte_src --> -r571.tar
    $DISTBASE   =~ s/_src_all//;	#  p7zip_9.20.1_src_all
#   $DISTBASE   =~ s/([0-9])_alpha/$1/;	#  wm/novawn NovaWM-0.8_alpha
    $DISTBASE   =~ s/([0-9])_alpha//;	#  wm/novawn NovaWM-0.8_alpha     
#    $DISTBASE   =~ s/([0-9])pre[0-9]/$1/;	#  wm/icewm-1.2.38pre
    $DISTBASE   =~ s/([0-9])p([0-9]+)$/$1\.$2/;	# zorro-1.1p8 -> zorro-1.1.8,  replace  'p' into '.'
#    $DISTBASE   =~ s/p([0-9]+)$/\.\1/;	# zorro-1.1p8 -> zorro-1.1.8    
    $DISTBASE   =~ s/-[0-9.]+a[0-9]+//;	# (net) arpwatch-2.1a15
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; (DISTBASE) ', $DISTBASE,"\n" if $DEBUG_DISTBASE;
	# ----------------------------------
	#  3 - 2
	# ----------------------------------
    if ( $DISTBASE=~ /otp_src_R.*/ ) {   # erlang -> otp_src_R16B02 etc -> 16.02 
	$DISTBASE = "otp_src_";
	} # ignore old style
	# ----------------------------------
	#  3 - 3    distbase has digit
	# ----------------------------------
    elsif (	$DISTBASE =~ /perl5/	||
		$DISTBASE =~ /hdf5/	||
		$DISTBASE =~ /libosip2/	||
		$DISTBASE =~ /xfwm4/	||
		$DISTBASE =~ /mpg123/	||
		$DISTBASE =~ /ysmv7/	||
		$DISTBASE =~ /cal3d/	||
		0 ) {
	#    elsif ( grep /^$DISTBASE$/, @DISTBASE_DIGIT  == 0) {
    $DISTBASE   =~ s/(.*perl5).*/$1/;	# strip after perl5, p5-postgresql -> pgsql_perl(5)-1.9.0
    $DISTBASE   =~ s/(.*hdf5).*/$1/;
    $DISTBASE   =~ s/(.*libosip2).*/$1/;
    $DISTBASE   =~ s/(.*xfwm4).*/$1/;
    $DISTBASE   =~ s/(.*mpg123).*/$1/;
    $DISTBASE   =~ s/(.*ysmv7).*/$1/;
    $DISTBASE   =~ s/(.*cal3d).*/$1/;    
print STDERR sprintf("%4d ", __LINE__ ), ' ', $dir, '/', $PackageName, '; (DISTBASE) ', $DISTBASE,"\n" if $DEBUG_DISTBASE;	
    }
	# ----------------------------------
	#  3 - 4  The name ends with digit, but don't skip
	# ----------------------------------
    elsif ( grep (/$PackageName/, @DontSkipEndingDigit) > 0 ) {
	$DISTBASE = $PackageName;
	# ----------------------------------
	#  3 - 5  Failed so far, 
	# ----------------------------------
    }
    elsif (! ($VERSION_CANDIDATE =~ /^[0-9.pl]+$/ ) ) {
	$DISTBODY =~ s/-$PKGVERSION//;
	$VERSION_CANDIDATE = $DISTBODY;
	$VERSION_CANDIDATE =~ s/$PKGBODY//;
print STDERR sprintf("%4d ", __LINE__ ),
    '(DISTBODY) ', $DISTBODY,
    ' (CAND) ', $VERSION_CANDIDATE,
    ' (PKGVERSION) ', $PKGVERSION,
    "\n" if $DEBUG_DISTBASE;
	# --------------------
	# rescue for the case $PKGVERSION is embedded in $DISTNAME, like "wordpress-\([0-9.]\)*-ja"
	# --------------------
	my($SpecialPatternx) = $DISTBASE;
#	my($SpecialPatternx) = 's/$DISTBASE/$1/;';
	$SpecialPatternx =~ s|$PKGVERSION|([0-9.]+)|;
	$SpecialPatternx =~ s|^|\$line =~ s/.*|;
	$SpecialPatternx =~ s|$|.*/\$1/;|;
	$SpecialPattern{$DISTBODY} = $SpecialPatternx;
	$DISTBASE = $DISTBODY;
#	return $DISTBODY;	# return without editting below
#     'ja-wordpress',	'$line =~ s/wordpress-\([0-9.]\)*-ja/$1/;',
	print STDERR sprintf("%4d ", __LINE__ ), 
	    '(SpecialPattern) ', $DISTBASE,' -> ', $SpecialPatternx, ' (hash) ', $SpecialPattern{$DISTBASE},"\n" if $DEBUG_EVAL_PATTERN;
print STDERR sprintf("%4d ", __LINE__ ), '(DISTBODY) ', $DISTBODY,' (CAND) ', $VERSION_CANDIDATE,"\n" if $DEBUG_DISTBASE;
    }
	# ----------------------------------
	#  3 - 6  Strip $PKGVERSION from $DISTNAME with simple rule
	# ----------------------------------
     else {
    $DISTBASE   =~ s/[-_]*[0-9._-]+$//;	
    }	
					# R-evaluate -> evaluate_0.5.5
    					# adding b in above is harmfull, pslib -> psli
    					# (be carefull) arc-5.21o  -> arco 
    					# gated-3-5-11 -> (g)
					# R-evaluate -> evaluate_0.5.5

    if (grep (/$DISTBASE/, @DIGIT_IN_NAME) == 0 )
				  {	# xnec2c and nec2c
    $DISTBASE   =~ s/[-_]*[0-9._-]+[a-z]$//;	# (mbone) vatsrc-4.0b2, this was harmfull nec2c -> nec
    }
    $DISTBASE   =~ s/-[0-9.]+ucl$/$1/;	# (mbone) wbd-1.0ucl
   # AnyEvent-BDB-1.1 -> (?)
    }
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ',
$dir, '/', $PackageName, '; DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
    return $DISTBASE;
}
sub GetGemVersion($){		# <- Main
    my ($dist_name) = shift;
    my ($available);

# modena@makoto 08:33:19/150114(..misc/screen)%  gem200.new list -r -q libarchive
# 
# *** REMOTE GEMS ***
# 
# libarchive (0.1.2 ruby mswin32)
# libarchive-ruby (0.0.3)
# libarchive-ruby-fs (0.2.1)
# libarchive-ruby-gvalmon (0.0.1)
# libarchive-ruby-swig (0.6.3)
# libarchive-static (1.0.5 ruby i386-mingw32 i386-mswin32)
# libarchive-static-ruby186 (1.0.3 i386-mingw32 i386-mswin32)

    open(GEM, "gem200.new list -r -q $dist_name|") || print STDERR "Failed to gem list: $!\n";
    print STDERR sprintf("%4d ",__LINE__ ), "gem200.new list -r -q $dist_name\n" if $DEBUG_RUBYGEM;
    while(<GEM>) {
	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_  if $DEBUG_RUBYGEM;
	if ( /\b$dist_name \(([0-9.]+).*\)/ ) { $available = $1 ;}
    }
    close(GEM);
    print STDERR sprintf("%4d ", __LINE__ ), ' GetGemVersion: ', $dist_name, ' -> ', $available, "\n" if $DEBUG_RUBYGEM;

    if ( $available )	{ return $available;}
    else  		{ return '(0.0)';}
}
sub PickFromCandidate(@) {
    my (@CANDIDATE) = @_;
    my ($max_version);
    foreach  my $i ( 0.. $#CANDIDATE ) {
	my($ver) = $CANDIDATE[$i];
	print STDERR sprintf("%4d ", __LINE__ ), 'ver (', $ver,') max_version (',$max_version,")\n" if $DEBUG_VER_PATTERN;
	$ver =~ s/\.linux.*//;	# editors/ted linux.i386
	$ver =~ s/\.i386.*//;	# editors/ted linux.i386
	$ver =~ s/\.i686.*//;	#
	$ver =~ s/[_.-][a-z]+64//;	# http://download.tuxfamily.org/hatari/1.8.0/
	$ver =~ s/[_.-][a-z]+32//;	# http://download.tuxfamily.org/hatari/1.8.0/	
	$ver =~ s/-amd64.*//;	#
	$ver =~ s/x86_64.*//;	#
	$ver =~ s/solaris10.*//;	#
	$ver =~ s/[-.]win64.*/\./;	#
#	$ver =~ s/\.windows//;	# emulators/arcem
	$ver =~ s/osx//;	# biology/fastDNAml
	$ver =~ s/-svn.*//;	# avrdude-6.1-svn-20131205-mingw32.zip
#	$ver =~ s/\.cmake//;	# wm/compiz-fusion-plugins-extra
#	$ver =~ s/\.task//;	# wm/golem
	$ver =~ s/bar.plugin//;	# wm/golem	
	$ver =~ s/\.x86//;	# wm/golem
	$ver =~ s/\.x64//;	# audio/SDL2_mixer 
	$ver =~ s/fvwm//;	# devel/libstroke 0.5.1	-> 0.5.1fvwm
	$ver =~ s/with-nspr//;	# 	nss-3.17.3-with-nspr-4.10.7.tar.gz
	$ver =~ s/\.nspr.*//;	# 	nss-3.17.3-with-nspr-4.10.7.tar.gz
	$ver =~ s/v([0-9.]*)/$1/; # p5-Test-Compile-v1.2.1

# following line is so harmfull ... potrace-1.1.linux-amd64.tar.gz -> 1.1.64 graphics/potrace
	$ver =~ s/\.[a-z]{2,}//;	#
	print STDERR sprintf("%4d ", __LINE__ ), 'ver (', $ver,') max_version (',$max_version,")\n" if $DEBUG_VER_PATTERN;
	if (CompareVersion($ver, $max_version) > 0) { $max_version = $ver;}
    }
    if ( ! $max_version ) { $max_version = '0.0';}
    return $max_version;
}
sub GetMasterSiteCandidate($$$) {
    my($category) = shift;
    my($PackageName) = shift;
    my($DISTBASE) = shift;    
    my($pkgdir) = $category.'/'.$PackageName;
    my($MASTER_SITE) = GetVariableValue($category, $PackageName, 'MASTER_SITES');
    my (@MASTER_SITES) = split (' ', $MASTER_SITE);
#    foreach my $site (@MASTER_SITES) {
#	$site =~ s|old/$||;	# ham/xsane -> www.xsane.org/download/old/ (but it is fixed now).
#    }
#    $MASTER_SITE = join ' ',@MASTER_SITES;
# ----------------------------------------------
   return @MASTER_SITES;
}

sub GetMasterSiteSub($$$$) {
    my ($PKGNAME)	= shift;
    my ($DISTBASE)	= shift;
    my ($master_site)	= shift;
    my ($home_page)	= shift;

    @CANDIDATE = '';
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,")\n" if $DEBUG_DISTBASE;
    $DISTBASE =~ s/\.src//;  # editors/ted  (ted-2.21.src) (772) Now:     2.21 -
    $DISTBASE =~ s/\.orig//;  # editors beav_1.40.orig
    $DISTBASE =~ s/-v[0-9.]*-linux//;  #  www/phraseanet-v3.1.4-linux
    my ($max_version ) = '0.0';
    my ($version, $count);
    my ($http_code) = 200;
    my ($location);

    if (($version = DistbaseCacheQuery($DISTBASE, $master_site)) > 0 ){ 
	print STDERR ' ', sprintf("%4d ", __LINE__ ), ' DISTBASE(', $DISTBASE, ') -> ', $version, ' ' if $DEBUG_CACHE;
	return ($http_code, $version);}

    if ( ! CheckDNS($master_site) ) {
	return ('DNS', '0.0');
    }

     ($MasterSiteStat, $location) = CheckHeader($master_site);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,") status: ", $MasterSiteStat, "\n" if $DEBUG_HTTP_HEADER ;
    if ($MasterSiteStat == 404 ) { 
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> DISTBASE (', $DISTBASE,") status: ", $MasterSiteStat, "\n" if $DEBUG_DISTBASE;
	if ($master_site =~ m|github| ) {	
	    print STDERR sprintf("%4d ", __LINE__ ), 'CheckHeader call: ', (CheckHeader($master_site.'../releases.html'))[0],"\n";}
	if ($master_site =~ m|github| &&
	    (CheckHeader($master_site.'../releases.html'))[0] == 200 ) {
	    $master_site .= '../releases.html';
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;
	}
	else {   
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $home_page, ' status: ', $HomePageStat,"\n" if $DEBUG_DISTBASE;
	if ($HomePageStat == 404 || $HomePageStat == 'DNS' ) { return ($HomePageStat, '0.0');}
	$master_site = $home_page; # fall back to home_page
	}
    }
    if ($MasterSiteStat == 550 ) { 
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%04d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;
	$http_code = 550;
	if ($HomePageStat == 550 ) { return (550,'0.0') ;}
#	$master_site = $home_page; # fall back to home_page
    }
    if ($MasterSiteStat == 403 ) {
	$http_code = 403;
	($HomePageStat, $location) =  CheckHeader($home_page);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;
	if ($HomePageStat == 404 ) { return (403, '0.0') ;}
	$master_site = $home_page; # fall back to home_page
	}
    if ($MasterSiteStat == 301 || $MasterSiteStat == 302 ) {
	my ($MorePageStat, $Morelocation) =  CheckHeader($location);
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;	
	if ($MorePageStat == 200) { return (200, $Morelocation)}
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_HTTP_HEADER;
	$Moved++;
	($MasterSiteStat, $master_site) = Http301core($master_site, 4); # 4 is retry number
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site, 'http_code(', $http_code, ")\n" if 	$DEBUG_HTTP_HEADER ;
	if ($http_code != 200 && $home_page)  {
	    ($http_code, $master_site) =  Http301core($home_page, 4); # 4 is retry number
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' master_site (', $master_site, ') http_code('.$http_code. ") \n" if 
	$DEBUG_HTTP_HEADER ;	}
# Following two lines are harmfull for xfce4-wm
#	else {
#	    return (301, '0.0');}
	$http_code = 200;
    }
print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' --> master_site = ', $master_site,"\n" if $DEBUG_DISTBASE;		        

    return ($http_code, $master_site);
}
sub GetVariableValue ($$$) {
    my($category)	= shift;
    my($PackageName)	= shift;
    my($VARNAME)	= shift;
    my($pkgdir) = $category.'/'.$PackageName;

    open(MAKE,"(cd $pkgdir; make show-var VARNAME=$VARNAME)|") || 
	print STDERR sprintf("%4d ", __LINE__ ), "  problem getting $VARNAME: $!\n";
    my (@lines);
    while(<MAKE>){
	if (/^--- .* ---/ ) { next;}  # ignore the lines from parallel make
	push(@lines, $_);
    }	
    close(MAKE);
    chomp($lines[0]);
printf (STDERR "%4d %20s  %s\n", __LINE__, '('.$VARNAME.')', $lines[0] ) if $DEBUG_DISTBASE;    
    return $lines[0];
}
sub GetWipInfo($){
    my ($wip_directory) = shift;
    my ($pwd) = `pwd`;
    # collect PKGBASE -> PKGVERSION hash
}
sub GreyDigitIf00($$){
    my ($http_code)	= shift;
    my ($digit)		= shift;
    if ( $http_code eq 'DNS') {
	return "<span class=\"pale_dns\">$http_code</span>";
    }
    if ( $http_code ) { 
	return "<span class=\"pale$http_code\">$http_code</span>";
    }
    elsif ($digit eq '0.0') {
	return "<span class=\"grey\">$digit</span>";
    }
    elsif ($digit ne '') {
	my ($alt) = $digit;
	if (length($digit) > 13 ) {
	    $digit = substr($digit,0,10).'...';; }
	    
	return "<span class=\"update\" alt=\"".$alt."\">$digit</span>"; #  enable by style file only if $full_list = 1;
    }
    return $digit;
}

# -----------------------------------------------------------------------------------
#    Called when URL got 301 or 302, and returns ultimate master_site (with $http_code)
# -----------------------------------------------------------------------------------
sub Http301core($$) {
    my ($site) = shift;
    my ($retry) = shift;

    my ($status);	# HTTP/1.1 (status digit)
    my ($location);	# Location header value when 'Moved permanently' status
    my ($retcode);	# return value of this subroutine
    my ($master_site);

#    print STDERR sprintf("%4d ", __LINE__ ), ' Moved ', $site,"<--\n";
#    chomp($site);
#    $|++;
    if ($site ne '' && $retry) {
    $site =~ s|-https:|https:|;
print STDERR sprintf("%4d ", __LINE__ ).' '. $site.' <... retry: '. $retry. "  \n\n" if  $DEBUG_HTTP_HEADER;
    if ($site eq '') { print STDERR sprintf("%4d ", __LINE__ ), " \$site is empty\n"; return -1;}
    open(URL, "$curl_head_secure $site|") || print STDERR sprintf("%4d ", __LINE__ ), " problem accessing $site:$!\n";
    while(<URL>){
	chomp;
	print STDERR sprintf("%4d ", __LINE__ ). ' '. $_."\n" if  $DEBUG_DISTBASE ;
	if (m|HTTP/1.1 (\d+) |) {$status = $1; next;}
	if (($status == 301  || $status == 302 ) && /Location: (.*)/ ) {
	    $location = $1;
print STDERR sprintf("%4d ", __LINE__ ).' location: ', $location,"\n" if  $DEBUG_HTTP_HEADER;
	}
    }
    close(URL);

    print STDERR "status      status ($status)". ' ('. sprintf("%4d ", __LINE__ ). ') Location '. $location." <== \n"  if $DEBUG_HTTP_HEADER ;
    if ( ($status == 301 || $status == 302 ) && $location && $retry-- > 0 ) { 
	($retcode, $master_site) = Http301core($location, $retry);
	if ($retcode == 200) { 
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. "\n", $master_site. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ; return ( 200, $master_site) }
    }
    elsif ( $status == 200 ) {
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('."\n". $master_site. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ; return ( 200, $master_site) }
    else { $retcode =  -301;}

#    if ($status == 200 )
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. "\n", $location. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ;
    print STDERR  ' retcode: ' , $retcode, '  Master site: '. "\n", $master_site, "\n" if  $DEBUG_DISTBASE ;
    } ###  if ($site ne '' && $retry) {
    print STDERR  '* ', sprintf("%4d ", __LINE__ ), ' Moved ('. sprintf("%4d ", __LINE__ ). ') '. $location. ' <-- retry: '. $retry. " \n" if  $DEBUG_HTTP_HEADER ;
    print STDERR   sprintf("%4d ", __LINE__ ),' retcode: ' , $retcode, '  Master site: '. $master_site, "\n" if  $DEBUG_HTTP_HEADER ;
    return ($retcode, $location);
}
sub MasterSiteType($) {
}
#sub SigintHandler(){
#    close(SUMMARY);
#}
sub MasterSiteVersion($) {
}

# main -> GetVersionCandidate($$$) -> 
sub ParseDebug($){
    my ($pattern) = shift;
    my %DEBUG;

    my(%LongName) = qw (
    a enable All
    e EvalPattern
    l CurlListing
    d DistbasePattern
    f Classify (find family)
    h HTTPHeader
    c Cache
    C CurlCommand
    n CountNumber
    p SpecialPattern
    s SourceForge
    S Stats
    r RubyGems
    x CurlCache
	);

    print STDERR sprintf("%4d ", __LINE__ ), ' DEBUG pattern (',  $pattern,  ') -> ';
    foreach my $e (qw (a d e f h c C n p s S l r x)){
	print STDERR $e.'(';
	if (grep (/$e/, $pattern) > 0 ||
	    grep (/a/, $pattern) > 0  ) {
	    print STDERR $LongName{$e} .') ' ;
	    $DEBUG{$e}++;
	} else {
	    print STDERR ' ) ' ;
	}
    }
    $DEBUG_EVAL_PATTERN		= $DEBUG{'e'} + $DEBUG{'a'} ;	# -x e
    $DEBUG_CURL_LISTING		= $DEBUG{'l'} + $DEBUG{'a'} ;	# -x l
    $DEBUG_DISTBASE	= $DEBUG{'d'} + $DEBUG{'a'} ;	# -x d
    $DEBUG_HTTP_HEADER		= $DEBUG{'h'} + $DEBUG{'a'} ;	# -x h
    $DEBUG_CACHE		= $DEBUG{'c'} + $DEBUG{'a'} ;	# -x c
    $DEBUG_CURL			= $DEBUG{'C'} + $DEBUG{'a'} ;	# -x c
    $DEBUG_FAMILY		= $DEBUG{'f'} + $DEBUG{'a'} ;	# -x c
    $DEBUG_COUNT		= $DEBUG{'n'} + $DEBUG{'a'} ;	# -x n
    $DEBUG_SF			= $DEBUG{'s'} + $DEBUG{'a'} ;	# -x s
    $DEBUG_STATS		= $DEBUG{'S'} + $DEBUG{'a'} ;	# -x S
    $DEBUG_RUBYGEM		= $DEBUG{'r'} + $DEBUG{'a'} ;	# -x r
    $DEBUG_SPECIAL_PATTERN	= $DEBUG{'p'} + $DEBUG{'a'} ;	# -x p
    $DEBUG_CURL_CACHE		= $DEBUG{'x'} + $DEBUG{'a'} ;	# -x x
    print STDERR "\n";
}
sub ParseDirectory($$){
    my ($master_site) = shift;
    my ($distbase)   = shift;

    # returns ($returnCode, @candidate);

    my (@candidate);
    my ($version);
    if ($master_site eq '')	{ print STDERR sprintf("%4d ", __LINE__ ), ' $master_site is empty ',	 "\n"; return -1;}
    if ($master_site eq 'DNS'){ print STDERR sprintf("%4d ", __LINE__ ), ' ',$distbase,' has DNS problem',"\n"; return -1;}
    if (0) {
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $master_site, "   \n" if  $DEBUG_DISTBASE ;
    if ($master_site =~ m|github\.com/| && $master_site =~ m|/v[0-9.]+| ) {
	$master_site =~ s|/v[0-9.]+|/|;
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $master_site, "   \n" if  $DEBUG_DISTBASE ;
    }
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $master_site, "   \n" if  $DEBUG_DISTBASE ;
    }
    my($curl_lines) = 0; # count how many lines came from curl -l
    my($repeat) = 3 ;
    my($sslv3) = '';
#   if ($master_site =~  m|https://code.google.com|) { $sslv3 = '-3';}
    while( $curl_lines == 0 && $repeat-- > 0 )  {
	print STDERR sprintf("%4d ", __LINE__ ), ' ', $master_site, "   \n" if $DEBUG_DISTBASE ;
	if ($master_site eq '') { print STDERR sprintf("%4d ", __LINE__ ), " \$master_site is empty\n"; return -1;}
	my ($curl_command) = "$curl_list_secure $sslv3 $master_site";
	print STDERR sprintf("%4d ", __LINE__ ), $curl_command, "\n" if $DEBUG_CURL;
	my(@ThisCurl);
	    print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ',"\n",
		'      Last curl ', $LastCurl,    "\n",
		'      This curl ', $curl_command,"\n" if $DEBUG_CURL_CACHE;
	if ($LastCurl eq $curl_command ) {
	    @ThisCurl = @CurlCache;
	    print STDERR sprintf("%4d ", __LINE__ ), ' *** ', $distbase,
		' ==> Using @CurlCache',"\n" if $DEBUG_CURL_CACHE;
	} else {
	    $LastCurl = $curl_command;
	    open(CURL, "$curl_command |") || print STDERR "Problem w3m: $!\n";	    
	    @ThisCurl = <CURL>;
	    close(CURL);
	    @CurlCache = @ThisCurl;
	}
    while ($_ = shift @ThisCurl ) {
#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $_, "\n";
#print STDERR sprintf("%4d ", __LINE__ ), ' (PKGNAME) ', $PKGNAME, ' ', $_,"\n" if $DEBUG_DISTBASE;        
	$curl_lines++;
	chomp();	
       	if (/\[DIR\]/) { next; }	# skip directory
	# arc-5.21p.tar.gz (84.8 kB)
        # http://www3.sympatico.ca/mt0000/bicom/bicom101.zip -> fails to matchp
#	print STDERR sprintf("%4d ", __LINE__ ), ' ', $distbase, ' ', $_,"\n";

        #  eaglecon-4.16r2.zip
	# DBD-CSV-0.22.tar.gz 45 < 22
	# DBD-CSV-0.44.tgz
	# DBD-CSV-0.45.tgz
        # zorro-1.1p8.tar.gz -> 8
	# Class-DBI-Pg-0.08.tar.gz

	if ( /scapy4win_and_pack.zip/) { next;} # net/scapy exception
	if ( /buildrump-1369495826.tar.bz2/) { next;} # ignore old stuff (misc/rump)
#print STDERR sprintf("%4d ", __LINE__ ), ' ( ) ', $_,"\n" if $DEBUG_DISTBASE;
	if ( $distbase eq 'libXaw' && /libXaw3d/ )	{ next;}

# ----------  A L W A Y S   G O  T H R U   H E R E  --------------
print STDERR sprintf("%4d ** ", __LINE__ ), '(', $distbase,') ', $_,"\n" if 
	    ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN);
# ----------------------------------------------------------------

	if ( grep (/$distbase/, @SimplePattern)) {
	    $_ =~ /.*$distbase-([0-9.]+).*/;
	    $version = $1;
	} elsif ( $SpecialPatternY ) {
	    $version = $_;
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> ', '(SpecialPatternY) ', $SpecialPatternY,"\n" if   ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN);		
	    eval $SpecialPatternY ;
print STDERR sprintf("%4d ", __LINE__ ), '($version) ', $version, "\n" if   ($DEBUG_CURL_LISTING ||  $DEBUG_EVAL_PATTERN);		
	} elsif ( grep (/$distbase/, keys %SpecialPattern)) {
	    print STDERR sprintf("%4d ", __LINE__ ), '(', $distbase,') ', $_,"\n" if $DEBUG_EVAL_PATTERN;
	    #  E V A L U A T E SpecialPattern
	    $version = SpecialPattern($distbase, $_);
	} elsif ( $distbase eq 'Unicode-Map' && 
		$_ =~ /Unicode-Map8(.*)/ ) { 
print STDERR sprintf("%4d ", __LINE__ ), ' (1a)', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
next;
	} elsif ( $distbase eq 'otp_src_R' &&
		/\b$distbase([0-9]+)B([0-9]*)/ ) {
	    $version =	$1.$2 ;
	} elsif ( $distbase eq 'xmx-2.1alpha.pl')	{ 
	    s/alpha/a/g;
    	    s/beta/b/g;
		$_ =~ /xmx-(.*)pl.*\.tar\.gz/;
		$version = $1;
print STDERR sprintf("%4d ", __LINE__ ), ' (01)', $distbase,' version-> ', $version,"\n" if $DEBUG_DISTBASE;
	# avoid 2, www/p5-Catalyst-View-Mason2 will not picked for www/p5-Catalyst-View-Mason
	} elsif ( /(.*\b)$distbase([013-9_.-][0-9a-z_.-]+)\.(gz|bz2|zip|xz|7z|tgz|tbz|tar|Z)/ ||
		/(.*\b)$distbase-v([0-9.]+)-linux/ ||
		/(.*\b)$distbase-([0-9.]+)\.python/ ||	# devel/pythontidy
		/(.*\b)$distbase.v([0-9.]+)/ ||
		0 ) {
	    if ($1 =~ /-$/) { 
		print STDERR sprintf("%4d ", __LINE__ ), ' (-) ', $_,"\n" if $DEBUG_DISTBASE;
		next;}  # Avoid to pick CGI-Cookie-XS-0.18.tar.gz for Cookie-XS
	     $version =	$2;
print STDERR sprintf("%4d ", __LINE__ ), ' (0) >', $1, '< ', $_,"\n" if $DEBUG_DISTBASE;
print STDERR sprintf("%4d ", __LINE__ ), ' (1) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;
	    # -----------
	    # xpdf-arabic etc special
    	    # -----------
	    if ($distbase =~ /xpdf-[a-z]*/) {
print STDERR sprintf("%4d ", __LINE__ ), ' (2) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;		
		my ($month, $digit);
		if ($version =~ /-[0-9]+(-[jfmasond][a-z][a-z]-).*/ ) { 
		    $month = $1;
		    $digit = $MonthToDigit{$month};
		    $version =~  s/-([0-9]+)-[jfmasond][a-z][a-z]-([0-9]+)\.tar/$1$digit$2/;
print STDERR sprintf("%4d ", __LINE__ ), ' (3) ', $distbase, ' --> ', $version,"\n" if $DEBUG_DISTBASE;		    
		}
	    } else {
	    $version =~ s/-vax-//;	# compat30-extras-sparc-3.1.tar.bz2
	    $version =~ s/-i386-//;	#
	    $version =~ s/(\d+)B(\d+)/$1.$2/;  # erlang otp_src_R16B02 -> 16.02
	    $version =~ s/_bin_win//; # shapelib129_bin_win.zip
	    $version =~ s/\.tar//;
	    $version =~ s/-src-tar//;	# pwlib-v1_11_1-src-tar
	    $version =~ s/release//;
	    $version =~ s/\.cmake//;
	    $version =~ s/source//;
	    $version =~ s/\.alpha//;	# wm/weewm
	    $version =~ s/-dev//;
            $version =~ s/-src-//;	# qt-everywhere-opensource --> -src-5.2.1
	    $version =~ s/-src//;	# qt-everywhere-opensource --> -src-5.2.1	     
	    $version =~ s/\.src//;
    	    $version =~ s/_src_all//;	#  p7zip_9.20.1_src_all.tar
       	    $version =~ s/src//;	#  archivers/hpack79src
       	    $version =~ s/dos//;	#  archivers/hpack79dos
#	    $version =~ s/pre[0-9]//;
	    $version =~ s/^[_.-]//;
	    if ( ($distbase =~ /[A-Z][a-z]+-[A-Z][a-z]+/ ) ) { # perl module regular shape
		$version =~ s/_[0-9]+//;	# Drop _ or after
	    } else {			# harmful for p5-Data-Printer-0.35_01 -> 0.35.1
	    $version =~ s/[_.-]/\./g;
	    }
       	    $version =~ s/([0-9])p([0-9]+)/$1\.$2/;	# zorro 1.1p8, 1.1p8 ->1.1.8, while unzip60 is retained  
       	    $version =~ s/p[0-9]+//;
    	    $version =~ s/\.diff//;	# beav_1.40.diff
    	    $version =~ s/\.orig//;	# aranym_1.0.2.orig.tar
    	    $version =~ s/^r/0./;	#  gambatte_src-r571.tar
	    $version =~ s/\.ipv6//;	# (security) tcp_wrappers_7.6-ipv6.4
	    $version =~ s/\.shar//;
	    $version =~ s/\.cpio//;
	    $version =~ s/-v([0-9.]+)-linux/$1/;
	    $version =~ s/\.win32//;
	    $version =~ s/\.bin//;
	    $version =~ s/\.mac//;
	    $version =~ s/\.doc//;
	    $version =~ s/\.c$//;	# bunzip-0.21.c.gz
	    $version =~ s/v([0-9._-]+)/$1/;
	    }
	}
	if ($version =~ m|[0-9.]+pre[0-9]| ) { next;}
	if ($version eq '') { next;}
	if (length($version) > $MAXSTRINGLEN ) { next;} # skip too long
## RCRCRC
print STDERR sprintf("%4d <", __LINE__ ),  (caller 0)[3], '> (distbase) ', $distbase,' (version) ', $version, "\n" if $DEBUG_DISTBASE;
	if ( ! ($distbase =~ m|rc| ) &&
	       $version =~ m|[0-9.]+rc[0-9]| )  { next;} # in case $distbase has not 'rc' in it, ignore rc stuff  RRRRRRRCCCCC i
	if ( ! ($distbase =~ m|pre[0-9]| ) &&
	       $version =~ m|[0-9._-]+pre[0-9]| )  { next;} # in case $distbase has not 'pre' in it, ignore rc stuff  RRRRRRRCCCCC i
print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> (distbase) ', $distbase,' (version) ', $version, "\n" if $DEBUG_DISTBASE;
	if ($version eq '') { next;}
	if ( ! ($version =~ /[0-9]/ )) { next; } # need at least one digit

	# 552 -> 5.5.2, 2.1.3 -> 213 (nkf) etc
	#	if ($version =~ /1-bit ui/) { next;} # security sign pecuriarity
# the following line is harmfull if EditVersion is active 1.2907 > 1.29.07  
#	push(@candidate, $version); # for the safefy, push before edit too
	my($edit_version) = EditVersion($distbase, $version);
print STDERR sprintf("%4d <", __LINE__), (caller 0)[3], '> distbase: ', $distbase,' (version) ', $edit_version, "\n" if $DEBUG_DISTBASE;
#	if ($edit_version =~ /37/ ) {
# print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],'> (edit_version) ',$edit_version, "\n"; }
	    push(@candidate, "$edit_version");
#	    $count   =	CountPeriod($version);

    } # end while
print STDERR sprintf("%4d ", __LINE__ ), ' (distbase) ', $distbase,' (version) ', $version, "\n" if $DEBUG_DISTBASE;	
    }
    my ($returnCode) = 0;
    print STDERR sprintf("%4d ", __LINE__ ), '==> curl_lines: ', $curl_lines, "\n" if $DEBUG_DISTBASE;
    if ($curl_lines == 0 ) { $returnCode = -1; };
print STDERR sprintf("%4d ", __LINE__ ), ' (distbase) ', $distbase,' (version) ', $version, 
' returnCode ', $returnCode, "\n" if $DEBUG_DISTBASE;
#      foreach my $c (@candidate) {
#  	if (1 || $c =~ /4\.8\.3/) {
#  print STDERR sprintf("%4d <", __LINE__), (caller 0)[3],'> (edit_version) ', $c, "\n"; }}
    ($returnCode, @candidate);
}
sub PkgVersion($) {

}
sub PrintHeader($) {
    my ($full_list) = shift;
    my ($update);
    if ($full_list) {
	$update = 'span.update { background: \#d0c8c8;}';
    }
    print SUMMARY <<SUMMARY;
<html>
<style>
    body    { font-size: small;}
    table   { font-size: small;}
    tr.user      { background-color: \#e8e8f0; }
    tr.reverse   { background-color: \#e0c8e8; }
    span.reverse { background-color: \#e0c8e8; }        
    a.rev { background: \#328032;color: white;}
    span.brown     { color: brown;}
    span.grey      { color: \#608060;}
    span.grey      { color: \#c09090;}
    span.pale550   { color: \#e0e090;}
    span.pale404   { color: \#f0a000;}
    span.pale403   { color: \#90e0e0;}

    span.pale302   { color: \#806080;}
    span.pale301   { color: \#804080;}

    span.pale_dns  { color: \#c040c0;}
    span.pale_arrow { color: \#c090c0;}
    span.pale0_0    { color: \#e0e090;}
    td.update { background: \#d0c8c8;}
    td.grey   { background: \#c0c0c0;}
</style>

<body>
<table cellspacing=0 cellpadding=3 border=0>
<tr><th>directory</th><th>Package</th><th>Now</th><th></th>
<th>Update-To</th><th>TODO</th><th>MAINTAINER</th><th>MASTER_SITES (only the first one checked) </th></tr>
SUMMARY
# just for emacs face
#     = $category.'/'.$PackageName;
}
sub ReadMakefile($$)  {		# <- Main
    my ($category) =	shift;
    my ($directory) =	shift;
    my ($Makefile)  =	"$pkgsrc/$category/$directory/Makefile";
    my ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $texlive) 
	= ('',	     '',        0,            0,             0,		  -1,         0);
#print STDERR '   ***', __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n";
#    print STDERR "Checking $Makefile\n";    
    if ( -f $Makefile ) {
	chomp();
#	print STDERR "Reading $Makefile\r";
	open(MAKEFILE, $Makefile) || print STDERR "Problem opening $Makefile: $!\n";
	while (<MAKEFILE>) {
	    if ( /^MAINTAINER=\s*(.*)/ )	{ $MAINTAINER = $1; }
	    if ( /^HOMEPAGE=\s*(.*)/ )		{ $HOMEPAGE = $1; } 
	    if ( m|^.\s*include.*\.\./\.\./lang/ruby/gem\.mk|)	{ $GEM_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./lang/php/pear\.mk|)	{ $PEAR_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./mk/haskell\.mk|)	{ $HS_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./lang/python/egg\.mk|)	{ $EGG_PACKAGE++;}
	    if ( m|^.\s*include.*\.\./\.\./print/texlive/package\.mk|)	{ $texlive++;}

	   #        MASTER_SITES=     ${MASTER_SITE_SOURCEFORGE:=modauthkerb/}
 	    if ( m|^MASTER_SITES=\s+\$\{MASTER_SITE_SOURCEFORGE:=(.*)/|) { $SFProject = $1;}
	}
	close(MAKEFILE);
	if ($MAINTAINER eq '' ) { $MAINTAINER = GetVariableValue($category, $directory, 'MAINTAINER');}
	if ($HOMEPAGE eq '' )   { $HOMEPAGE = GetVariableValue($category, $directory, 'HOMEPAGE');}
	return ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $texlive, $EGG_PACKAGE);
    }
}    
sub ReadTodo($){
    my($pkgsrc) = shift;
    my($TODO)   = $pkgsrc.'/doc/TODO';
    if ( open(TODO, $TODO) == 0 ) {
	print STDERR " **(EE) Problem reading $TODO:$!\n";
	print STDERR " **(EE) -p option correct ?\n"; exit 24;
    }
    while(<TODO>) {
	if (/^[ \t]+o ([a-zA-Z0-9_-]+)-([0-9.a-z]+)/ ) {
	    my ($package) = $1;
	    my ($version) = $2;
	    $TODO{$package} = $version;
	}	    
    }
}	
sub RecordMaxElapsed($){
    my($shift) = time; 
}
sub ShowVersion(){
    print '(',$my_name,') Version: ', $VERSION,"\n";
    }

sub ExecutionTime($$){
    my ($started) = shift;
    my ($ended)   = shift;
    my ($took)    = $ended - $started;

    my ($hour) =  int($took/3600);
    my ($min)  =  int( ($took - ($hour * 3600) )  /60);    
    my ($sec) =   $took - $hour * 3600 - $min * 60;
    return  sprintf("%02d:%02d:%02d", $hour, $min, $sec);
}
my($Sum);
sub Stats($$){
    my ($started) = shift;
    my ($exec_time) = ExecutionTime($started, time());
    my ($argv)    = shift;

    my ($sec, $min, $hour, $day, $mon, $Year, $dayoWeek, $dayoYear, $summertime) = gmtime($started);
    my ($started_string) = sprintf "%4d-%02d-%02d %02d:%02d", $Year+1900, $mon+1, $day, $hour, $min;

       ($sec, $min, $hour, $day, $mon, $Year, $dayoWeek, $dayoYear, $summertime) = gmtime();
    my ($ended)  = sprintf "%4d-%02d-%02d %02d:%02d", $Year+1900, $mon+1, $day, $hour, $min;
    my ($indicated);

    if ($full_list) { $indicated = '(indicated as 0.0)';}
    else            { $indicated = '(only listed with -f or -c option)';}
    $Sum
	= $Found 
	+ $TODO_LIST
	+ $OK
	+ $NotAvailable

	+ $NoMasterSitesStats
	+ $NotFound
	+ $Forbidden
	+ $DNSProblem

	+ $SkippedEndingDigitStats
	+ $SkipTooOld
	+ $StatTEXLIVE
	+ $MetaPackage

	+ $Reverse
	+ $NotListed
	;
    my($ForMergeCount) = sprintf 
    "<!-- ForMergeCount:%d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d,%d,%d,  %d,%d -->\n",
	  $Found  ,
	  $TODO_LIST ,
	  $OK  ,
	  $NotAvailable ,

	  $NoMasterSitesStats ,
	  $NotFound ,
	  $Forbidden ,
	  $DNSProblem ,

	  $SkippedEndingDigitStats,
	  $SkipTooOld ,
	  $StatTEXLIVE ,
	  $MetaPackage ,

	  $Reverse ,
	  $NotListed ,
	$Sum,
	$TotalChecked, 
	
	$started, time();

    my($string2) = "       %-21s %6s %s\n";
    my($string) =  "%-21s %6s  %s\n";
    my($number) =  "%-21s %6d  %s\n";
    my($number2) = "%-41s %6d  %s\n";
    my($number3) = "%-41s %6d  %s\n";    

##  Be carefull to have each header has colon(:) for merge-process be done correctly

    print  SUMMARY '<pre>',"\n";
    print  SUMMARY '<a href="../00_Summary.html"> Summary </a> | <a href="./?C=M;O=D"> Upper directory</a>',"\n";
    printf SUMMARY $string2,  'Script Time Stamp:', $VERSION;
    printf SUMMARY $string2,  'Started:',           $started_string, 'UTC';
    printf SUMMARY $string2,  'Ended:',             $ended, 'UTC';    
    printf SUMMARY $string2,  'Elapsed:',  '           '.$exec_time; # column adjust (indent) to above

    printf SUMMARY $number2,  '<span class="brown">Found:', 	$Found,		'These packages are to be updated</span>';
    printf SUMMARY $number3,  '<span class="brown">TODO flags:', $TODO_LIST,	'(More to be updated, by TODO)</span>';
    printf SUMMARY $number,  'Up-to-date:',		$OK,	'OK, Already up-to-date';
    printf SUMMARY $number,  'Not Available:',		$NotAvailable,	'Failed to get update info '. $indicated;

    printf SUMMARY $number,  'No Master Sites:',	$NoMasterSitesStats,	'(usually in files directory)';
    printf SUMMARY $number,  'NotFound (404):',		$NotFound,	'MASTER_SITES returns 404, and no recovery';
    printf SUMMARY $number,  'Forbidden(403/550):',	$Forbidden;
    printf SUMMARY $number,  "Site not in DNS:",	$DNSProblem;

    printf SUMMARY $number,  'Name ends with digit:',	$SkippedEndingDigit,	'(The name ends with digits, may give false version)';
    printf SUMMARY $number,  'Matured:',		$SkipTooOld,	'(No update expected)';
    printf SUMMARY $number,  'Texlive:',		$StatTEXLIVE,	'(Texlive is skipped for now)';
    printf SUMMARY $number,  'META_PACKAGE:',		$MetaPackage,	'(Other than meta-pkgs category)';
    printf SUMMARY $number,  'Confusing:',		$Reverse,	'<span class="reverse">(Found version wrong, hilighted, only for debug purpose)</span>';

    printf SUMMARY $number,  'Not Listed:',		$NotListed,'';
    printf SUMMARY $number,  'Sum of Above:',		$Sum,'';
    printf SUMMARY "\n";
    printf SUMMARY $number,  'Total Checked:',		$TotalChecked;
    printf SUMMARY $string,  'Options used:',		' ', $argv;
#   printf SUMMARY $string,  'Output URL:',		' ', $output_URL.$output_leaf.'/'. $summary_leaf;
    print  SUMMARY "\n";
    print  SUMMARY " *** Above # has so many errors, by so many reasons, don't blame me :-) , thank you.\n";

    print  SUMMARY $ForMergeCount,"\n" if $merge_mode;
    print  SUMMARY '</pre>',"\n";
}
# 30 -> 3.0   60 -> 6.0
sub Zip($$)  {
       my($version) = shift;
       my($result) ;
       my($a) = substr($version, 0,1);
       my($b) = substr($version, 1,1);
       my($c) = substr($version, 2,1);
       if      ( length($version) == 3 ) {$result = $a.'.'.$b.'.'.$c;}
       elsif   ( length($version) == 2 ) {$result = $a.'.'.$b       ;}
       return $result;
}
sub Three($$) {
    my($version) = shift;
    my($digit) =   shift;
    my($a, $b, $c) = ( 0, 0, 0 );
    if (grep (/\./, $version) > 0) { return $version;} # if already has period. unzip 6.0.0
    if (length($version) > 3 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 2);
	$c = substr($version, 3, 9);
    } elsif (length($version) == 3 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 1);
	$c = substr($version, 2, 1);
    } elsif (length($version) == 2 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 1);
	$c = 0;
    } elsif (length($version) == 1 ) {
	$a = $version;
	$b = 0;
	$c = 0;
    }
    if ($digit == 2 ) { return $a.'.'.$b.$c;}        
    else              { return $a.'.'.$b.'.'.$c;}

}
sub Two($) {
    my($version) = shift;
    my($a, $b) = (0, 0);
#    if (length($version) == 2 ) {
	$a = substr($version, 0, 1);
	$b = substr($version, 1, 9);
#    }
    return $a.'.'.$b;
}
#sub Four($$) {
#    my($version) = shift;
#    my($digit) =   shift;
#    my($a, $b, $c) = ( 0, 0, 0);
#    if (length($version) == 4 ) {
#	$a = substr($version, 0, 1);
#	# (skip period of 0.00)
#	$b = substr($version, 2, 1);
#	$c = substr($version, 3, 1);
#    } elsif (length($version) == 2 ) {
#	$a = substr($version, 0, 1);
#	$b = substr($version, 1, 1);
#	$c = 0;
#    } elsif (length($version) == 1 ) {
#	$a = $version;
#	$b = 0;
#	$c = 0;
#    }
#    if ($digit == 2 ) { return $a.'.'.$b.$c;}        
#    else              { return $a.'.'.$b.'.'.$c;}
#
#}

# devel/p5-Devel-FindRef 	p5-Devel-FindRef 	1.422 	->	1.44
#	    if (grep (/^$distbase$/, @SPRINTF1_3)  > 0 ) { $version = LeftJustify($version,1,3);} #in 3 out 3
sub LeftJustify ($$$){
    my($version) = shift;
    my($int)	= shift;
    my($frac)	= shift;
    my($result) = $version;
    if (length($version) == $int + $frac) { $result .= '0';}
    return $result;
}
sub AddZero($$) {
    my($version) = shift;
    my($count)	= shift;
    if ($count == 1 ) { return $version . '0';}
    if ($count == 2 ) { return $version . '00';}
    if ($count == 3 ) { return $version . '000';}
    if ($count == 4 ) { return $version . '0000';}
}
#                                                       (0,1,  1,3, 4,3)
# # www/p5-Reaction 	p5-Reaction 	0.2.5 	<-	0.002005
sub VerSprintf($$$) {
    my($version) = shift;
    my($one, $two, $three, $four, $five, $six) = @_;
    my($result) = $version;
    my ($a) = substr($version, $one,   $two);
    my ($b) = substr($version, $three, $four);
    my ($c) = substr($version, $five,  $six);
    $result = sprintf("%d.%d.%d", $a, $b, $c);
}

# nkf 2.1.3 -> 2.13  ( $version, 2) .. meaning remove 2nd dot
sub DeleteDot($$){
    my($version) = shift;
    my($digit) =   shift;
    my($result) = $version;
    my(@element) = split '\.', $version;
    $result = $element[0].'.' . $element[1] . $element[2];
    print STDERR sprintf("%4d ", __LINE__ ), ' ', $version, ' -> ', $result,"\n";
    return $result;
}
#                  DelDot422($version, 5, 8);
# www/sqtop 20131217 -> 2013.12.17
sub DelDot422($$$) {
    my($version) = shift;
    my($one)	= shift;;
    my($two)	= shift;
    my($result) = $version;
    $result =	substr($version, 0, 4)  
	.	substr($version, $one, 2)
	.	substr($version, $two, 2) ;

    return $result;
}
sub InsertDot($$){
    my($version) = shift;
    my($digit) =   shift;
    my($result) = $version;
    # if the letter at the location of $digit + 1 is digit, insert period at that point
    # example yencode 0.46 -> 0.4.6
    # 0.341 -> 0.34 but 0.42 -> 0.42 (not 0.42.) ($digit == 3, graphics/p5-SWF-File)
#print STDERR '(',sprintf("%4d ", __LINE__ ), ')  ', $version, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;
    if ($digit == 3 && length($version) == 4 ) {return $result;}
#print STDERR '(',sprintf("%4d ", __LINE__ ), ')  ', $version, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;    
    $digit++;
    if (substr($version, $digit, 1 ) + 0 >= 0) {
	$result = substr($version, 0, $digit) . '.' . substr($version, $digit, 99);
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, ' --> ', $digit,"\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}
sub InsertDot2($$$){
    my($version) = shift;
    my($one) =   shift;
    my($two) =   shift;
    my($result) = $version;

    #  	p5-ExtUtils-CBuilder 	0.28.02.16 	->	0.280220    (3,2)
    $result = substr($version, 0, 1)        . '.'
	.     substr($version, $one, 2) .'.'
	.     substr($version, $two, 2) .'.'
        .    substr($version,  $two + 2, 2) ;
    return $result;
}

sub InsertDot133($){
    my($version) = shift;
    my($result) = $version;
    if (length($version) == 8) { 
	$result = sprintf("%d.%d.%d", 
			  substr($version, 0, 1),
			  substr($version, 2, 3),
			  substr($version, 5, 3));
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, "\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}
# 1111 -> 1.11.1 geography/gdal-lib
sub InsertDot121($){
    my($version) = shift;
    my($result) = $version;
    if (length($version) == 4) { 
	$result = sprintf("%d.%2d.%d", 
			  substr($version, 0, 1),
			  substr($version, 2, 2),
			  substr($version, 4, 1));
print STDERR sprintf("%4d ", __LINE__ ), ' ', $result, "\n" if $DEBUG_DISTBASE;	
    }
    return $result;
}


# p5-HTTP-Request-Form (HTTP-Request-Form) (1513 ) Now:  0.9.5.2 ->   0.952 Todo:       
sub SingleDigit($){
    my ($version) = shift;
    my ($result)  = 
	substr($version, 0, 3) . '.' .
	substr($version, 3, 1) . '.' .
    	substr($version, 4, 1);
    return $result;
}

# 5-Class-C3-Componentised (Class-C3-Componentised) (1536 ) Now:   1.0010 -> 1.001000 Todo:
sub Delete02($) {
    my ($version) = shift;
    my ($result) = $version;
    if (length($version) == 8 && substr($version, 6, 2) eq '00' ) {
	$result = substr($version, 0, 6);
    }
    return $result;
}
sub SummaryName(){
    if (! $summary) {
	if    ($DEBUG_DISTBASE)	{ $summary = '.debug.html';}
	elsif ($DEBUG_CACHE)		{ $summary = '.cache.html';}
	elsif ($DEBUG_HTTP_HEADER)	{ $summary = '.header.html';}
	elsif ($partial) 		{ $summary = '.partial' .'.html';}
	elsif ($category)		{ 
	    
	    $summary = $category . $divide_devel . '.html';
	}
	else       			{
	    my($sec, $min, $hour, $date, $mon, $year, $dofweek, $dayofyear, $summertime) 
		= gmtime();
	    $summary
		= sprintf("%04d%02d%02d.html", $year + 1900, $mon + 1, $date); }}
    if ($output_directory)		{
	$summary_leaf	= $summary;
	$summary_tmp	= $output_directory .'/.'. $summary;
	$summary	= $output_directory .'/' . $summary;
    }
  }
sub GetSFProjectCandidate($$) {
    my ($SFProject) = shift;
    my ($DISTBASE) = shift;

    my (@candidate);
    my ($master_site) = $SFProject;
    my ($returnCode);

		print STDERR sprintf("%4d ", __LINE__ ), ' SFProject: ',  $SFProject."\n" if $DEBUG_SF;
    $master_site = 'http://downloads.sourceforge.net/sourceforge/'. $SFProject.'/';
    my ($status, $location) = CheckHeader($master_site);
       print STDERR sprintf("%4d ", __LINE__ ), ' (1) master_site(', $master_site, ') status('. $status.")\n"  if $DEBUG_SF;
    if ($status == 200 ) {
	($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE);
    } else {
	$MasterSiteStat = $status;
	$master_site  =  'http://sourceforge.net/projects/'. $SFProject .'/files/' ;
		print STDERR sprintf("%4d ", __LINE__ ), ' (2) master_site(', $master_site, ') status('. $status.' SFProject: ', $SFProject, ' DISTBASE: ', $DISTBASE, "\n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE); # x11/gtkglarea
		print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;
    }
    if ($#candidate  == -1 )  {   
	$master_site  =  'http://sourceforge.net/projects/'. $SFProject .'/files/' ;
		print STDERR sprintf("%4d ", __LINE__ ), ' (3) master_site(', $master_site, ') status('. $status.' SFProject: ', $SFProject, "\n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE);
		print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;
    }
    if ($#candidate  == -1 )  {
	$master_site = 'http://sourceforge.net/projects/' . $DISTBASE . '/files/';
	print STDERR sprintf("%4d ", __LINE__ ), ' (4) master_site(', $master_site, ') status('. $status.") -> \n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE);
	print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;
    }
    if ($#candidate  == -1 )  {
	$master_site = 'http://sourceforge.net/projects/' . $DISTBASE . '/files/'. $DISTBASE .'/';
	print STDERR sprintf("%4d ", __LINE__ ), ' (5) master_site(', $master_site, ') status('. $status.") -> \n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE);
	print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;
    }
    if ($#candidate  == -1 && (my ($alternative) = $SourceForgeAlternative{$DISTBASE} ) ) {
	foreach my $site (split ';', $alternative) {
	    print STDERR sprintf("%4d ", __LINE__ ), ' (6) master_site(', $site, ') status('. $status.") -> \n"  if $DEBUG_SF;
	($returnCode, @candidate) = ParseDirectory($site, $DISTBASE);
	print STDERR sprintf("%4d ", __LINE__ ), ' returns ', $returnCode,"\n"   if $DEBUG_SF;	
	    $master_site = $site;
	}
    }
# http://sourceforge.net/projects/mpg123/files

    #http://sourceforge.net/projects/ganglia/files/

    return ($master_site, @candidate);
}
# check if URL valid.
sub ValidateMasterSite($$) {
    my ($dir)		= shift;
    my ($PackageName)	= shift;
}
sub MonthToDigit ($){
    my ($version) = shift;
print STDERR sprintf("%4d <", __LINE__ ), (caller 0)[3], '> ', $version, ' --> ' if $DEBUG_DISTBASE;
    my ($month, $digit);
    if ($version =~ /[0-9]+(-[jfmasond][a-z][a-z]-).*/ ) { 
	$month = $1;
	$digit = $MonthToDigit{$month};
	$version =~  s/([0-9]+)-[jfmasond][a-z][a-z]-([0-9]+)/$1$digit$2/;
    }
print STDERR  $version,"\n" if $DEBUG_DISTBASE;
    return $version;
}
## ----------------------------------------
##         M A I N   R o u t i n e    Main
## ----------------------------------------
#$SIG{'INT'} = 'SingintHandler';
my ($PackageStart);	# For timing, not used for now
my ($PackageEnd);

my ($argv)    = join ' ', @ARGV;	# to show at Stats()
getopts( 'c:Dd:fFhM:mP:p:rs:S:tT:uvVwWx:y:', \%opts);

if ($opts{'b'}) { $option_batch++;}	# used be default, not implemented
if ($opts{'c'}) { $category = $opts{'c'}; $full_list++;}
if ($opts{'d'}) { $output_directory = $opts{'d'};}
if ($opts{'D'}) { $disable_digit_ending_package++;}	# not useful now
if ($opts{'f'}) { $full_list++;}
if ($opts{'F'}) { $FindDepends++;}	# not implemented yet
if ($opts{'M'}) { $maintainer = $opts{'M'} }
if ($opts{'m'}) { $merge_mode++;}	# shows ForMergeCount (can be always true ?)
if ($opts{'p'}) { $pkgsrc = $opts{'p'};}
if ($opts{'P'}) { $selected =  $opts{'P'}; $partial++;}
if ($opts{'s'}) { $starting =  $opts{'s'}; $skip_until_match++; $partial++;}

if ($opts{'r'}) { $include_reverse++};
if ($opts{'S'}) { $summary  =  $opts{'S'};}
if ($opts{'x'}) { 
    ParseDebug($opts{'x'});
}

if ($opts{'y'}) { $divide_devel = $opts{'y'};}# (ad-hoc :-) '': none,  1: [A-Za-o]*,  2: p*,  3: [q-z]*
    SummaryName();  # should be before Usage() is called, and after opts c, x, S, C 
if ($opts{'h'}) { Usage($summary, $output_directory); exit 0; }

if ($opts{'t'}) { $MeasureTime++; }	# not implemented yet
if ($opts{'T'}) { $LimitedList = $opts{'T'};}	# ditto
if ($opts{'u'}) { $update_pkgsrc++;}
if ($opts{'v'}) { $verbose++;}
if ($opts{'V'}) { ShowVersion(); exit;}
if ($opts{'w'}) { $include_wip++};	# not implemented yet
if ($opts{'W'}) { $update_wip++};	# not implemented yet

my(%DIVIDE_DEVEL) = ( 1, '[A-Za-o].*',
		      2, 'p.*',
		      3, '[q-z].*' );
chdir $pkgsrc;

print STDERR sprintf("%4d ", __LINE__ ), 'output directory is '. $output_directory ."\n";
print STDERR sprintf("%4d ", __LINE__ ), "output to $summary\n";

opendir(PKGSRC, '.') || print STDERR sprintf("%4d ", __LINE__ ), " problem reading directory $pkgsrc: $! \n",
    __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n" ;
my (@categories) = readdir(PKGSRC);
close(PKGSRC);

ReadTodo($pkgsrc);

#my ($no_avail) = $output_directory . '/.NOT_AVAILABLE' ;
#if ($category) { $no_avail = $output_directory . '/.NOT_AVAILABLE-'. $category. '.html';}
#open(NO_AVAIL, "> $no_avail") || print STDERR "Problem opening $no_avail for write:$!\n";

my ($pwd) = `pwd`;
$pwd =~ chomp($pwd);

open(SUMMARY, "> $summary_tmp") || print STDERR "Problem opening $summary for write:$!\n";
PrintHeader($full_list);	# controlls style for highlighting

foreach my $dir (@categories) {
    if ( ! -d $dir)		{ next;}
    if ($dir =~ /^\.$/ )	{ next;}
    if ($dir =~ /^\.\.$/ )	{ next;}
    if ($dir =~ /^CVS$/ )	{ next;}
    if ($dir =~ /^mk$/ )	{ next;}
    if ($dir =~ /^licenses$/ )	{ next;}
    if ($dir =~ /^template$/ )	{ next;}
    if ($dir =~ /^distfiles$/ )	{ next;}
    if ($dir =~ /^bootstra$/ )	{ next;}
    if ($dir =~ /^packages$/ )	{ next;}
    if ($dir =~ /^meta-pkgs$/ )	{ next;}
    if ($include_wip == 0 && $dir =~ /^wip$/ ) { next;}
    if ($category && ($dir ne $category )) { next;} # skip other than category if specified
    
    if (! -d $dir) 	 {next;}
#
# cvs update  if -u is found
    if ($update_pkgsrc) {
    print STDERR sprintf("%4d ", __LINE__ ), " Updating $pkgsrc -> $dir\n";
    if ($dir) {
	open(CVS_UPDATE, "(cd $pkgsrc; cvs update -dPA $dir)|") 
	|| print STDERR "problem executing cvs update\n";
	while (<CVS_UPDATE>) {
	    # do nothing
	}
	close(CVS_UPDATE);
	}
    else {
	print STDERR "cvs update requested but no dir specified, skipping\n";
    }
    }
    if ($dir =~ /^doc$/ )	{ next;}  # doc is to be updated (if -u), so check later here

#   -----------------------------
#    R E A D   D I R E C T O R Y
#   -----------------------------    
    opendir(CATEGORIES, "$pwd/$dir") || 
	print STDERR "problem opendir $pwd/$dir: $! \n",
	__FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ ),"\n" ;
    my (@PackageNames) = readdir(CATEGORIES);
    closedir(CATEGORIES);
    
    printf STDERR "%4d     ---  (%s) ---\n", sprintf("%4d ", __LINE__ ), $dir;

    # set regexp in %FAMILY
    ClassifyPackage(@PackageNames);
    # ------------------------------------
    #    F O R   E A C H  P A C K A G E     ( to line 1835 ..)
    #  ------------------------------------
    foreach my $PackageName (@PackageNames) {

	$MasterSiteStat = 0;
	$NoMasterSites = 0;
	$HomePageStat = 0;
	$SpecialPatternY = ''; # By-Package Pattern
	#  ----- By package status  -----
	my ($HomePageStatus);	#  for listing   See (TODO) section for the moment
	my ($MasterSiteStatus);	#  for listing
	my ($PackageStatus);	#  for Stats

#	DoEachPackage( );
#sub 	DoEachPackage( ) {
	@CANDIDATE = '';
#    if ( ! -d $PackageName)	{ next;}
    if ($PackageName =~ /^.$/ )	{ next;}
    if ($PackageName =~ /^..$/ ) { next;}
    if ($PackageName =~ /^CVS$/ ) { next;}
    if ($PackageName =~ /^suse/i ) { next;}		# skip suse emulation
    if ($PackageName =~ /gst-plugins0.10/) { next;}     # skip old versions:
#    if ($PackageName =~ /Makefile/ ) { next;}
    if ($selected ne '' && $selected ne $PackageName) { next;} # -s option 
    if ($skip_until_match) {
	if ($PackageName =~ /$opts{'s'}/ ) { $skip_until_match = 0; }
	else { next;}
    }
# -------------- D I V I D E    D E V E L  Special -----------------------
#  If category is devel, check if it is in the particular part of three parts.
#  This is to speed up by parallel execution if make -j multiple requested 
# -------------------------------------------------------------------------
	my ($develPattern) = $DIVIDE_DEVEL{$divide_devel};
	if ( $category eq 'devel'	&&
	     $divide_devel  		&&  
	     ! ($PackageName =~ /^$develPattern/)  ) {
print STDERR sprintf("%4d ", __LINE__ ), 
	     ' category ',    $category,
	     ' divide_devel ', $divide_devel,
             ' PackageName ' , $PackageName,
	     ' DIVIDE_DEVEL{$divide_devel} ', $DIVIDE_DEVEL{$divide_devel}, " :Skipping..\n"
if $DEBUG_DIVIDE_DEVEL;
	     next;}

print STDERR sprintf("%4d ", __LINE__ ), 
	     ' category ',    $category,
	     ' divide_devel ', $divide_devel,
             ' PackageName ' , $PackageName,
	    ' DIVIDE_DEVEL{$divide_devel} ', $DIVIDE_DEVEL{$divide_devel}, " :Processing..\n"
	if $DEBUG_DIVIDE_DEVEL;
# ------------------------------------------------------------------------------------
    my ($this_PackageDir) = $dir.'/'.$PackageName;
    my ($reverse)   = 0;	# for displaying flag

    $PackageStart = time();
    my($thispwd) = `pwd`;
    $thispwd =~ chomp($thispwd);
#    print STDERR '   ***', __FILE__ , ' -> ', (caller 0)[3], ': ',  sprintf("%4d ", __LINE__ )," " ;
    if ( ! -d $this_PackageDir ) { print STDERR "Not directory: $thispwd -> $this_PackageDir\n"; next;}

    my ($Makefile) = $this_PackageDir.'/Makefile';
    if ( ! -f "$Makefile")        { print STDERR "Makefile does not exist or is not file\n"; next; }


    # ----------- I M P O R T A N T    S T A T I S T I S   V A L U E -------------
    $TotalChecked++;			# becoming serial so on (to count)
    # ----------------------------------------------------------------------------

    if ( grep (/$PackageName/, @SkipTooOld) > 0 ) { $SkipTooOld++; next;}
# -------------------
# Read Makefile and get several VALUES

    ($MAINTAINER, $HOMEPAGE, $GEM_PACKAGE, $PEAR_PACKAGE, $HS_PACKAGE, $SFProject, $TEXLIVE, $EGG_PACKAGE)
	= ReadMakefile($dir, $PackageName);
    $PKGVERSION		= GetVariableValue ($dir, $PackageName, 'PKGVERSION_NOREV');
	my ($location); # destination to be directed
	if (! CheckDNS($HOMEPAGE)) { $HomePageStat = 'DNS';}
	else {($HomePageStat, $location) = CheckHeader($HOMEPAGE); }
	
    $PKGBASE	= GetVariableValue ($dir, $PackageName, 'PKGBASE');
	# -----------------------------------------------------------------------
    if ($TEXLIVE) { $StatTEXLIVE++; next;} # skip texlive for the moment
    if ($GEM_PACKAGE) {
	$DISTBASE = GetVariableValue ($dir, $PackageName, 'DISTNAME');
	$DISTBASE =~ s/-[0-9.-]+//;
	$available = GetGemVersion($DISTBASE);
	$http_code = 0;
	print STDERR sprintf("%4d ", __LINE__ ), ' HOMEPAGE: ', $HOMEPAGE,"\n" if $DEBUG_RUBYGEM;
# -----------------------------------------------------------------------
    } else {	# $GEM_PACKAGE
# -----------------------------------------------------------------------	
#   printf STDERR "%4d %-20s: ", sprintf("%4d ", __LINE__ ), $PackageName;
	my($PKGNAME)	= $PKGBASE . '-'. $PKGVERSION;
	$DISTBASE	= GetDistBase($dir, $PackageName, $PKGBASE, $PKGVERSION, $PKGNAME);
print STDERR sprintf("%4d ", __LINE__ ), '<', (caller 0)[3], '> (DISTBASE) ', $DISTBASE, "\n" if $DEBUG_DISTBASE;
	$META_PACKAGE	= GetVariableValue ($dir, $PackageName, 'META_PACKAGE');
	if ($META_PACKAGE =~ /yes/i) { $MetaPackage++; next;}

	@MASTER_SITES	= GetMasterSiteCandidate($dir, $PackageName, $DISTBASE);
	$MASTER_SITE = $MASTER_SITES[0];

	$URL =  $MASTER_SITE;
	$URL =~ s/ .*//;	# Pick the very first word
	chomp($URL);
	if ( my ($p) = $FAMILY{$PackageName} ) {
	    print STDERR sprintf("%4d ", __LINE__ ), '(PackageName) ', $PackageName, ' (p) ', $p, "\n" if $DEBUG_FAMILY;
	    $SpecialPatternY = $p ;
	}
	# ---------------------------------------------------------------
	if ($MASTER_SITE =~ m|http://downloads.sourceforge.net/sourceforge/([^/]+)/| ) {
	    $SFProject = $1; }

	if ($SFProject && $SFProject != -1 ) {
	    my($returnCode);
	    ($URL, $returnCode, @candidate) = GetSFProjectCandidate($SFProject, $DISTBASE);
 print STDERR sprintf("%4d ", __LINE__ ),
' (PKGBASE) ', $PKGBASE, 'URL: ', $URL,"\n" if $DEBUG_SF;
	# ---------------------------------------------------------------
	} else {
	# ---------------------------------------------------------------
	    if ($MASTER_SITE eq '') { 
printf STDERR  "%20s %15s %4s Skipping, MASTER_SITES is empty\n",
	$PKGBASE, '('.$DISTBASE.')', '('.sprintf("%4d ", __LINE__ ).')'; $NoMasterSites++;   next;}

# Get Max version available at MASTER_SITES

	my($http_code, $master_site) = GetMasterSiteSub($PKGBASE, $DISTBASE, $URL, $HOMEPAGE);
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $http_code, ' Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;
	    $returnCode = -1;

	if ($HS_PACKAGE) {
	$master_site = "http://hackage.haskell.org/package/". $DISTBASE;
	print STDERR sprintf("%4d ", __LINE__ ), "HS_PACKGE: ", $MASTER_SITE ,"\n" if $DEBUG_DISTBASE;
	}

	if ($http_code eq 'DNS' ) {
	    $MasterSiteStat = 'DNS';
	}
	if ($master_site && $http_code ne 'DNS' ) {
	    ($returnCode, @candidate) = ParseDirectory($master_site, $DISTBASE);
	}
        if ($returnCode == -1  && $HOMEPAGE) {
	    ($returnCode, @candidate) = ParseDirectory($HOMEPAGE, $DISTBASE);
	    print STDERR sprintf("%4d ", __LINE__ ), $HOMEPAGE," checked.\n" if $DEBUG_DISTBASE;
	}
	} # if ($SFProject) { -> else

 print STDERR sprintf("%4d ", __LINE__ ),
	    '(DISTBASE) ', $DISTBASE, 
	    ' returnCode: ', $returnCode,
	    ' candidate#: ', $#candidate,
	    "\n" if $DEBUG_DISTBASE;
#print STDERR sprintf("%4d ", __LINE__ ),
#    join (' ', @candidate) ,"\n";
	if ($#candidate == -1  &&  ( $MASTER_SITE  =~ m|http://pypi.python.org/| )) {
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE if $DEBUG_DISTBASE;
	    ($returnCode, @candidate) = ParseDirectory(
		"https://pypi.python.org/pypi/".$DISTBASE, $DISTBASE);}

	if ($#candidate == -1  && $EGG_PACKAGE) {
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE if $DEBUG_DISTBASE;
	    ($returnCode, @candidate) = ParseDirectory(
		"https://warehouse.python.org/project/".$DISTBASE, $DISTBASE);}

	
	print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE, ' DISTBASE ', $DISTBASE, "\n" if $DEBUG_DISTBASE;
	print STDERR sprintf("%4d ", __LINE__ ),  $DownLoadAlternative{$DISTBASE}, "\n" if $DEBUG_DISTBASE;
	if ($#candidate == -1  &&  $DownLoadAlternative{$DISTBASE}) {
	    $MASTER_SITE= $DownLoadAlternative{$DISTBASE};
	    print STDERR sprintf("%4d ", __LINE__ ), 'MASTER_SITE ', $MASTER_SITE,"\n" if $DEBUG_DISTBASE;
		($returnCode, @candidate) = ParseDirectory($MASTER_SITE, $DISTBASE);

	}
	# ---------------------------------------------------------------	
	    push(@CANDIDATE, @candidate);
	    $available = PickFromCandidate(@CANDIDATE);
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $http_code, 'Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;        

# -----------------------------------------------------------------------
    } # $GEM_PACKAGE else
# -------------------
print STDERR sprintf("%4d ", __LINE__ ), 
' (PKGBASE) ', $PKGBASE, ' --> http: ', $MasterSiteStat, 'Now: ', $PKGVERSION, ' $available: ', $available,"\n" if $DEBUG_DISTBASE;        

    my($to_list) = 1;
	my ($DISTBASE_TO_SHOW)	= $DISTBASE;
	my ($PKGBASE_TO_SHOW)	= $PKGBASE;
	$DISTBASE_TO_SHOW =~ s/$PKGBASE/=/;
	if ( $DISTBASE_TO_SHOW ne '='){
	    ($PKGBASE_TO_SHOW) =~ s/$DISTBASE/ =>/;}

    printf STDERR  "%20s %15s %4s Now: %8s -> %7s Todo: %5s ", 
	$PKGBASE_TO_SHOW, '('.$DISTBASE_TO_SHOW.')', '('.sprintf("%4d ", __LINE__ ).')', $PKGVERSION,  $available, $TODO{$PKGBASE};
    # ------------------------------------------------------------
    #   F I N D    T H E    C O N D I T I O N    T O    L I S T
    # ------------------------------------------------------------
    print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. ' -> '. $available. "\n" if $DEBUG_CACHE;
    if    ( CompareVersion( $available, $PKGVERSION) >  0 )	{ $Found++; # for stats and just below
    } elsif ( $TODO{$PKGBASE} &&
	      CompareVersion( $TODO{$PKGBASE}, $PKGVERSION) != 0 )	{ $TODO_LIST++; $to_list = 1;
    } elsif ( CompareVersion( $available, $PKGVERSION) == 0 )	{ $to_list = 0;	 $OK++; # OK, disable to list
    } elsif ( CompareVersion( EditVersion($DISTBASE, $available), $PKGVERSION) == 0 )
    			{ $to_list = 0;	 $OK++; # OK, disable to list
    } elsif ( $available eq '0.0' || $available eq '') {
	if    ($MasterSiteStat == 404 )	{ $NotFound++; }
	elsif ($MasterSiteStat == 403 )	{ $Forbidden++;}
	elsif ($MasterSiteStat == 550 )	{ $Forbidden++;}
	elsif ($MasterSiteStat == 'DNS' )	{ $DNSProblem++;}
	elsif ($NoMasterSites )		{ $NoMasterSitesStats++;}

	else				{ $NotAvailable++ ; }
	if ( $full_list == 0 ) { $to_list = 0; $NotListed++;} # Unable to find recent version
    } elsif ( CompareVersion( $available, $PKGVERSION) < 0 )    { 
	if ($include_reverse == 0 ) { $to_list = 0; }
	$Reverse++; $reverse++; 
    } else {
	$NotListed++;
	print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. '  av('. $available. ') PKG(', $PKGVERSION,")\n" if $DEBUG_COUNT;
    }
    print STDERR sprintf("%4d ", __LINE__ ). ' '. $DISTBASE. ' -> '. $available. "\n" if $DEBUG_CACHE;
    DistbaseCacheUpdate($DISTBASE, $URL, $available);
	#  ------------------------------------
	#  O U T P U T    H T M L    L I N E
	#  ------------------------------------
    if ($http_code) { $available = $http_code; $to_list = 1; }

    # Let background user (usually gray)  if MAINTAINER is not set.
    my($css);
    if ($MAINTAINER =~/pkgsrc-users@/) { $css = " class=\"user\"";} else { $css = '';}
    if ($reverse) { $css = " class=\"reverse\"";}

#print STDERR sprintf("%4d ", __LINE__ ), ' HOMEPAGE: ', $HOMEPAGE,"\n" if $DEBUG_DISTBASE;
    my($homepage) = $PKGBASE;     # if HOMEPAGE is empty, don't use href, set for that
    if ($HOMEPAGE) { $homepage = sprintf "<a href=\"%s\">%s</a>", $HOMEPAGE, $PKGBASE;}
    my ($HomePageString);
    if ($HomePageStat != 200 ) { $HomePageString =  "<span class=\"pale_dns\"> (". $HomePageStat.')</span> ';}
    my ($MasterSiteString);
    if ($MasterSiteStat != 200 && $available eq '0.0' ) { $MasterSiteString =  "<span class=\"pale_dns\">(". $MasterSiteStat.')</span> ';}
    # ------ E D I T         M A I N T A I N E R  -------
    $MAINTAINER =~ s/\@NetBSD.org//i;
    $MAINTAINER =  substr($MAINTAINER, 0, 13);  # pkgsrc-users@ 13 letters

    $output_record = sprintf "<tr%s>
<td><a href=\"%s\">%s</a></td>
<td>%s</td>
<td>%s</td>
<td><span class=\"grey\">-&gt;</span></td><td>%10s</td><td>%s</td><td>%s</td><td>%10s</td>
<td>%s</td></tr>\n", 
	    $css,
	    $CVSweb. $this_PackageDir,	$this_PackageDir,
	    $homepage. $HomePageString,
	    $PKGVERSION, 
	    GreyDigitIf00($http_code, $available),
	    $TODO{$PKGBASE},
	    $MAINTAINER, 
	    ColorUrlDigit($URL). $MasterSiteString;
    if ($to_list == 1) {
	print SUMMARY $output_record;
#	print STDERR "Needs update";
    } else { 
	print STDERR "not-to-list";
    }
    if ($available eq '0.0') { 
#	print NO_AVAIL $summary;
#	print STDERR  ' fail to get ver. -> ', $URL;
#	$NotAvailable++;
	}
    print STDERR "\n";
    my($Elapsed) = time() - $PackageStart;
    RecordMaxElapsed($Elapsed);
    } #     foreach my $PackageName (@PackageNames) {
    # ------------------------------------------
    #    E N D    F O R   E A C H  P A C K A G E 
    #  -----------------------------------------
    
#} #end sub DoEachPackage
  }   #     foreach my $dir (@categories) {
    Stats($start_time, $argv);
close(SUMMARY);
print STDERR "renaming $summary_tmp to $summary\n";
system ("mv $summary_tmp $summary");
exit;
__END__
## Local Variables:
## outline-regexp: "^[ 	]*sub\\s-+\\([-[:alnum:]+_:]+\\)\\|^\\(?:my\\|our\\)\\s-+\\([$@%][-[:alnum:]+_:]+\\)\\s-*=\\|^[ 	]*package\\s-+\\([-[:alnum:]+_:]+\\);\\|^=head[0-9][ 	]+\\(.*\\)\\|^=cut\\>\\|##"
## End:

; please note I have copy in ~/.emacs-sub/time-stamp-setup.el
(require 'time-stamp)
(add-hook 'write-file-hooks 'time-stamp)
(setq time-stamp-active t)
(setq time-stamp-time-zone "UTC")
(setq time-stamp-format "%04y-%02m-%02d %02H:%02M");
(setq time-stamp-start "$VERSION = \"") ;
(setq time-stamp-end "\"") ;
(setq time-stamp-line-limit "10") ; ; default is 8
