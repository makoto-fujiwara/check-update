#! /usr/pkg/bin/perl
use strict;
use 5.012; # so readdir assigns to $_ in a lone while test (See perldoc -f readdir)
use Getopt::Std;
require Algorithm::Diff;

# example when you need manually invocation
# trailing slash after HEAD is important
# h97@makoto 12:53:06/160519(..git-work/check-update)% (cd ~/public_html/pkgsrc/check-update/HEAD; perl /export/git-work/check-update/summary-diff -d ~/public_html/pkgsrc/check-update/HEAD/  -u  http://www.ki.nu/~makoto/pkgsrc/check-update/HEAD/ )

my($DEBUG) = 0;

## ------------------------------------------
##             P R O T O T Y P E 
## ------------------------------------------
sub FindRecentTwo($);

## ------------------------------------------
##            S U B R O U T I N E
## ------------------------------------------
sub Usage() {
}
sub PrintHeader() {
    print HTML <<SUMMARY;
<html>
<style>
    body    { font-size: small;}
    table   { font-size: small;}
    tr.user      { background-color: \#e8e8f0; }
    tr.reverse   { background-color: \#e0c8e8; }
    tr.plus      { background-color: \#d0d0ff; }
    tr.minus     { background-color: \#ffe0e0; }
    span.reverse { background-color: \#e0c8e8; }
    a.rev { background: \#328032;color: white;}
    span.brown     { color: brown;}
    span.grey      { color: \#608060;}
    span.grey      { color: \#c09090;}
    span.pale550   { color: \#e0e090;}
    span.pale404   { color: \#f0a000;}
    span.pale403   { color: \#90e0e0;}

    span.pale302   { color: \#806080;}
    span.pale301   { color: \#804080;}

    span.pale_dns  { color: \#c040c0;}
    span.pale_arrow { color: \#c090c0;}
    span.pale0_0    { color: \#e0e090;}
    td.update { background: \#d0c8c8;}
    td.grey   { background: \#c0c0c0;}
</style>

<body>
<table cellspacing=0 cellpadding=3 border=0>
SUMMARY
}
# ------------------------------------------
sub FindRecentTwo($) {
    my ($directory) = shift;
    my (@list);

    opendir(my $dh, $directory) || print "Problem reading directory($directory):$!\n";
    while( readdir $dh ) {
	if ( /^20[0-9-]+$/ ) { push(@list, $_);};
    }
    closedir($dh);
    my(@sorted) = sort @list;
    return ($sorted[$#sorted], $sorted[$#sorted - 1]);
 }
# ------------------------------------------
# retrieve one logical record of <tr> ... </tr>
sub GetOneRecord($){
    my ($dh) = shift;
    my ($line) = '';
    my ($start) = '';
    my ($EOR) = 0;	# EndOfRecord
    my ($EOF) = 0;
    
    while ( ($EOR == 0)  && ($line = readline $dh )) {
#	print STDERR sprintf("%4d ", __LINE__), $line;
	chomp ($line);
	   if (           $line =~ m|<tr class="user">|  )  { $start = $line ; }
	elsif (           $line =~ m|<tr>|  )   { $start .= $line ; }
	elsif ( $start && ($line =~ m|</tr>|))	{ $start .= $line ; $EOR++ ; }
	elsif ( $start )	 		{ $start .= $line ;          } # alread started
    }
    if (undef($line)) { $EOF++;}
# ignore parenthesis phrase  ....  <span class="pale_dns"> (503)</span> </td>

    $start =~ s|<span class=\"[a-z_]+\">[ ]*\([^()]+\)</span>[ ]*<|<|g;
    $start =~ s/(<a href=\".*\") class=\"(github|sf)\"/$1/g;

#    my ($name, $version);
#	print STDERR sprintf("%4d ", __LINE__), $start;
#	                              1          2            3            4          5          6   
#    if ( $start =~ m|<tr.*["]*><td>(.*)</td><td>(.*)</td><td>(.*)</td><td>.*</td><td>.*</td><td>.*</td><td>.*</td><td>.*</td><td>.*</td></tr>| ) { 
#	if (0) {
#	print STDERR '1 ', $1, "\n";
#	print STDERR '2 ', $2, "\n";
#	print STDERR '3 ', $3, "\n";
#	print STDERR '4 ', $4, "\n";}
#	$name = $1;
#	$version = $3;
#	$name =~ s|<a href[^>]+>||;
#	$name =~ s|</a>||;
#    } else {
#	# usually header or etc.
#    }
    if ($EOF) { return '';  }
    else      { return $start; }
}
# ------------------------------------------
#my (@Pointer) = ();
my (@Lines) = ();

#my ($limit);
sub GetLines($){
   my ($name) = shift;
   my ($buffer);
#  $#Pointer = -1; # make it empty
   $#Lines   = -1; # make it empty
#   $limit = 10;
   print STDERR sprintf("%4d ", __LINE__), $name, "\n" if $DEBUG;
   open(NAME, $name) || print sprintf("%4d ", __LINE__), '<', (caller 0)[2], '> :', (caller 0 )[3], ": Problem opening $name to read $! \n";
    do { 
#	($name, $version, $buffer) = (GetOneRecord(*NAME));
			  $buffer  = (GetOneRecord(*NAME));
#	print STDERR sprintf("%04d ", __LINE__), $buffer ,' ===',"\n"; 
#	push(@Pointer, [$name, $version, $buffer]); 
	push(@Lines, $buffer);
	}
   while $buffer  ; # && $limit--;
   close(NAME);
   return @Lines;
}
sub EditClass($$) {
    my ($line)  = shift;
    my ($color) = shift;

    if ($color ne 'none') {
	$line =~ s|<tr class="user">|<tr>|;
	$line =~ s|<tr>|<tr class="$color">|;
    }
    return $line;
}
sub WriteDiff($$) {
    my ($B) = shift;	# Before
    my ($A) = shift;	# New

    my ($plus_count) = 0;
    my ($minus_count) = 0;

    print STDERR sprintf("%4d ", __LINE__), $A, "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), $B, "\n" if $DEBUG;

    my(@A_lines) = GetLines($A);
    my(@B_lines) = GetLines($B);
#    my($a, $b) = (0, 0);

    my $diff = Algorithm::Diff->new( \@A_lines, \@B_lines );

    $diff->Base( 1 );   # Return line numbers, not indices
    while(  $diff->Next()  ) {
	if ($diff->Same() ) {
	    print HTML "  $_","\n"  for  $diff->Same(); next;}
#	if(  ! $diff->Items(2)  ) {
#	            printf STDERR" ***  (delete) =+=  %d,%dd%d\n",
#            $diff->Get(qw( Min1 Max1 Max2 ));
#	} elsif(  ! $diff->Items(1)  ) {
#	            printf " *** (added) =-= %da%d,%d\n",
#           $diff->Get(qw( Max1 Min2 Max2 ));
#	} else {
#	    	    printf " *** -(changed) ---- %d,%dc%d,%d\n",
#		$diff->Get(qw( Min1 Max1 Min2 Max2 ));
#	}
	for ($diff->Items(1)) {
	    print STDERR "\t", ' a+ ' if $DEBUG; print HTML EditClass($_, 'plus') ,"\n"; $plus_count++; };
	for ($diff->Items(2)) {
	    print STDERR "\t", ' b- ' if $DEBUG; print HTML EditClass($_, 'minus'),"\n"; $minus_count++; };
    }
    print STDERR "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), ' =========================',"\n" if $DEBUG;
    print STDERR "<!--  ForDiff plus: $plus_count minus: $minus_count -->\n" if $DEBUG;
    print HTML   "<!--  ForDiff plus: $plus_count minus: $minus_count -->\n";
    return;

}
sub WriteDiff_old($$) {
    my ($B) = shift;
    my ($A) = shift;

    my ($plus_count) = 0;
    my ($minus_count) = 0;

    print STDERR sprintf("%4d ", __LINE__), $A, "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), $B, "\n" if $DEBUG;

    my(@A_lines) = GetLines($A);
    my(@B_lines) = GetLines($B);
    my($a, $b) = (0, 0);
    

    print STDERR sprintf("%4d ", __LINE__), 'a: ', $#A_lines, ' b: ', $#B_lines, "\n"  if $DEBUG;
    while (( $a <= $#A_lines ) && ($b <= $#B_lines )) {
    print STDERR sprintf("%4d ", __LINE__), 'a: ', $a, ' : ', $#A_lines, ' b: ', $b, ' : ', $#B_lines, "\n"  if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), '(a: ',$a,') ', $A_lines[$a] -> [0], '   ', $A_lines[$a] -> [1],
	                                   "\t",'(b: ',$b,') ', $B_lines[$b] -> [0], '   ', $B_lines[$b] -> [1]  if $DEBUG;
	# index:
	# 0 .. name
	# 1 .. version
	# 2 .. buffer (TEXT)
#	if ($a > 60 || $b > 60) { exit;}
	if     ( $A_lines[$a] -> [0] eq $B_lines[$b] -> [0] )	{	# the names are the same
	    if ( $A_lines[$a] -> [1] eq $B_lines[$b] -> [1] )	{ print HTML EditClass($A_lines[$a] -> [2], 'none'), "\n" ; print STDERR "\t", ' = '  if $DEBUG;
	    }  # The versions are the same
	    else						{ print HTML EditClass($A_lines[$a] -> [2], 'plus'), "\n"; $plus_count++ ; print STDERR "\t", ' a+ ' if $DEBUG;;}
	    $a++ ; $b++;
	} elsif( $A_lines[$a + 1] -> [0] gt $B_lines[$b] -> [0] )	
								{ print STDERR "\t", ' b- ' if $DEBUG;; print HTML EditClass($B_lines[$b] -> [2], 'minus'); $minus_count++; $b++;
	} else 							{ print STDERR "\t", ' a+ ' if $DEBUG;; print HTML EditClass($A_lines[$a] -> [2], 'plus') ; $plus_count++;  $a++; }

	if  ( $A_lines[$a] -> [0] eq '' ||
	      $B_lines[$b] -> [0] eq '')   { last;}
	print STDERR "\n" if $DEBUG;
    }
    print STDERR "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), ' =========================',"\n" if $DEBUG;
    print STDERR "<!--  ForDiff plus: $plus_count minus: $minus_count -->\n" if $DEBUG;
    print HTML   "<!--  ForDiff plus: $plus_count minus: $minus_count -->\n";
    return;
}
## ------------------------------------------
##                 M A I N 
## ------------------------------------------

my($URL, $DIR);

our(%opts);
getopts('d:u:', \%opts);
if ($opts{'u'}) { $URL = $opts{'u'};}
else            { $URL = 'http://www.ki.nu/~makoto/pkgsrc/check-update/';}

if ($opts{'d'}) { $DIR = $opts{'d'};}
else            { $DIR = $ENV{'HOME'}.'/public_html/pkgsrc/check-update/';}

my($directory) = $DIR;

my($new, $before) = FindRecentTwo($directory);
print STDERR sprintf("%4d ", __LINE__), 'before: ', $before,"\n" if $DEBUG;
print STDERR sprintf("%4d ", __LINE__), 'new:    ', $new,"\n" if $DEBUG;

my (@new);
my (@before);
# ---------------------------------------------------------
#  reading new directory and put list of filename onto @new
# ---------------------------------------------------------
opendir(my $dh, $directory.'/'. $new) || print "Problem reading directory($new):$!\n";
while ( readdir $dh ) {
    if (/^[a-z].*\.html/ ) { push(@new, $_)}
}
closedir($dh);
# ------------------------------------------------------------
#  reading new directory and put list of filename onto @before
# ------------------------------------------------------------
opendir($dh, $directory.'/'. $before) || print "Problem reading directory($before):$!\n";
while ( readdir $dh ) {
    if (/^[a-z].*\.html/ ) { push(@before, $_)}
}
closedir($dh);

print STDERR sprintf("%4d ", __LINE__), 'directory: ', $directory, ' ', $new, "\n"  if $DEBUG;
# ----------------------------------------------
#  set output directory
# ----------------------------------------------
my ($DIFF_DIR) = $directory.$new.'/diff';
if (! -d $DIFF_DIR ) { mkdir $DIFF_DIR ;}

foreach my $i ( sort @new) {
    my ($category) = $i;
        $category  =~ s/.html//;
    my ($output_file) = $DIFF_DIR.'/'.$i;
    #-----------------------------------------------------------
    # set filename, $before and $new have 'date-h' format string
    #-----------------------------------------------------------
    my ($before) = $directory . '/' . $before . '/' . $i;
    my ($new)	 = $directory . '/' . $new    . '/' . $i;

    print STDERR sprintf("%4d ", __LINE__), $category .': output to: ', $output_file, "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), '  before: ', $before, "\n" if $DEBUG;
    print STDERR sprintf("%4d ", __LINE__), '     new: ', $new, "\n" if $DEBUG;

    open(HTML, "> $output_file") ;
    PrintHeader();
    WriteDiff($before, $new);
    close(HTML);


    print STDERR sprintf("%4d ", __LINE__), ' =========================',"\n" if $DEBUG;
}

__END__
## Local Variables:
## mode: outline-minor
## outline-regexp: "^[ 	]*sub\\s-+\\([-[:alnum:]+_:]+\\)\\|^\\(?:my\\|our\\)\\s-+\\([$@%][-[:alnum:]+_:]+\\)\\s-*=\\|^[ 	]*package\\s-+\\([-[:alnum:]+_:]+\\);\\|^=head[0-9][ 	]+\\(.*\\)\\|^=cut\\>\\|##"
## End:
