#! /usr/pkg/bin/perl
# The script to generating 00_Summary.html for whole statistics
use strict;

sub Header($){
    *HTML = shift;
# td..g. is for grey
    print HTML <<HEAD;
    <html>
   <title>pksrc to-be-updated stats</title>
   <style>
   body     { font-size: small;}
   table    { font-size: small;}
   tr.even  { background-color: \#f0f0f0}
   tr.total { background-color: \#f0f0f0}
   tr.head  { background-color: \#e0e0f0}

    td.p2   { background-color: \#f0e0e0}
    td.p1   { background-color: \#f0f0e0}
    td.m1   { background-color: \#e0f0e0}
    td.m2   { background-color: \#e0f0f0}

    td.pg2   { background-color: \#e0d0d0}
    td.pg1   { background-color: \#e0e0d0}
    td.mg1   { background-color: \#d0e0d0}
    td.mg2   { background-color: \#d0e0e0}

    span.tiny {font-size: tiny;}
    </style><body>
<h1> Number of Packages to be updated (Summary)</h1>
The system in debug status, the numbers shown vary by tool side.
Don't rely on too much, thanks for an attention.
<br>
<span class="tiny"> devel is divided into [A-Za-o]* p* [q-z]* for speed up reason</span>
HEAD
#'
}

my($DIR) = $ENV{'HOME'}.'/public_html/pkgsrc/check-update';
my($URL) = 'http://www.ki.nu/~makoto/pkgsrc/check-update/';
my($date);
my(@DATE);

# collect number
my(%FOUND);
my(%TODO);
my(%OK);

my(@th);
my(%ForMerge);
my($HTML) = $DIR.'/00_Summary.html';
#   $HTML  = '/tmp/00_summary.html';
my(%CATEGORY);

opendir(DIR, $DIR) || print "Problem opening directory: $DIR: $!\n";
while( $_ = readdir(DIR) ) {
    if (/^\.$/) { next;}
    if (/^\.\.$/) { next;}
    if (/(^2.*)/) {
	$date = $1;
	if (-d $DIR.'/'.$date) {
	    push(@DATE, $date);}
    }
}
closedir(DIR);

open(HTML, ">$HTML") || print "Problem opening to write $HTML: $!\n";

Header(*HTML);
foreach my $date (@DATE) {
    my($directory) = $DIR.'/'.$date;
    opendir(DIR, $directory) || print "Problem opening directory: $directory: $!\n";
    while( $_ = readdir(DIR) ) {
	if (/^\.$/)	{ next;}
	if (/^\.\.$/)	{ next;}
	if (/^00/ )	{ next;}
	my($category_html) = $_;
	my($category_path) =  $directory.'/'.$category_html;
	if (-f $category_path) {
	    open(FILE, $category_path) || print "Problem opening file: $category_path: $!\n";
	    while(<FILE>) {
		chomp;
		if (/ForMerge/ ) {
		    my($category) = $category_html;
    		    $category =~ s|(\.[0-9]){0,}\.html||;
		    $CATEGORY{$category}++;
		    $ForMerge{$date}{$category} = $_;
		}
	    }
	    close(FILE);
	}
    } # while (date directory)
    closedir(DIR);
}

# column list
my(@DATE) =  sort keys %ForMerge;
    
print HTML "<table cellspacing=0 cellpadding=3 border=0>\n";
print HTML "<tr class=\"head\"><th>Date</th>";
# ---------------------------------------------------------
#  F I R S T   L E V E L   B Y   D A T E ( put title line )
# ---------------------------------------------------------
foreach my $date  (@DATE) {
    my ($short) =  $date; 
        $short =~ s/^2015//;
        $short =~ s/-[0-9]+$//;
    print HTML "<th><a href=\"./$date/00_Stats.html\">$short</a></th>";
}
print HTML "</tr>\n";

my (%EVEN) = (0, "even", 1, " ");
my ($toggle) = 0;
my (@HTML);

#my (%PrevDateByCategory);	# remember prev 
# ---------------------------------------------------------------
#  S E C O N D    L E V E L   B Y    C A T E G O R Y  (vertical)
# ---------------------------------------------------------------
foreach my $category (sort keys %CATEGORY) {
    my ($html) = '';
	
    push(@HTML, '<tr class="'. $EVEN{$toggle}. '" align= "right"><td>'. $category . '</td>');
    $toggle = 1 - $toggle;

    # -------------------------------------------------------
    #  T H I R D    L E V E L   B Y    D A T E   (horizontal)
    # -------------------------------------------------------
    my ($LeftColumnValue);
    foreach my $date (@DATE) {
	my ($ForMerge)  = $ForMerge{$date}{$category};
	    $ForMerge	=~ s/ForMergeCount://;;
	my (@ForMerge)	= split (',', $ForMerge);
	my ($class) = '';
	my ($diff) = 0;
	if ($LeftColumnValue) { $diff =  $ForMerge[0] - $LeftColumnValue }

	if ($toggle) { # grey row
	    if    ($diff > 2  ) { $class =  "class=\"pg2\""; }
	    elsif ($diff > 0  ) { $class =  "class=\"pg1\""; }
	    elsif ($diff < -2 ) { $class =  "class=\"mg2\""; }
	    elsif ($diff < 0  ) { $class =  "class=\"mb2\""; }
	} else { # white row
	    if    ($diff > 2  ) { $class =  "class=\"p2\""; }
	    elsif ($diff > 0  ) { $class =  "class=\"p1\""; }
	    elsif ($diff < -2 ) { $class =  "class=\"m2\""; }
	    elsif ($diff < 0  ) { $class =  "class=\"m2\""; }
	}
	
	$html .= '<td '. $class. '><a href="'. "$date/$category". '">'. $ForMerge[0]. '</a></td>';
	$LeftColumnValue = $ForMerge[0];
	# calculate sum for those three to output later
	$FOUND{$date}	+= $ForMerge[0];
	$TODO{$date}	+= $ForMerge[1];
	$OK{$date}	+= $ForMerge[2];
    }
    $html .=  "</tr>\n";
    push(@HTML, $html);    
}
print HTML "<tr class=\"total\" align= \"right\"><td>To be updated</td>\n";
foreach my $date (sort keys %FOUND) {
    print HTML '<td>', "<a href=\"", $date, "/00_Stats.html\">". $FOUND{$date}, '</a></td>';
}
print HTML '</tr>',"\n";

print HTML "<tr class=\"todo\" align= \"right\"><td>TODO</td>\n";
foreach my $date (sort keys %TODO) {
    print HTML '<td>', "<a href=\"", $date, "/00_Stats.html\">". $TODO{$date}, '</a></td>';
}
print HTML '</tr>',"\n";

print HTML "<tr class=\"ok\" align= \"right\"><td>OK (up-to-date)</td>\n";
foreach my $date (sort keys %OK) {
    print HTML '<td>', "<a href=\"", $date, "/00_Stats.html\">". $OK{$date}, '</a></td>';
}
print HTML '</tr>',"\n";

print HTML @HTML;

__END__;
